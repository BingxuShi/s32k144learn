Parsed function:Flexcan0_callback
Parsed function:FLEXCAN0_SEND
Parsed function:FLEXCAN0_RX_INIT
Parsed function:FLEXCAN0_INIT
Dump after hash based groups
Congruence classes: 4 (unique hash values: 4), with total: 4 items
Class size histogram [num of members]: number of classe number of classess
[1]: 4 classes


Dump after WPA based types groups
Congruence classes: 4 (unique hash values: 4), with total: 4 items
Class size histogram [num of members]: number of classe number of classess
[1]: 4 classes


Worklist has been filled with: 1
Address reference subdivision created: 0 new classes.
Dump after callgraph-based congruence reduction
Congruence classes: 4 (unique hash values: 4), with total: 4 items
Class size histogram [num of members]: number of classe number of classess
[1]: 4 classes


Init called for 0 items (0.00%).
Dump after full equality comparison of groups
Congruence classes: 4 (unique hash values: 4), with total: 4 items
Class size histogram [num of members]: number of classe number of classess
[1]: 4 classes


Worklist has been filled with: 1
Address reference subdivision created: 0 new classes.
Congruence classes: 4 (unique hash values: 4), with total: 4 items
Class size histogram [num of members]: number of classe number of classess
[1]: 4 classes



Item count: 4
Congruent classes before: 4, after: 4
Average class size before: 1.00, after: 1.00
Average non-singular class size: 0.00, count: 0
Equal symbols: 0
Fraction of visited symbols: 0.00%

Flexcan0_callback (uint8 instance, Flexcan_Ip_EventType eventType, uint32 buffIdx, const struct Flexcan_Ip_StateType * flexcanState)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG D#2 => rxData.msgId
  # DEBUG a => (int) D#2
  # DEBUG BEGIN_STMT
  # DEBUG D#1 => rxData.dataLen
  # DEBUG b => (int) D#1
  # DEBUG BEGIN_STMT
  FLEXCAN0_SEND ();
  # DEBUG BEGIN_STMT
  FlexCAN_Ip_Receive (0, 1, &rxData, 0);
  return;

}


FLEXCAN0_SEND ()
{
  uint8 TXData[8];
  struct Flexcan_Ip_DataInfoType rx_info;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  rx_info = {};
  rx_info.data_length = 8;
  rx_info.is_polling = 1;
  # DEBUG BEGIN_STMT
  TXData = "\x01\x02\x03\x04\x05\x06\x07";
  # DEBUG BEGIN_STMT
  FlexCAN_Ip_Send (0, 0, &rx_info, 20, &TXData);
  rx_info ={v} {CLOBBER};
  TXData ={v} {CLOBBER};
  return;

}


FLEXCAN0_RX_INIT ()
{
  struct Flexcan_Ip_MsgBuffType rxData;
  struct Flexcan_Ip_DataInfoType rx_info;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  rx_info = {};
  rx_info.data_length = 8;
  rx_info.is_polling = 1;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  FlexCAN_Ip_ConfigRxMb (0, 1, &rx_info, 20);
  # DEBUG BEGIN_STMT
  FlexCAN_Ip_Receive (0, 1, &rxData, 0);
  rx_info ={v} {CLOBBER};
  rxData ={v} {CLOBBER};
  return;

}


FLEXCAN0_INIT ()
{
  Flexcan_Ip_StatusType state;

  <bb 2> [local count: 118111600]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  state_5 = FlexCAN_Ip_Init_Privileged (0, &FlexCAN_State0, &FlexCAN_Config0);
  # DEBUG state => state_5
  # DEBUG BEGIN_STMT
  goto <bb 4>; [100.00%]

  <bb 3> [local count: 955630223]:
  # DEBUG BEGIN_STMT
  state_8 = FlexCAN_Ip_Init_Privileged (0, &FlexCAN_State0, &FlexCAN_Config0);
  # DEBUG state => state_8

  <bb 4> [local count: 1073741824]:
  # state_1 = PHI <state_5(2), state_8(3)>
  # DEBUG state => state_1
  # DEBUG BEGIN_STMT
  if (state_1 != 0)
    goto <bb 3>; [89.00%]
  else
    goto <bb 5>; [11.00%]

  <bb 5> [local count: 118111601]:
  # DEBUG BEGIN_STMT
  FlexCAN_Ip_SetStartMode_Privileged (0);
  return;

}


