Parsed function:SetSimTraceSel_TrustedCall.isra.0
Parsed function:ResetSimTraceSel_TrustedCall.isra.0
Parsed function:ResetPccPcsSelect_TrustedCall.isra.0
Parsed function:SetSimClkoutSel_TrustedCall.isra.0
Parsed function:ResetSimClkoutSel_TrustedCall.isra.0
Parsed function:ResetSimFtmoptSel_TrustedCall.isra.0
Parsed function:SetScgClkoutSel_TrustedCall.isra.0
Parsed function:ResetScgClkoutSel_TrustedCall.isra.0
Parsed function:SetSimLpoSel_TrustedCall.isra.0
Parsed function:ResetSimLpoSel_TrustedCall.isra.0
Parsed function:SetSimRtcSel_TrustedCall.isra.0
Parsed function:ResetSimRtcSel_TrustedCall.isra.0
Parsed function:SetScgHsrunSel_TrustedCall.isra.0
Parsed function:ResetScgHsrunSel_TrustedCall.isra.0
Parsed function:SetScgVlprSel_TrustedCall.isra.0
Parsed function:SetScgRunSel_TrustedCall.isra.0
Parsed function:ResetScgRunSel_TrustedCall.isra.0
Parsed function:SetSimTraceSel
Parsed function:ResetSimTraceSel
Parsed function:SetPccPcsSelect
Parsed function:SetPccPcsSelect_TrustedCall
Parsed function:ResetPccPcsSelect
Parsed function:SetSimClkoutSel
Parsed function:ResetSimClkoutSel
Parsed function:SetSimFtmoptSel
Parsed function:SetSimFtmoptSel_TrustedCall
Parsed function:ResetSimFtmoptSel
Parsed function:SetScgClkoutSel
Parsed function:ResetScgClkoutSel
Parsed function:SetSimLpoSel
Parsed function:ResetSimLpoSel
Parsed function:SetSimRtcSel
Parsed function:ResetSimRtcSel
Parsed function:SetScgHsrunSel
Parsed function:ResetScgHsrunSel
Parsed function:SetScgVlprSel
Parsed function:SetScgRunSel
Parsed function:ResetScgRunSel
Parsed function:Callback_SelectorEmpty
Dump after hash based groups
Congruence classes: 22 (unique hash values: 22), with total: 40 items
Class size histogram [num of members]: number of classe number of classess
[1]: 16 classes
[2]: 3 classes
[3]: 1 classes
[7]: 1 classes
[8]: 1 classes


Dump after WPA based types groups
Congruence classes: 22 (unique hash values: 22), with total: 40 items
Class size histogram [num of members]: number of classe number of classess
[1]: 16 classes
[2]: 3 classes
[3]: 1 classes
[7]: 1 classes
[8]: 1 classes


Worklist has been filled with: 21
Address reference subdivision created: 0 new classes.
Dump after callgraph-based congruence reduction
Congruence classes: 34 (unique hash values: 22), with total: 40 items
Class size histogram [num of members]: number of classe number of classess
[1]: 30 classes
[2]: 2 classes
[3]: 2 classes


Init called for 10 items (25.00%).
Dump after full equality comparison of groups
Congruence classes: 40 (unique hash values: 22), with total: 40 items
Class size histogram [num of members]: number of classe number of classess
[1]: 40 classes


Worklist has been filled with: 39
Address reference subdivision created: 0 new classes.
Congruence classes: 40 (unique hash values: 22), with total: 40 items
Class size histogram [num of members]: number of classe number of classess
[1]: 40 classes



Item count: 40
Congruent classes before: 40, after: 40
Average class size before: 1.00, after: 1.00
Average non-singular class size: 0.00, count: 0
Equal symbols: 0
Fraction of visited symbols: 0.00%

SetSimTraceSel_TrustedCall.isra.0 (const Clock_Ip_NameType ISRA.47)
{
  uint32 regValue;
  uint32 selectorValue;
  <unnamed type> _2;
  unsigned char _3;
  long unsigned int _7;
  long unsigned int _8;

  <bb 3> [local count: 1073741824]:
  # DEBUG config s=> config

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = ISRA.47_12(D);
  _3 = selectorEntryPCS_hardwareValue[_2];
  selectorValue_4 = (uint32) _3;
  # DEBUG selectorValue => selectorValue_4
  # DEBUG BEGIN_STMT
  regValue_5 ={v} MEM[(struct SIM_Type *)1074036736B].CHIPCTL;
  # DEBUG regValue => regValue_5
  # DEBUG BEGIN_STMT
  regValue_6 = regValue_5 & 4294963199;
  # DEBUG regValue => regValue_6
  # DEBUG BEGIN_STMT
  _7 = selectorValue_4 << 12;
  _8 = _7 & 4096;
  regValue_9 = regValue_6 | _8;
  # DEBUG regValue => regValue_9
  # DEBUG BEGIN_STMT
  MEM[(struct SIM_Type *)1074036736B].CHIPCTL ={v} regValue_9;
  return;

}


ResetSimTraceSel_TrustedCall.isra.0 ()
{
  uint32 regValue;
  uint32 selectorValue;
  unsigned char _1;
  long unsigned int _5;
  long unsigned int _6;

  <bb 3> [local count: 1073741824]:
  # DEBUG config s=> config

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = selectorEntryPCS_hardwareValue[28];
  selectorValue_2 = (uint32) _1;
  # DEBUG selectorValue => selectorValue_2
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  regValue_3 ={v} MEM[(struct SIM_Type *)1074036736B].CHIPCTL;
  # DEBUG regValue => regValue_3
  # DEBUG BEGIN_STMT
  regValue_4 = regValue_3 & 4294963199;
  # DEBUG regValue => regValue_4
  # DEBUG BEGIN_STMT
  _5 = selectorValue_2 << 12;
  _6 = _5 & 4096;
  regValue_7 = regValue_4 | _6;
  # DEBUG regValue => regValue_7
  # DEBUG BEGIN_STMT
  MEM[(struct SIM_Type *)1074036736B].CHIPCTL ={v} regValue_7;
  return;

}


ResetPccPcsSelect_TrustedCall.isra.0 (const Clock_Ip_NameType ISRA.40)
{
  uint32 regValue;
  uint32 pccIndex;
  <unnamed type> _2;
  unsigned char _3;

  <bb 3> [local count: 1073741824]:
  # DEBUG config s=> config

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = ISRA.40_9(D);
  _3 = clockFeatures[_2][4];
  pccIndex_4 = (uint32) _3;
  # DEBUG pccIndex => pccIndex_4
  # DEBUG BEGIN_STMT
  regValue_5 ={v} MEM[(struct PCC_Type *)1074155520B].PCCn[pccIndex_4];
  # DEBUG regValue => regValue_5
  # DEBUG BEGIN_STMT
  regValue_6 = regValue_5 & 3103784959;
  # DEBUG regValue => regValue_6
  # DEBUG BEGIN_STMT
  MEM[(struct PCC_Type *)1074155520B].PCCn[pccIndex_4] ={v} regValue_6;
  return;

}


SetSimClkoutSel_TrustedCall.isra.0 (const Clock_Ip_NameType ISRA.37)
{
  uint32 regValue;
  uint32 selectorValue;
  <unnamed type> _2;
  unsigned char _3;
  long unsigned int _7;

  <bb 3> [local count: 1073741824]:
  # DEBUG config s=> config

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = ISRA.37_11(D);
  _3 = selectorEntry_hardwareValue[_2];
  selectorValue_4 = (uint32) _3;
  # DEBUG selectorValue => selectorValue_4
  # DEBUG BEGIN_STMT
  regValue_5 ={v} MEM[(struct SIM_Type *)1074036736B].CHIPCTL;
  # DEBUG regValue => regValue_5
  # DEBUG BEGIN_STMT
  regValue_6 = regValue_5 & 4294967055;
  # DEBUG regValue => regValue_6
  # DEBUG BEGIN_STMT
  _7 = selectorValue_4 << 4;
  regValue_8 = regValue_6 | _7;
  # DEBUG regValue => regValue_8
  # DEBUG BEGIN_STMT
  MEM[(struct SIM_Type *)1074036736B].CHIPCTL ={v} regValue_8;
  return;

}


ResetSimClkoutSel_TrustedCall.isra.0 ()
{
  uint32 regValue;

  <bb 3> [local count: 1073741824]:
  # DEBUG config s=> config

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  regValue_1 ={v} MEM[(struct SIM_Type *)1074036736B].CHIPCTL;
  # DEBUG regValue => regValue_1
  # DEBUG BEGIN_STMT
  regValue_2 = regValue_1 & 4294965007;
  # DEBUG regValue => regValue_2
  # DEBUG BEGIN_STMT
  MEM[(struct SIM_Type *)1074036736B].CHIPCTL ={v} regValue_2;
  return;

}


ResetSimFtmoptSel_TrustedCall.isra.0 (const Clock_Ip_NameType ISRA.30)
{
  uint32 regValue;
  uint32 selectorValue;
  uint32 instance;
  unsigned char _1;
  <unnamed type> _4;
  unsigned char _5;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _13;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _21;

  <bb 6> [local count: 1073741824]:
  # DEBUG config s=> config

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = selectorEntry_hardwareValue[5];
  selectorValue_2 = (uint32) _1;
  # DEBUG selectorValue => selectorValue_2
  # DEBUG BEGIN_STMT
  _4 = ISRA.30_26(D);
  _5 = clockFeatures[_4][0];
  instance_6 = (uint32) _5;
  # DEBUG instance => instance_6
  # DEBUG BEGIN_STMT
  regValue_7 ={v} MEM[(struct SIM_Type *)1074036736B].FTMOPT0;
  # DEBUG regValue => regValue_7
  # DEBUG BEGIN_STMT
  if (instance_6 <= 3)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  _8 = instance_6 << 1;
  _9 = _8 + 24;
  _10 = 3 << _9;
  _11 = ~_10;
  regValue_12 = regValue_7 & _11;
  # DEBUG regValue => regValue_12
  # DEBUG BEGIN_STMT
  _13 = selectorValue_2 << _9;
  regValue_14 = regValue_12 | _13;
  # DEBUG regValue => regValue_14
  goto <bb 5>; [100.00%]

  <bb 4> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  _15 = instance_6 + 4294967292;
  _16 = _15 << 1;
  _17 = _16 + 16;
  _18 = 3 << _17;
  _19 = ~_18;
  regValue_20 = regValue_7 & _19;
  # DEBUG regValue => regValue_20
  # DEBUG BEGIN_STMT
  _21 = selectorValue_2 << _17;
  regValue_22 = regValue_20 | _21;
  # DEBUG regValue => regValue_22

  <bb 5> [local count: 1073741824]:
  # regValue_23 = PHI <regValue_14(3), regValue_22(4)>
  # DEBUG regValue => regValue_23
  # DEBUG BEGIN_STMT
  MEM[(struct SIM_Type *)1074036736B].FTMOPT0 ={v} regValue_23;
  return;

}


SetScgClkoutSel_TrustedCall.isra.0 (const Clock_Ip_NameType ISRA.27)
{
  uint32 regValue;
  uint32 selectorValue;
  <unnamed type> _2;
  unsigned char _3;
  long unsigned int _7;

  <bb 3> [local count: 1073741824]:
  # DEBUG config s=> config

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = ISRA.27_11(D);
  _3 = selectorEntrySCS_hardwareValue[_2];
  selectorValue_4 = (uint32) _3;
  # DEBUG selectorValue => selectorValue_4
  # DEBUG BEGIN_STMT
  regValue_5 ={v} MEM[(struct SCG_Type *)1074151424B].CLKOUTCNFG;
  # DEBUG regValue => regValue_5
  # DEBUG BEGIN_STMT
  regValue_6 = regValue_5 & 4043309055;
  # DEBUG regValue => regValue_6
  # DEBUG BEGIN_STMT
  _7 = selectorValue_4 << 24;
  regValue_8 = regValue_6 | _7;
  # DEBUG regValue => regValue_8
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].CLKOUTCNFG ={v} regValue_8;
  return;

}


ResetScgClkoutSel_TrustedCall.isra.0 ()
{
  uint32 regValue;
  uint32 selectorValue;
  unsigned char _1;
  long unsigned int _5;

  <bb 3> [local count: 1073741824]:
  # DEBUG config s=> config

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = selectorEntrySCS_hardwareValue[5];
  selectorValue_2 = (uint32) _1;
  # DEBUG selectorValue => selectorValue_2
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  regValue_3 ={v} MEM[(struct SCG_Type *)1074151424B].CLKOUTCNFG;
  # DEBUG regValue => regValue_3
  # DEBUG BEGIN_STMT
  regValue_4 = regValue_3 & 4043309055;
  # DEBUG regValue => regValue_4
  # DEBUG BEGIN_STMT
  _5 = selectorValue_2 << 24;
  regValue_6 = regValue_4 | _5;
  # DEBUG regValue => regValue_6
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].CLKOUTCNFG ={v} regValue_6;
  return;

}


SetSimLpoSel_TrustedCall.isra.0 (const Clock_Ip_NameType ISRA.22)
{
  uint32 regValue;
  uint32 selectorValue;
  <unnamed type> _2;
  unsigned char _3;
  long unsigned int _7;

  <bb 3> [local count: 1073741824]:
  # DEBUG config s=> config

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = ISRA.22_11(D);
  _3 = selectorEntryPCS_hardwareValue[_2];
  selectorValue_4 = (uint32) _3;
  # DEBUG selectorValue => selectorValue_4
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  regValue_5 ={v} MEM[(struct SIM_Type *)1074036736B].LPOCLKS;
  # DEBUG regValue => regValue_5
  # DEBUG BEGIN_STMT
  regValue_6 = regValue_5 & 4294967283;
  # DEBUG regValue => regValue_6
  # DEBUG BEGIN_STMT
  _7 = selectorValue_4 << 2;
  regValue_8 = regValue_6 | _7;
  # DEBUG regValue => regValue_8
  # DEBUG BEGIN_STMT
  MEM[(struct SIM_Type *)1074036736B].LPOCLKS ={v} regValue_8;
  return;

}


ResetSimLpoSel_TrustedCall.isra.0 ()
{
  uint32 regValue;
  uint32 selectorValue;
  unsigned char _1;
  long unsigned int _5;

  <bb 3> [local count: 1073741824]:
  # DEBUG config s=> config

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = selectorEntryPCS_hardwareValue[1];
  selectorValue_2 = (uint32) _1;
  # DEBUG selectorValue => selectorValue_2
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  regValue_3 ={v} MEM[(struct SIM_Type *)1074036736B].LPOCLKS;
  # DEBUG regValue => regValue_3
  # DEBUG BEGIN_STMT
  regValue_4 = regValue_3 & 4294967283;
  # DEBUG regValue => regValue_4
  # DEBUG BEGIN_STMT
  _5 = selectorValue_2 << 2;
  regValue_6 = regValue_4 | _5;
  # DEBUG regValue => regValue_6
  # DEBUG BEGIN_STMT
  MEM[(struct SIM_Type *)1074036736B].LPOCLKS ={v} regValue_6;
  return;

}


SetSimRtcSel_TrustedCall.isra.0 (const Clock_Ip_NameType ISRA.17)
{
  uint32 regValue;
  uint32 selectorValue;
  <unnamed type> _2;
  unsigned char _3;
  long unsigned int _7;

  <bb 3> [local count: 1073741824]:
  # DEBUG config s=> config

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = ISRA.17_11(D);
  _3 = selectorEntry_hardwareValue[_2];
  selectorValue_4 = (uint32) _3;
  # DEBUG selectorValue => selectorValue_4
  # DEBUG BEGIN_STMT
  regValue_5 ={v} MEM[(struct SIM_Type *)1074036736B].LPOCLKS;
  # DEBUG regValue => regValue_5
  # DEBUG BEGIN_STMT
  regValue_6 = regValue_5 & 4294967247;
  # DEBUG regValue => regValue_6
  # DEBUG BEGIN_STMT
  _7 = selectorValue_4 << 4;
  regValue_8 = regValue_6 | _7;
  # DEBUG regValue => regValue_8
  # DEBUG BEGIN_STMT
  MEM[(struct SIM_Type *)1074036736B].LPOCLKS ={v} regValue_8;
  return;

}


ResetSimRtcSel_TrustedCall.isra.0 ()
{
  uint32 regValue;
  uint32 selectorValue;
  unsigned char _1;
  long unsigned int _5;

  <bb 3> [local count: 1073741824]:
  # DEBUG config s=> config

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = selectorEntry_hardwareValue[14];
  selectorValue_2 = (uint32) _1;
  # DEBUG selectorValue => selectorValue_2
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  regValue_3 ={v} MEM[(struct SIM_Type *)1074036736B].LPOCLKS;
  # DEBUG regValue => regValue_3
  # DEBUG BEGIN_STMT
  regValue_4 = regValue_3 & 4294967247;
  # DEBUG regValue => regValue_4
  # DEBUG BEGIN_STMT
  _5 = selectorValue_2 << 4;
  regValue_6 = regValue_4 | _5;
  # DEBUG regValue => regValue_6
  # DEBUG BEGIN_STMT
  MEM[(struct SIM_Type *)1074036736B].LPOCLKS ={v} regValue_6;
  return;

}


SetScgHsrunSel_TrustedCall.isra.0 (const Clock_Ip_NameType ISRA.12)
{
  uint32 regValue;
  uint32 selectorValue;
  <unnamed type> _2;
  unsigned char _3;
  long unsigned int _7;
  long unsigned int _8;

  <bb 3> [local count: 1073741824]:
  # DEBUG config s=> config

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = ISRA.12_12(D);
  _3 = selectorEntrySCS_hardwareValue[_2];
  selectorValue_4 = (uint32) _3;
  # DEBUG selectorValue => selectorValue_4
  # DEBUG BEGIN_STMT
  regValue_5 ={v} MEM[(struct SCG_Type *)1074151424B].HCCR;
  # DEBUG regValue => regValue_5
  # DEBUG BEGIN_STMT
  regValue_6 = regValue_5 & 4043309055;
  # DEBUG regValue => regValue_6
  # DEBUG BEGIN_STMT
  _7 = selectorValue_4 << 24;
  _8 = _7 & 251658240;
  regValue_9 = regValue_6 | _8;
  # DEBUG regValue => regValue_9
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].HCCR ={v} regValue_9;
  return;

}


ResetScgHsrunSel_TrustedCall.isra.0 ()
{
  uint32 regValue;
  uint32 selectorValue;
  unsigned char _1;
  long unsigned int _5;
  long unsigned int _6;

  <bb 3> [local count: 1073741824]:
  # DEBUG config s=> config

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = selectorEntrySCS_hardwareValue[5];
  selectorValue_2 = (uint32) _1;
  # DEBUG selectorValue => selectorValue_2
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  regValue_3 ={v} MEM[(struct SCG_Type *)1074151424B].HCCR;
  # DEBUG regValue => regValue_3
  # DEBUG BEGIN_STMT
  regValue_4 = regValue_3 & 4043309055;
  # DEBUG regValue => regValue_4
  # DEBUG BEGIN_STMT
  _5 = selectorValue_2 << 24;
  _6 = _5 & 251658240;
  regValue_7 = regValue_4 | _6;
  # DEBUG regValue => regValue_7
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].HCCR ={v} regValue_7;
  return;

}


SetScgVlprSel_TrustedCall.isra.0 (const Clock_Ip_NameType ISRA.7)
{
  uint32 regValue;
  uint32 selectorValue;
  <unnamed type> _2;
  unsigned char _3;
  long unsigned int _7;
  long unsigned int _8;

  <bb 3> [local count: 1073741824]:
  # DEBUG config s=> config

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = ISRA.7_12(D);
  _3 = selectorEntrySCS_hardwareValue[_2];
  selectorValue_4 = (uint32) _3;
  # DEBUG selectorValue => selectorValue_4
  # DEBUG BEGIN_STMT
  regValue_5 ={v} MEM[(struct SCG_Type *)1074151424B].VCCR;
  # DEBUG regValue => regValue_5
  # DEBUG BEGIN_STMT
  regValue_6 = regValue_5 & 4043309055;
  # DEBUG regValue => regValue_6
  # DEBUG BEGIN_STMT
  _7 = selectorValue_4 << 24;
  _8 = _7 & 251658240;
  regValue_9 = regValue_6 | _8;
  # DEBUG regValue => regValue_9
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].VCCR ={v} regValue_9;
  return;

}


SetScgRunSel_TrustedCall.isra.0 (const Clock_Ip_NameType ISRA.4)
{
  uint32 regValue;
  uint32 selectorValue;
  <unnamed type> _2;
  unsigned char _3;
  long unsigned int _7;
  long unsigned int _8;

  <bb 3> [local count: 1073741824]:
  # DEBUG config s=> config

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = ISRA.4_12(D);
  _3 = selectorEntrySCS_hardwareValue[_2];
  selectorValue_4 = (uint32) _3;
  # DEBUG selectorValue => selectorValue_4
  # DEBUG BEGIN_STMT
  regValue_5 ={v} MEM[(struct SCG_Type *)1074151424B].RCCR;
  # DEBUG regValue => regValue_5
  # DEBUG BEGIN_STMT
  regValue_6 = regValue_5 & 4043309055;
  # DEBUG regValue => regValue_6
  # DEBUG BEGIN_STMT
  _7 = selectorValue_4 << 24;
  _8 = _7 & 251658240;
  regValue_9 = regValue_6 | _8;
  # DEBUG regValue => regValue_9
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].RCCR ={v} regValue_9;
  return;

}


ResetScgRunSel_TrustedCall.isra.0 ()
{
  uint32 regValue;
  uint32 selectorValue;
  unsigned char _1;
  long unsigned int _5;
  long unsigned int _6;

  <bb 3> [local count: 1073741824]:
  # DEBUG config s=> config

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = selectorEntrySCS_hardwareValue[5];
  selectorValue_2 = (uint32) _1;
  # DEBUG selectorValue => selectorValue_2
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  regValue_3 ={v} MEM[(struct SCG_Type *)1074151424B].RCCR;
  # DEBUG regValue => regValue_3
  # DEBUG BEGIN_STMT
  regValue_4 = regValue_3 & 4043309055;
  # DEBUG regValue => regValue_4
  # DEBUG BEGIN_STMT
  _5 = selectorValue_2 << 24;
  _6 = _5 & 251658240;
  regValue_7 = regValue_4 | _6;
  # DEBUG regValue => regValue_7
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].RCCR ={v} regValue_7;
  return;

}


SetSimTraceSel (const struct Clock_Ip_SelectorConfigType * config)
{
  <unnamed type> _4;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _4 = MEM[(<unnamed type> *)config_2(D) + 4B];
  # DEBUG D#17 => config_2(D)
  SetSimTraceSel_TrustedCall.isra.0 (_4);
  return;

}


ResetSimTraceSel (const struct Clock_Ip_SelectorConfigType * config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG D#16 => config_2(D)
  ResetSimTraceSel_TrustedCall.isra.0 ();
  return;

}


SetPccPcsSelect (const struct Clock_Ip_SelectorConfigType * config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  SetPccPcsSelect_TrustedCall (config_2(D));
  return;

}


SetPccPcsSelect_TrustedCall (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 selectorValue;
  uint32 pccIndex;
  uint32 regValue;
  <unnamed type> _1;
  unsigned char _2;
  <unnamed type> _3;
  unsigned char _4;
  long unsigned int _5;
  long unsigned int _6;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = config_8(D)->name;
  _2 = clockFeatures[_1][4];
  pccIndex_9 = (uint32) _2;
  # DEBUG pccIndex => pccIndex_9
  # DEBUG BEGIN_STMT
  _3 = config_8(D)->value;
  _4 = selectorEntryPCS_hardwareValue[_3];
  selectorValue_10 = (uint32) _4;
  # DEBUG selectorValue => selectorValue_10
  # DEBUG BEGIN_STMT
  regValue_11 ={v} MEM[(struct PCC_Type *)1074155520B].PCCn[pccIndex_9];
  # DEBUG regValue => regValue_11
  # DEBUG BEGIN_STMT
  regValue_12 = regValue_11 & 4177526783;
  # DEBUG regValue => regValue_12
  # DEBUG BEGIN_STMT
  _5 = selectorValue_10 << 24;
  _6 = _5 & 117440512;
  regValue_13 = _6 | regValue_12;
  # DEBUG regValue => regValue_13
  # DEBUG BEGIN_STMT
  MEM[(struct PCC_Type *)1074155520B].PCCn[pccIndex_9] ={v} regValue_13;
  return;

}


ResetPccPcsSelect (const struct Clock_Ip_SelectorConfigType * config)
{
  <unnamed type> _4;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _4 = MEM[(<unnamed type> *)config_2(D)];
  # DEBUG D#15 => config_2(D)
  ResetPccPcsSelect_TrustedCall.isra.0 (_4);
  return;

}


SetSimClkoutSel (const struct Clock_Ip_SelectorConfigType * config)
{
  <unnamed type> _4;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _4 = MEM[(<unnamed type> *)config_2(D) + 4B];
  # DEBUG D#14 => config_2(D)
  SetSimClkoutSel_TrustedCall.isra.0 (_4);
  return;

}


ResetSimClkoutSel (const struct Clock_Ip_SelectorConfigType * config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG D#13 => config_2(D)
  ResetSimClkoutSel_TrustedCall.isra.0 ();
  return;

}


SetSimFtmoptSel (const struct Clock_Ip_SelectorConfigType * config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  SetSimFtmoptSel_TrustedCall (config_2(D));
  return;

}


SetSimFtmoptSel_TrustedCall (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 instance;
  uint32 selectorValue;
  uint32 regValue;
  <unnamed type> _1;
  unsigned char _2;
  <unnamed type> _3;
  unsigned char _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = config_18(D)->value;
  _2 = selectorEntry_hardwareValue[_1];
  selectorValue_19 = (uint32) _2;
  # DEBUG selectorValue => selectorValue_19
  # DEBUG BEGIN_STMT
  _3 = config_18(D)->name;
  _4 = clockFeatures[_3][0];
  instance_20 = (uint32) _4;
  # DEBUG instance => instance_20
  # DEBUG BEGIN_STMT
  regValue_21 ={v} MEM[(struct SIM_Type *)1074036736B].FTMOPT0;
  # DEBUG regValue => regValue_21
  # DEBUG BEGIN_STMT
  if (instance_20 <= 3)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  _5 = instance_20 << 1;
  _6 = _5 + 24;
  _7 = 3 << _6;
  _8 = ~_7;
  regValue_24 = _8 & regValue_21;
  # DEBUG regValue => regValue_24
  # DEBUG BEGIN_STMT
  _9 = selectorValue_19 << _6;
  regValue_25 = _9 | regValue_24;
  # DEBUG regValue => regValue_25
  goto <bb 5>; [100.00%]

  <bb 4> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  _10 = instance_20 + 4294967292;
  _11 = _10 << 1;
  _12 = _11 + 16;
  _13 = 3 << _12;
  _14 = ~_13;
  regValue_22 = _14 & regValue_21;
  # DEBUG regValue => regValue_22
  # DEBUG BEGIN_STMT
  _15 = selectorValue_19 << _12;
  regValue_23 = _15 | regValue_22;
  # DEBUG regValue => regValue_23

  <bb 5> [local count: 1073741824]:
  # regValue_16 = PHI <regValue_25(3), regValue_23(4)>
  # DEBUG regValue => regValue_16
  # DEBUG BEGIN_STMT
  MEM[(struct SIM_Type *)1074036736B].FTMOPT0 ={v} regValue_16;
  return;

}


ResetSimFtmoptSel (const struct Clock_Ip_SelectorConfigType * config)
{
  <unnamed type> _4;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _4 = MEM[(<unnamed type> *)config_2(D)];
  # DEBUG D#12 => config_2(D)
  ResetSimFtmoptSel_TrustedCall.isra.0 (_4);
  return;

}


SetScgClkoutSel (const struct Clock_Ip_SelectorConfigType * config)
{
  <unnamed type> _4;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _4 = MEM[(<unnamed type> *)config_2(D) + 4B];
  # DEBUG D#11 => config_2(D)
  SetScgClkoutSel_TrustedCall.isra.0 (_4);
  return;

}


ResetScgClkoutSel (const struct Clock_Ip_SelectorConfigType * config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG D#10 => config_2(D)
  ResetScgClkoutSel_TrustedCall.isra.0 ();
  return;

}


SetSimLpoSel (const struct Clock_Ip_SelectorConfigType * config)
{
  <unnamed type> _4;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _4 = MEM[(<unnamed type> *)config_2(D) + 4B];
  # DEBUG D#9 => config_2(D)
  SetSimLpoSel_TrustedCall.isra.0 (_4);
  return;

}


ResetSimLpoSel (const struct Clock_Ip_SelectorConfigType * config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG D#8 => config_2(D)
  ResetSimLpoSel_TrustedCall.isra.0 ();
  return;

}


SetSimRtcSel (const struct Clock_Ip_SelectorConfigType * config)
{
  <unnamed type> _4;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _4 = MEM[(<unnamed type> *)config_2(D) + 4B];
  # DEBUG D#7 => config_2(D)
  SetSimRtcSel_TrustedCall.isra.0 (_4);
  return;

}


ResetSimRtcSel (const struct Clock_Ip_SelectorConfigType * config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG D#6 => config_2(D)
  ResetSimRtcSel_TrustedCall.isra.0 ();
  return;

}


SetScgHsrunSel (const struct Clock_Ip_SelectorConfigType * config)
{
  <unnamed type> _4;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _4 = MEM[(<unnamed type> *)config_2(D) + 4B];
  # DEBUG D#5 => config_2(D)
  SetScgHsrunSel_TrustedCall.isra.0 (_4);
  return;

}


ResetScgHsrunSel (const struct Clock_Ip_SelectorConfigType * config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG D#4 => config_2(D)
  ResetScgHsrunSel_TrustedCall.isra.0 ();
  return;

}


SetScgVlprSel (const struct Clock_Ip_SelectorConfigType * config)
{
  <unnamed type> _4;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _4 = MEM[(<unnamed type> *)config_2(D) + 4B];
  # DEBUG D#3 => config_2(D)
  SetScgVlprSel_TrustedCall.isra.0 (_4);
  return;

}


SetScgRunSel (const struct Clock_Ip_SelectorConfigType * config)
{
  <unnamed type> _4;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _4 = MEM[(<unnamed type> *)config_2(D) + 4B];
  # DEBUG D#2 => config_2(D)
  SetScgRunSel_TrustedCall.isra.0 (_4);
  return;

}


ResetScgRunSel (const struct Clock_Ip_SelectorConfigType * config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG D#1 => config_2(D)
  ResetScgRunSel_TrustedCall.isra.0 ();
  return;

}


Callback_SelectorEmpty (const struct Clock_Ip_SelectorConfigType * config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  return;

}


