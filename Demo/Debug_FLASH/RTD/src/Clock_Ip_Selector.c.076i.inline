IPA function summary for SetSimTraceSel_TrustedCall.isra.0/60 inlinable
  global time:     9.000000
  self size:       10
  global size:     10
  min size:       0
  self stack:      0
  global stack:    0
    size:7.000000, time:7.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  array index:(op0 changed)
  calls:

IPA function summary for ResetSimTraceSel_TrustedCall.isra.0/59 inlinable
  global time:     9.000000
  self size:       10
  global size:     10
  min size:       0
  self stack:      0
  global stack:    0
    size:7.000000, time:7.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for ResetPccPcsSelect_TrustedCall.isra.0/58 inlinable
  global time:     6.000000
  self size:       7
  global size:     7
  min size:       0
  self stack:      0
  global stack:    0
    size:4.000000, time:4.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  array index:(op0 changed)
  calls:

IPA function summary for SetSimClkoutSel_TrustedCall.isra.0/57 inlinable
  global time:     8.000000
  self size:       9
  global size:     9
  min size:       0
  self stack:      0
  global stack:    0
    size:6.000000, time:6.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  array index:(op0 changed)
  calls:

IPA function summary for ResetSimClkoutSel_TrustedCall.isra.0/56 inlinable
  global time:     5.000000
  self size:       6
  global size:     6
  min size:       0
  self stack:      0
  global stack:    0
    size:3.000000, time:3.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for ResetSimFtmoptSel_TrustedCall.isra.0/55 inlinable
  global time:     15.500000
  self size:       24
  global size:     24
  min size:       0
  self stack:      0
  global stack:    0
    size:21.000000, time:13.500000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  array index:(op0 changed)
  calls:

IPA function summary for SetScgClkoutSel_TrustedCall.isra.0/54 inlinable
  global time:     8.000000
  self size:       9
  global size:     9
  min size:       0
  self stack:      0
  global stack:    0
    size:6.000000, time:6.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  array index:(op0 changed)
  calls:

IPA function summary for ResetScgClkoutSel_TrustedCall.isra.0/53 inlinable
  global time:     8.000000
  self size:       9
  global size:     9
  min size:       0
  self stack:      0
  global stack:    0
    size:6.000000, time:6.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for SetSimLpoSel_TrustedCall.isra.0/52 inlinable
  global time:     8.000000
  self size:       9
  global size:     9
  min size:       0
  self stack:      0
  global stack:    0
    size:6.000000, time:6.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  array index:(op0 changed)
  calls:

IPA function summary for ResetSimLpoSel_TrustedCall.isra.0/51 inlinable
  global time:     8.000000
  self size:       9
  global size:     9
  min size:       0
  self stack:      0
  global stack:    0
    size:6.000000, time:6.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for SetSimRtcSel_TrustedCall.isra.0/50 inlinable
  global time:     8.000000
  self size:       9
  global size:     9
  min size:       0
  self stack:      0
  global stack:    0
    size:6.000000, time:6.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  array index:(op0 changed)
  calls:

IPA function summary for ResetSimRtcSel_TrustedCall.isra.0/49 inlinable
  global time:     8.000000
  self size:       9
  global size:     9
  min size:       0
  self stack:      0
  global stack:    0
    size:6.000000, time:6.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for SetScgHsrunSel_TrustedCall.isra.0/48 inlinable
  global time:     9.000000
  self size:       10
  global size:     10
  min size:       0
  self stack:      0
  global stack:    0
    size:7.000000, time:7.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  array index:(op0 changed)
  calls:

IPA function summary for ResetScgHsrunSel_TrustedCall.isra.0/47 inlinable
  global time:     9.000000
  self size:       10
  global size:     10
  min size:       0
  self stack:      0
  global stack:    0
    size:7.000000, time:7.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for SetScgVlprSel_TrustedCall.isra.0/46 inlinable
  global time:     9.000000
  self size:       10
  global size:     10
  min size:       0
  self stack:      0
  global stack:    0
    size:7.000000, time:7.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  array index:(op0 changed)
  calls:

IPA function summary for SetScgRunSel_TrustedCall.isra.0/45 inlinable
  global time:     9.000000
  self size:       10
  global size:     10
  min size:       0
  self stack:      0
  global stack:    0
    size:7.000000, time:7.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  array index:(op0 changed)
  calls:

IPA function summary for ResetScgRunSel_TrustedCall.isra.0/44 inlinable
  global time:     9.000000
  self size:       10
  global size:     10
  min size:       0
  self stack:      0
  global stack:    0
    size:7.000000, time:7.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for SetSimTraceSel/39 inlinable
  global time:     14.000000
  self size:       6
  global size:     6
  min size:       4
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetSimTraceSel_TrustedCall.isra.0/60 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 5 stack: 0

IPA function summary for ResetSimTraceSel/37 inlinable
  global time:     12.000000
  self size:       4
  global size:     4
  min size:       2
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    ResetSimTraceSel_TrustedCall.isra.0/59 function not considered for inlining
      loop depth: 0 freq:1.00 size: 1 time: 10callee size: 5 stack: 0

IPA function summary for SetPccPcsSelect/35 inlinable
  global time:     13.000000
  self size:       5
  global size:     5
  min size:       4
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    SetPccPcsSelect_TrustedCall/34 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 6 stack: 0

IPA function summary for SetPccPcsSelect_TrustedCall/34 inlinable
  global time:     12.000000
  self size:       13
  global size:     13
  min size:       0
  self stack:      0
  global stack:    0
    size:8.000000, time:8.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 0] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 0] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 32] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 32] changed)
  array index:(op0[ref offset: 32] changed) && (op0[ref offset: 0] changed)
  calls:

IPA function summary for ResetPccPcsSelect/33 inlinable
  global time:     14.000000
  self size:       6
  global size:     6
  min size:       4
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 0] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 0] changed)
  calls:
    ResetPccPcsSelect_TrustedCall.isra.0/58 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 3 stack: 0

IPA function summary for SetSimClkoutSel/31 inlinable
  global time:     14.000000
  self size:       6
  global size:     6
  min size:       4
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetSimClkoutSel_TrustedCall.isra.0/57 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 4 stack: 0

IPA function summary for ResetSimClkoutSel/29 inlinable
  global time:     12.000000
  self size:       4
  global size:     4
  min size:       2
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    ResetSimClkoutSel_TrustedCall.isra.0/56 function not considered for inlining
      loop depth: 0 freq:1.00 size: 1 time: 10callee size: 3 stack: 0

IPA function summary for SetSimFtmoptSel/27 inlinable
  global time:     13.000000
  self size:       5
  global size:     5
  min size:       4
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    SetSimFtmoptSel_TrustedCall/26 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size:13 stack: 0

IPA function summary for SetSimFtmoptSel_TrustedCall/26 inlinable
  global time:     17.500000
  self size:       26
  global size:     26
  min size:       0
  self stack:      0
  global stack:    0
    size:21.000000, time:13.500000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 32] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 32] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 0] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 0] changed)
  array index:(op0[ref offset: 0] changed) && (op0[ref offset: 32] changed)
  calls:

IPA function summary for ResetSimFtmoptSel/25 inlinable
  global time:     14.000000
  self size:       6
  global size:     6
  min size:       4
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 0] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 0] changed)
  calls:
    ResetSimFtmoptSel_TrustedCall.isra.0/55 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size:12 stack: 0

IPA function summary for SetScgClkoutSel/23 inlinable
  global time:     14.000000
  self size:       6
  global size:     6
  min size:       4
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetScgClkoutSel_TrustedCall.isra.0/54 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 4 stack: 0

IPA function summary for ResetScgClkoutSel/21 inlinable
  global time:     12.000000
  self size:       4
  global size:     4
  min size:       2
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    ResetScgClkoutSel_TrustedCall.isra.0/53 function not considered for inlining
      loop depth: 0 freq:1.00 size: 1 time: 10callee size: 4 stack: 0

IPA function summary for SetSimLpoSel/19 inlinable
  global time:     14.000000
  self size:       6
  global size:     6
  min size:       4
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetSimLpoSel_TrustedCall.isra.0/52 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 4 stack: 0

IPA function summary for ResetSimLpoSel/17 inlinable
  global time:     12.000000
  self size:       4
  global size:     4
  min size:       2
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    ResetSimLpoSel_TrustedCall.isra.0/51 function not considered for inlining
      loop depth: 0 freq:1.00 size: 1 time: 10callee size: 4 stack: 0

IPA function summary for SetSimRtcSel/15 inlinable
  global time:     14.000000
  self size:       6
  global size:     6
  min size:       4
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetSimRtcSel_TrustedCall.isra.0/50 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 4 stack: 0

IPA function summary for ResetSimRtcSel/13 inlinable
  global time:     12.000000
  self size:       4
  global size:     4
  min size:       2
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    ResetSimRtcSel_TrustedCall.isra.0/49 function not considered for inlining
      loop depth: 0 freq:1.00 size: 1 time: 10callee size: 4 stack: 0

IPA function summary for SetScgHsrunSel/11 inlinable
  global time:     14.000000
  self size:       6
  global size:     6
  min size:       4
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetScgHsrunSel_TrustedCall.isra.0/48 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 5 stack: 0

IPA function summary for ResetScgHsrunSel/9 inlinable
  global time:     12.000000
  self size:       4
  global size:     4
  min size:       2
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    ResetScgHsrunSel_TrustedCall.isra.0/47 function not considered for inlining
      loop depth: 0 freq:1.00 size: 1 time: 10callee size: 5 stack: 0

IPA function summary for SetScgVlprSel/7 inlinable
  global time:     14.000000
  self size:       6
  global size:     6
  min size:       4
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetScgVlprSel_TrustedCall.isra.0/46 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 5 stack: 0

IPA function summary for SetScgRunSel/5 inlinable
  global time:     14.000000
  self size:       6
  global size:     6
  min size:       4
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetScgRunSel_TrustedCall.isra.0/45 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 5 stack: 0

IPA function summary for ResetScgRunSel/3 inlinable
  global time:     12.000000
  self size:       4
  global size:     4
  min size:       2
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    ResetScgRunSel_TrustedCall.isra.0/44 function not considered for inlining
      loop depth: 0 freq:1.00 size: 1 time: 10callee size: 5 stack: 0

IPA function summary for Callback_SelectorEmpty/1 inlinable
  global time:     2.000000
  self size:       3
  global size:     3
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:


Flattening functions:
Overall time estimate: 427.000000 weighted by profile: 0.000000

Deciding on inlining of small functions.  Starting with size 0.
Enqueueing calls in SetSimTraceSel_TrustedCall.isra.0/60.
Enqueueing calls in ResetSimTraceSel_TrustedCall.isra.0/59.
Enqueueing calls in ResetPccPcsSelect_TrustedCall.isra.0/58.
Enqueueing calls in SetSimClkoutSel_TrustedCall.isra.0/57.
Enqueueing calls in ResetSimClkoutSel_TrustedCall.isra.0/56.
Enqueueing calls in ResetSimFtmoptSel_TrustedCall.isra.0/55.
Enqueueing calls in SetScgClkoutSel_TrustedCall.isra.0/54.
Enqueueing calls in ResetScgClkoutSel_TrustedCall.isra.0/53.
Enqueueing calls in SetSimLpoSel_TrustedCall.isra.0/52.
Enqueueing calls in ResetSimLpoSel_TrustedCall.isra.0/51.
Enqueueing calls in SetSimRtcSel_TrustedCall.isra.0/50.
Enqueueing calls in ResetSimRtcSel_TrustedCall.isra.0/49.
Enqueueing calls in SetScgHsrunSel_TrustedCall.isra.0/48.
Enqueueing calls in ResetScgHsrunSel_TrustedCall.isra.0/47.
Enqueueing calls in SetScgVlprSel_TrustedCall.isra.0/46.
Enqueueing calls in SetScgRunSel_TrustedCall.isra.0/45.
Enqueueing calls in ResetScgRunSel_TrustedCall.isra.0/44.
Enqueueing calls in SetSimTraceSel/39.
Enqueueing calls in ResetSimTraceSel/37.
Enqueueing calls in SetPccPcsSelect/35.
Enqueueing calls in SetPccPcsSelect_TrustedCall/34.
Enqueueing calls in ResetPccPcsSelect/33.
Enqueueing calls in SetSimClkoutSel/31.
Enqueueing calls in ResetSimClkoutSel/29.
Enqueueing calls in SetSimFtmoptSel/27.
Enqueueing calls in SetSimFtmoptSel_TrustedCall/26.
Enqueueing calls in ResetSimFtmoptSel/25.
Enqueueing calls in SetScgClkoutSel/23.
Enqueueing calls in ResetScgClkoutSel/21.
Enqueueing calls in SetSimLpoSel/19.
Enqueueing calls in ResetSimLpoSel/17.
Enqueueing calls in SetSimRtcSel/15.
Enqueueing calls in ResetSimRtcSel/13.
Enqueueing calls in SetScgHsrunSel/11.
Enqueueing calls in ResetScgHsrunSel/9.
Enqueueing calls in SetScgVlprSel/7.
Enqueueing calls in SetScgRunSel/5.
Enqueueing calls in ResetScgRunSel/3.
Enqueueing calls in Callback_SelectorEmpty/1.

Considering ResetSimClkoutSel_TrustedCall.isra.0/56 with 6 size
 to be inlined into ResetSimClkoutSel/29 in ../RTD/src/Clock_Ip_Selector.c:945
 Estimated badness is -4.000000, frequency 1.00.

Considering ResetPccPcsSelect_TrustedCall.isra.0/58 with 7 size
 to be inlined into ResetPccPcsSelect/33 in ../RTD/src/Clock_Ip_Selector.c:990
 Estimated badness is -3.250000, frequency 1.00.

Considering SetSimClkoutSel_TrustedCall.isra.0/57 with 9 size
 to be inlined into SetSimClkoutSel/31 in ../RTD/src/Clock_Ip_Selector.c:965
 Estimated badness is -1.300000, frequency 1.00.

Considering SetSimRtcSel_TrustedCall.isra.0/50 with 9 size
 to be inlined into SetSimRtcSel/15 in ../RTD/src/Clock_Ip_Selector.c:760
 Estimated badness is -1.300000, frequency 1.00.

Considering SetSimLpoSel_TrustedCall.isra.0/52 with 9 size
 to be inlined into SetSimLpoSel/19 in ../RTD/src/Clock_Ip_Selector.c:808
 Estimated badness is -1.300000, frequency 1.00.

Considering SetScgClkoutSel_TrustedCall.isra.0/54 with 9 size
 to be inlined into SetScgClkoutSel/23 in ../RTD/src/Clock_Ip_Selector.c:854
 Estimated badness is -1.300000, frequency 1.00.

Considering ResetScgClkoutSel_TrustedCall.isra.0/53 with 9 size
 to be inlined into ResetScgClkoutSel/21 in ../RTD/src/Clock_Ip_Selector.c:834
 Estimated badness is -1.066667, frequency 1.00.

Considering ResetSimRtcSel_TrustedCall.isra.0/49 with 9 size
 to be inlined into ResetSimRtcSel/13 in ../RTD/src/Clock_Ip_Selector.c:740
 Estimated badness is -1.066667, frequency 1.00.

Considering ResetSimLpoSel_TrustedCall.isra.0/51 with 9 size
 to be inlined into ResetSimLpoSel/17 in ../RTD/src/Clock_Ip_Selector.c:785
 Estimated badness is -1.066667, frequency 1.00.

Considering SetSimTraceSel_TrustedCall.isra.0/60 with 10 size
 to be inlined into SetSimTraceSel/39 in ../RTD/src/Clock_Ip_Selector.c:1057
 Estimated badness is -0.945455, frequency 1.00.

Considering SetScgRunSel_TrustedCall.isra.0/45 with 10 size
 to be inlined into SetScgRunSel/5 in ../RTD/src/Clock_Ip_Selector.c:642
 Estimated badness is -0.945455, frequency 1.00.

Considering SetScgVlprSel_TrustedCall.isra.0/46 with 10 size
 to be inlined into SetScgVlprSel/7 in ../RTD/src/Clock_Ip_Selector.c:668
 Estimated badness is -0.945455, frequency 1.00.

Considering SetScgHsrunSel_TrustedCall.isra.0/48 with 10 size
 to be inlined into SetScgHsrunSel/11 in ../RTD/src/Clock_Ip_Selector.c:714
 Estimated badness is -0.945455, frequency 1.00.

Considering ResetScgRunSel_TrustedCall.isra.0/44 with 10 size
 to be inlined into ResetScgRunSel/3 in ../RTD/src/Clock_Ip_Selector.c:621
 Estimated badness is -0.800000, frequency 1.00.

Considering ResetScgHsrunSel_TrustedCall.isra.0/47 with 10 size
 to be inlined into ResetScgHsrunSel/9 in ../RTD/src/Clock_Ip_Selector.c:694
 Estimated badness is -0.800000, frequency 1.00.

Considering ResetSimTraceSel_TrustedCall.isra.0/59 with 10 size
 to be inlined into ResetSimTraceSel/37 in ../RTD/src/Clock_Ip_Selector.c:1036
 Estimated badness is -0.800000, frequency 1.00.

Considering SetPccPcsSelect_TrustedCall/34 with 13 size
 to be inlined into SetPccPcsSelect/35 in ../RTD/src/Clock_Ip_Selector.c:1011
 Estimated badness is -0.666667, frequency 1.00.

Considering SetSimFtmoptSel_TrustedCall/26 with 26 size
 to be inlined into SetSimFtmoptSel/27 in ../RTD/src/Clock_Ip_Selector.c:921
 Estimated badness is -0.112000, frequency 1.00.

Considering ResetSimFtmoptSel_TrustedCall.isra.0/55 with 24 size
 to be inlined into ResetSimFtmoptSel/25 in ../RTD/src/Clock_Ip_Selector.c:891
 Estimated badness is -0.109474, frequency 1.00.

Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:

Deciding on functions to be inlined into all callers and removing useless speculations:
Overall time estimate: 185.000000 weighted by profile: 0.000000

Why inlining failed?
IPA function summary for SetSimTraceSel/39 inlinable
  global time:     10.000000
  self size:       6
  global size:     11
  min size:       4
  self stack:      0
  global stack:    0
    size:7.500000, time:7.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetSimTraceSel_TrustedCall.isra.0/60 inlined
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 5 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for ResetSimTraceSel/37 inlinable
  global time:     9.000000
  self size:       4
  global size:     10
  min size:       2
  self stack:      0
  global stack:    0
    size:7.000000, time:7.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    ResetSimTraceSel_TrustedCall.isra.0/59 inlined
      loop depth: 0 freq:1.00 size: 1 time: 10callee size: 5 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for SetPccPcsSelect/35 inlinable
  global time:     11.000000
  self size:       5
  global size:     12
  min size:       4
  self stack:      0
  global stack:    0
    size:8.000000, time:8.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 0] changed)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 32] changed)
  calls:
    SetPccPcsSelect_TrustedCall/34 inlined
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 6 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for ResetPccPcsSelect/33 inlinable
  global time:     7.000000
  self size:       6
  global size:     8
  min size:       4
  self stack:      0
  global stack:    0
    size:4.000000, time:4.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 0] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 0] changed)
  calls:
    ResetPccPcsSelect_TrustedCall.isra.0/58 inlined
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 3 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for SetSimClkoutSel/31 inlinable
  global time:     9.000000
  self size:       6
  global size:     10
  min size:       4
  self stack:      0
  global stack:    0
    size:6.500000, time:6.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetSimClkoutSel_TrustedCall.isra.0/57 inlined
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 4 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for ResetSimClkoutSel/29 inlinable
  global time:     5.000000
  self size:       4
  global size:     6
  min size:       2
  self stack:      0
  global stack:    0
    size:3.000000, time:3.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    ResetSimClkoutSel_TrustedCall.isra.0/56 inlined
      loop depth: 0 freq:1.00 size: 1 time: 10callee size: 3 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for SetSimFtmoptSel/27 inlinable
  global time:     16.500000
  self size:       5
  global size:     25
  min size:       4
  self stack:      0
  global stack:    0
    size:21.000000, time:13.500000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 32] changed)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 0] changed)
  calls:
    SetSimFtmoptSel_TrustedCall/26 inlined
      loop depth: 0 freq:1.00 size: 2 time: 11callee size:13 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for ResetSimFtmoptSel/25 inlinable
  global time:     16.500000
  self size:       6
  global size:     25
  min size:       4
  self stack:      0
  global stack:    0
    size:21.000000, time:13.500000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 0] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 0] changed)
  calls:
    ResetSimFtmoptSel_TrustedCall.isra.0/55 inlined
      loop depth: 0 freq:1.00 size: 2 time: 11callee size:12 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for SetScgClkoutSel/23 inlinable
  global time:     9.000000
  self size:       6
  global size:     10
  min size:       4
  self stack:      0
  global stack:    0
    size:6.500000, time:6.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetScgClkoutSel_TrustedCall.isra.0/54 inlined
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 4 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for ResetScgClkoutSel/21 inlinable
  global time:     8.000000
  self size:       4
  global size:     9
  min size:       2
  self stack:      0
  global stack:    0
    size:6.000000, time:6.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    ResetScgClkoutSel_TrustedCall.isra.0/53 inlined
      loop depth: 0 freq:1.00 size: 1 time: 10callee size: 4 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for SetSimLpoSel/19 inlinable
  global time:     9.000000
  self size:       6
  global size:     10
  min size:       4
  self stack:      0
  global stack:    0
    size:6.500000, time:6.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetSimLpoSel_TrustedCall.isra.0/52 inlined
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 4 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for ResetSimLpoSel/17 inlinable
  global time:     8.000000
  self size:       4
  global size:     9
  min size:       2
  self stack:      0
  global stack:    0
    size:6.000000, time:6.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    ResetSimLpoSel_TrustedCall.isra.0/51 inlined
      loop depth: 0 freq:1.00 size: 1 time: 10callee size: 4 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for SetSimRtcSel/15 inlinable
  global time:     9.000000
  self size:       6
  global size:     10
  min size:       4
  self stack:      0
  global stack:    0
    size:6.500000, time:6.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetSimRtcSel_TrustedCall.isra.0/50 inlined
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 4 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for ResetSimRtcSel/13 inlinable
  global time:     8.000000
  self size:       4
  global size:     9
  min size:       2
  self stack:      0
  global stack:    0
    size:6.000000, time:6.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    ResetSimRtcSel_TrustedCall.isra.0/49 inlined
      loop depth: 0 freq:1.00 size: 1 time: 10callee size: 4 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for SetScgHsrunSel/11 inlinable
  global time:     10.000000
  self size:       6
  global size:     11
  min size:       4
  self stack:      0
  global stack:    0
    size:7.500000, time:7.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetScgHsrunSel_TrustedCall.isra.0/48 inlined
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 5 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for ResetScgHsrunSel/9 inlinable
  global time:     9.000000
  self size:       4
  global size:     10
  min size:       2
  self stack:      0
  global stack:    0
    size:7.000000, time:7.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    ResetScgHsrunSel_TrustedCall.isra.0/47 inlined
      loop depth: 0 freq:1.00 size: 1 time: 10callee size: 5 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for SetScgVlprSel/7 inlinable
  global time:     10.000000
  self size:       6
  global size:     11
  min size:       4
  self stack:      0
  global stack:    0
    size:7.500000, time:7.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetScgVlprSel_TrustedCall.isra.0/46 inlined
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 5 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for SetScgRunSel/5 inlinable
  global time:     10.000000
  self size:       6
  global size:     11
  min size:       4
  self stack:      0
  global stack:    0
    size:7.500000, time:7.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetScgRunSel_TrustedCall.isra.0/45 inlined
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 5 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for ResetScgRunSel/3 inlinable
  global time:     9.000000
  self size:       4
  global size:     10
  min size:       2
  self stack:      0
  global stack:    0
    size:7.000000, time:7.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    ResetScgRunSel_TrustedCall.isra.0/44 inlined
      loop depth: 0 freq:1.00 size: 1 time: 10callee size: 5 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for Callback_SelectorEmpty/1 inlinable
  global time:     2.000000
  self size:       3
  global size:     3
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

Symbol table:

SetSimTraceSel_TrustedCall.isra.0/60 (SetSimTraceSel_TrustedCall.isra.0) @0789fb60
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: selectorEntryPCS_hardwareValue/40 (read)
  Referring: 
  Function SetSimTraceSel_TrustedCall.isra.0/60 is inline copy in SetSimTraceSel/39
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: SetSimTraceSel/39 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
ResetSimTraceSel_TrustedCall.isra.0/59 (ResetSimTraceSel_TrustedCall.isra.0) @0789f700
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: selectorEntryPCS_hardwareValue/40 (read)
  Referring: 
  Function ResetSimTraceSel_TrustedCall.isra.0/59 is inline copy in ResetSimTraceSel/37
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: ResetSimTraceSel/37 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
ResetPccPcsSelect_TrustedCall.isra.0/58 (ResetPccPcsSelect_TrustedCall.isra.0) @078941c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: clockFeatures/41 (read)
  Referring: 
  Function ResetPccPcsSelect_TrustedCall.isra.0/58 is inline copy in ResetPccPcsSelect/33
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: ResetPccPcsSelect/33 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
SetSimClkoutSel_TrustedCall.isra.0/57 (SetSimClkoutSel_TrustedCall.isra.0) @07894a80
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: selectorEntry_hardwareValue/42 (read)
  Referring: 
  Function SetSimClkoutSel_TrustedCall.isra.0/57 is inline copy in SetSimClkoutSel/31
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: SetSimClkoutSel/31 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
ResetSimClkoutSel_TrustedCall.isra.0/56 (ResetSimClkoutSel_TrustedCall.isra.0) @07894620
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Function ResetSimClkoutSel_TrustedCall.isra.0/56 is inline copy in ResetSimClkoutSel/29
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: ResetSimClkoutSel/29 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
ResetSimFtmoptSel_TrustedCall.isra.0/55 (ResetSimFtmoptSel_TrustedCall.isra.0) @07885ee0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: selectorEntry_hardwareValue/42 (read)clockFeatures/41 (read)
  Referring: 
  Function ResetSimFtmoptSel_TrustedCall.isra.0/55 is inline copy in ResetSimFtmoptSel/25
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: ResetSimFtmoptSel/25 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
SetScgClkoutSel_TrustedCall.isra.0/54 (SetScgClkoutSel_TrustedCall.isra.0) @078858c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: selectorEntrySCS_hardwareValue/43 (read)
  Referring: 
  Function SetScgClkoutSel_TrustedCall.isra.0/54 is inline copy in SetScgClkoutSel/23
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: SetScgClkoutSel/23 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
ResetScgClkoutSel_TrustedCall.isra.0/53 (ResetScgClkoutSel_TrustedCall.isra.0) @07885380
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: selectorEntrySCS_hardwareValue/43 (read)
  Referring: 
  Function ResetScgClkoutSel_TrustedCall.isra.0/53 is inline copy in ResetScgClkoutSel/21
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: ResetScgClkoutSel/21 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
SetSimLpoSel_TrustedCall.isra.0/52 (SetSimLpoSel_TrustedCall.isra.0) @0787bee0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: selectorEntryPCS_hardwareValue/40 (read)
  Referring: 
  Function SetSimLpoSel_TrustedCall.isra.0/52 is inline copy in SetSimLpoSel/19
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: SetSimLpoSel/19 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
ResetSimLpoSel_TrustedCall.isra.0/51 (ResetSimLpoSel_TrustedCall.isra.0) @0787ba80
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: selectorEntryPCS_hardwareValue/40 (read)
  Referring: 
  Function ResetSimLpoSel_TrustedCall.isra.0/51 is inline copy in ResetSimLpoSel/17
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: ResetSimLpoSel/17 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
SetSimRtcSel_TrustedCall.isra.0/50 (SetSimRtcSel_TrustedCall.isra.0) @0787b540
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: selectorEntry_hardwareValue/42 (read)
  Referring: 
  Function SetSimRtcSel_TrustedCall.isra.0/50 is inline copy in SetSimRtcSel/15
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: SetSimRtcSel/15 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
ResetSimRtcSel_TrustedCall.isra.0/49 (ResetSimRtcSel_TrustedCall.isra.0) @0787b0e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: selectorEntry_hardwareValue/42 (read)
  Referring: 
  Function ResetSimRtcSel_TrustedCall.isra.0/49 is inline copy in ResetSimRtcSel/13
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: ResetSimRtcSel/13 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
SetScgHsrunSel_TrustedCall.isra.0/48 (SetScgHsrunSel_TrustedCall.isra.0) @077dfe00
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: selectorEntrySCS_hardwareValue/43 (read)
  Referring: 
  Function SetScgHsrunSel_TrustedCall.isra.0/48 is inline copy in SetScgHsrunSel/11
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: SetScgHsrunSel/11 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
ResetScgHsrunSel_TrustedCall.isra.0/47 (ResetScgHsrunSel_TrustedCall.isra.0) @077df9a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: selectorEntrySCS_hardwareValue/43 (read)
  Referring: 
  Function ResetScgHsrunSel_TrustedCall.isra.0/47 is inline copy in ResetScgHsrunSel/9
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: ResetScgHsrunSel/9 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
SetScgVlprSel_TrustedCall.isra.0/46 (SetScgVlprSel_TrustedCall.isra.0) @077df460
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: selectorEntrySCS_hardwareValue/43 (read)
  Referring: 
  Function SetScgVlprSel_TrustedCall.isra.0/46 is inline copy in SetScgVlprSel/7
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: SetScgVlprSel/7 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
SetScgRunSel_TrustedCall.isra.0/45 (SetScgRunSel_TrustedCall.isra.0) @077a7ee0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: selectorEntrySCS_hardwareValue/43 (read)
  Referring: 
  Function SetScgRunSel_TrustedCall.isra.0/45 is inline copy in SetScgRunSel/5
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: SetScgRunSel/5 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
ResetScgRunSel_TrustedCall.isra.0/44 (ResetScgRunSel_TrustedCall.isra.0) @077a7a80
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: selectorEntrySCS_hardwareValue/43 (read)
  Referring: 
  Function ResetScgRunSel_TrustedCall.isra.0/44 is inline copy in ResetScgRunSel/3
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: ResetScgRunSel/3 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
selectorEntrySCS_hardwareValue/43 (selectorEntrySCS_hardwareValue) @07782d80
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: SetScgHsrunSel_TrustedCall.isra.0/48 (read)ResetScgHsrunSel_TrustedCall.isra.0/47 (read)SetScgVlprSel_TrustedCall.isra.0/46 (read)SetScgRunSel_TrustedCall.isra.0/45 (read)ResetScgRunSel_TrustedCall.isra.0/44 (read)ResetScgClkoutSel_TrustedCall.isra.0/53 (read)SetScgClkoutSel_TrustedCall.isra.0/54 (read)
  Availability: not_available
  Varpool flags: read-only
selectorEntry_hardwareValue/42 (selectorEntry_hardwareValue) @077823a8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: ResetSimFtmoptSel_TrustedCall.isra.0/55 (read)SetSimRtcSel_TrustedCall.isra.0/50 (read)ResetSimRtcSel_TrustedCall.isra.0/49 (read)SetSimFtmoptSel_TrustedCall/26 (read)SetSimClkoutSel_TrustedCall.isra.0/57 (read)
  Availability: not_available
  Varpool flags: read-only
clockFeatures/41 (clockFeatures) @06c0ff30
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: SetSimFtmoptSel_TrustedCall/26 (read)ResetSimFtmoptSel_TrustedCall.isra.0/55 (read)ResetPccPcsSelect_TrustedCall.isra.0/58 (read)SetPccPcsSelect_TrustedCall/34 (read)
  Availability: not_available
  Varpool flags: read-only
selectorEntryPCS_hardwareValue/40 (selectorEntryPCS_hardwareValue) @06c0faf8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: SetPccPcsSelect_TrustedCall/34 (read)SetSimLpoSel_TrustedCall.isra.0/52 (read)ResetSimLpoSel_TrustedCall.isra.0/51 (read)ResetSimTraceSel_TrustedCall.isra.0/59 (read)SetSimTraceSel_TrustedCall.isra.0/60 (read)
  Availability: not_available
  Varpool flags: read-only
SetSimTraceSel/39 (SetSimTraceSel) @06c19a80
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: selectorCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: SetSimTraceSel_TrustedCall.isra.0/60 (inlined) (1073741824 (estimated locally),1.00 per call) 
ResetSimTraceSel/37 (ResetSimTraceSel) @06c19460
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: selectorCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: ResetSimTraceSel_TrustedCall.isra.0/59 (inlined) (1073741824 (estimated locally),1.00 per call) 
SetPccPcsSelect/35 (SetPccPcsSelect) @06c178c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: selectorCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: SetPccPcsSelect_TrustedCall/34 (inlined) (1073741824 (estimated locally),1.00 per call) 
SetPccPcsSelect_TrustedCall/34 (SetPccPcsSelect_TrustedCall) @06c17e00
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: clockFeatures/41 (read)selectorEntryPCS_hardwareValue/40 (read)
  Referring: 
  Function SetPccPcsSelect_TrustedCall/34 is inline copy in SetPccPcsSelect/35
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: SetPccPcsSelect/35 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
ResetPccPcsSelect/33 (ResetPccPcsSelect) @06c17a80
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: selectorCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: ResetPccPcsSelect_TrustedCall.isra.0/58 (inlined) (1073741824 (estimated locally),1.00 per call) 
SetSimClkoutSel/31 (SetSimClkoutSel) @06c17540
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: selectorCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: SetSimClkoutSel_TrustedCall.isra.0/57 (inlined) (1073741824 (estimated locally),1.00 per call) 
ResetSimClkoutSel/29 (ResetSimClkoutSel) @06c17000
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: selectorCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: ResetSimClkoutSel_TrustedCall.isra.0/56 (inlined) (1073741824 (estimated locally),1.00 per call) 
SetSimFtmoptSel/27 (SetSimFtmoptSel) @06c10d20
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: selectorCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: SetSimFtmoptSel_TrustedCall/26 (inlined) (1073741824 (estimated locally),1.00 per call) 
SetSimFtmoptSel_TrustedCall/26 (SetSimFtmoptSel_TrustedCall) @06c10a80
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: selectorEntry_hardwareValue/42 (read)clockFeatures/41 (read)
  Referring: 
  Function SetSimFtmoptSel_TrustedCall/26 is inline copy in SetSimFtmoptSel/27
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: SetSimFtmoptSel/27 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
ResetSimFtmoptSel/25 (ResetSimFtmoptSel) @06c10620
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: selectorCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: ResetSimFtmoptSel_TrustedCall.isra.0/55 (inlined) (1073741824 (estimated locally),1.00 per call) 
SetScgClkoutSel/23 (SetScgClkoutSel) @06c0aee0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: selectorCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: SetScgClkoutSel_TrustedCall.isra.0/54 (inlined) (1073741824 (estimated locally),1.00 per call) 
ResetScgClkoutSel/21 (ResetScgClkoutSel) @06c0a9a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: selectorCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: ResetScgClkoutSel_TrustedCall.isra.0/53 (inlined) (1073741824 (estimated locally),1.00 per call) 
SetSimLpoSel/19 (SetSimLpoSel) @06c0a460
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: selectorCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: SetSimLpoSel_TrustedCall.isra.0/52 (inlined) (1073741824 (estimated locally),1.00 per call) 
ResetSimLpoSel/17 (ResetSimLpoSel) @06c06b60
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: selectorCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: ResetSimLpoSel_TrustedCall.isra.0/51 (inlined) (1073741824 (estimated locally),1.00 per call) 
SetSimRtcSel/15 (SetSimRtcSel) @06c06d20
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: selectorCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: SetSimRtcSel_TrustedCall.isra.0/50 (inlined) (1073741824 (estimated locally),1.00 per call) 
ResetSimRtcSel/13 (ResetSimRtcSel) @06c067e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: selectorCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: ResetSimRtcSel_TrustedCall.isra.0/49 (inlined) (1073741824 (estimated locally),1.00 per call) 
SetScgHsrunSel/11 (SetScgHsrunSel) @06c062a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: selectorCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: SetScgHsrunSel_TrustedCall.isra.0/48 (inlined) (1073741824 (estimated locally),1.00 per call) 
ResetScgHsrunSel/9 (ResetScgHsrunSel) @06c03ee0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: selectorCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: ResetScgHsrunSel_TrustedCall.isra.0/47 (inlined) (1073741824 (estimated locally),1.00 per call) 
SetScgVlprSel/7 (SetScgVlprSel) @06c038c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: selectorCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: SetScgVlprSel_TrustedCall.isra.0/46 (inlined) (1073741824 (estimated locally),1.00 per call) 
SetScgRunSel/5 (SetScgRunSel) @06c032a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: selectorCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: SetScgRunSel_TrustedCall.isra.0/45 (inlined) (1073741824 (estimated locally),1.00 per call) 
ResetScgRunSel/3 (ResetScgRunSel) @06b02e00
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: selectorCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: ResetScgRunSel_TrustedCall.isra.0/44 (inlined) (1073741824 (estimated locally),1.00 per call) 
Callback_SelectorEmpty/1 (Callback_SelectorEmpty) @06b027e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: selectorCallbacks/0 (addr)selectorCallbacks/0 (addr)selectorCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
selectorCallbacks/0 (selectorCallbacks) @06b00c18
  Type: variable definition analyzed
  Visibility: externally_visible public
  References: Callback_SelectorEmpty/1 (addr)Callback_SelectorEmpty/1 (addr)ResetScgRunSel/3 (addr)SetScgRunSel/5 (addr)Callback_SelectorEmpty/1 (addr)SetScgVlprSel/7 (addr)ResetScgHsrunSel/9 (addr)SetScgHsrunSel/11 (addr)ResetSimRtcSel/13 (addr)SetSimRtcSel/15 (addr)ResetSimLpoSel/17 (addr)SetSimLpoSel/19 (addr)ResetScgClkoutSel/21 (addr)SetScgClkoutSel/23 (addr)ResetSimFtmoptSel/25 (addr)SetSimFtmoptSel/27 (addr)ResetSimClkoutSel/29 (addr)SetSimClkoutSel/31 (addr)ResetPccPcsSelect/33 (addr)SetPccPcsSelect/35 (addr)ResetSimTraceSel/37 (addr)SetSimTraceSel/39 (addr)
  Referring: 
  Availability: available
  Varpool flags: initialized read-only const-value-known

;; Function Callback_SelectorEmpty (Callback_SelectorEmpty, funcdef_no=0, decl_uid=6045, cgraph_uid=1, symbol_order=1)

Callback_SelectorEmpty (const struct Clock_Ip_SelectorConfigType * config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  return;

}



;; Function SetSimFtmoptSel (SetSimFtmoptSel, funcdef_no=26, decl_uid=6071, cgraph_uid=27, symbol_order=27)


Symbols to be put in SSA form
{ D.6278 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 8
Number of blocks to update: 7 ( 88%)


Merging blocks 2 and 4
Merging blocks 7 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }
SetSimFtmoptSel (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 regValue;
  uint32 selectorValue;
  uint32 instance;
  <unnamed type> _4;
  unsigned char _5;
  <unnamed type> _7;
  unsigned char _8;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _16;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _24;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG config => config_2(D)
  # DEBUG INLINE_ENTRY SetSimFtmoptSel_TrustedCall
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _4 = config_2(D)->value;
  _5 = selectorEntry_hardwareValue[_4];
  selectorValue_6 = (uint32) _5;
  # DEBUG selectorValue => selectorValue_6
  # DEBUG BEGIN_STMT
  _7 = config_2(D)->name;
  _8 = clockFeatures[_7][0];
  instance_9 = (uint32) _8;
  # DEBUG instance => instance_9
  # DEBUG BEGIN_STMT
  regValue_10 ={v} MEM[(struct SIM_Type *)1074036736B].FTMOPT0;
  # DEBUG regValue => regValue_10
  # DEBUG BEGIN_STMT
  if (instance_9 <= 3)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  _11 = instance_9 << 1;
  _12 = _11 + 24;
  _13 = 3 << _12;
  _14 = ~_13;
  regValue_15 = regValue_10 & _14;
  # DEBUG regValue => regValue_15
  # DEBUG BEGIN_STMT
  _16 = selectorValue_6 << _12;
  regValue_17 = regValue_15 | _16;
  # DEBUG regValue => regValue_17
  goto <bb 5>; [100.00%]

  <bb 4> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  _18 = instance_9 + 4294967292;
  _19 = _18 << 1;
  _20 = _19 + 16;
  _21 = 3 << _20;
  _22 = ~_21;
  regValue_23 = regValue_10 & _22;
  # DEBUG regValue => regValue_23
  # DEBUG BEGIN_STMT
  _24 = selectorValue_6 << _20;
  regValue_25 = regValue_23 | _24;
  # DEBUG regValue => regValue_25

  <bb 5> [local count: 1073741824]:
  # regValue_26 = PHI <regValue_17(3), regValue_25(4)>
  # DEBUG regValue => regValue_26
  # DEBUG BEGIN_STMT
  MEM[(struct SIM_Type *)1074036736B].FTMOPT0 ={v} regValue_26;
  # DEBUG config => NULL
  # DEBUG instance => NULL
  # DEBUG selectorValue => NULL
  # DEBUG regValue => NULL
  return;

}



;; Function SetPccPcsSelect (SetPccPcsSelect, funcdef_no=34, decl_uid=6079, cgraph_uid=35, symbol_order=35)


Symbols to be put in SSA form
{ D.6286 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 5
Number of blocks to update: 4 ( 80%)


Merging blocks 2 and 4
Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
SetPccPcsSelect (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 regValue;
  uint32 pccIndex;
  uint32 selectorValue;
  <unnamed type> _4;
  unsigned char _5;
  <unnamed type> _7;
  unsigned char _8;
  long unsigned int _12;
  long unsigned int _13;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG config => config_2(D)
  # DEBUG INLINE_ENTRY SetPccPcsSelect_TrustedCall
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _4 = config_2(D)->name;
  _5 = clockFeatures[_4][4];
  pccIndex_6 = (uint32) _5;
  # DEBUG pccIndex => pccIndex_6
  # DEBUG BEGIN_STMT
  _7 = config_2(D)->value;
  _8 = selectorEntryPCS_hardwareValue[_7];
  selectorValue_9 = (uint32) _8;
  # DEBUG selectorValue => selectorValue_9
  # DEBUG BEGIN_STMT
  regValue_10 ={v} MEM[(struct PCC_Type *)1074155520B].PCCn[pccIndex_6];
  # DEBUG regValue => regValue_10
  # DEBUG BEGIN_STMT
  regValue_11 = regValue_10 & 4177526783;
  # DEBUG regValue => regValue_11
  # DEBUG BEGIN_STMT
  _12 = selectorValue_9 << 24;
  _13 = _12 & 117440512;
  regValue_14 = regValue_11 | _13;
  # DEBUG regValue => regValue_14
  # DEBUG BEGIN_STMT
  MEM[(struct PCC_Type *)1074155520B].PCCn[pccIndex_6] ={v} regValue_14;
  # DEBUG config => NULL
  # DEBUG selectorValue => NULL
  # DEBUG pccIndex => NULL
  # DEBUG regValue => NULL
  return;

}



;; Function ResetScgRunSel (ResetScgRunSel, funcdef_no=2, decl_uid=6059, cgraph_uid=3, symbol_order=3)


Symbols to be put in SSA form
{ D.6254 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 6
Number of blocks to update: 5 ( 83%)


Merging blocks 2 and 4
Merging blocks 2 and 5
Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
ResetScgRunSel (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 selectorValue;
  uint32 regValue;
  unsigned char _4;
  long unsigned int _8;
  long unsigned int _9;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG D#1 => config_2(D)
  # DEBUG INLINE_ENTRY ResetScgRunSel_TrustedCall
  # DEBUG config => D#1
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _4 = selectorEntrySCS_hardwareValue[5];
  selectorValue_5 = (uint32) _4;
  # DEBUG selectorValue => selectorValue_5
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  regValue_6 ={v} MEM[(struct SCG_Type *)1074151424B].RCCR;
  # DEBUG regValue => regValue_6
  # DEBUG BEGIN_STMT
  regValue_7 = regValue_6 & 4043309055;
  # DEBUG regValue => regValue_7
  # DEBUG BEGIN_STMT
  _8 = selectorValue_5 << 24;
  _9 = _8 & 251658240;
  regValue_10 = regValue_7 | _9;
  # DEBUG regValue => regValue_10
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].RCCR ={v} regValue_10;
  # DEBUG regValue => NULL
  # DEBUG selectorValue => NULL
  return;

}



;; Function SetScgRunSel (SetScgRunSel, funcdef_no=4, decl_uid=6061, cgraph_uid=5, symbol_order=5)


Symbols to be put in SSA form
{ D.6256 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 6
Number of blocks to update: 5 ( 83%)


Merging blocks 2 and 4
Merging blocks 2 and 5
Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
SetScgRunSel (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 selectorValue;
  uint32 regValue;
  <unnamed type> _4;
  <unnamed type> _5;
  unsigned char _6;
  long unsigned int _10;
  long unsigned int _11;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _4 = MEM[(<unnamed type> *)config_2(D) + 4B];
  # DEBUG D#2 => config_2(D)
  # DEBUG INLINE_ENTRY SetScgRunSel_TrustedCall
  # DEBUG config => D#2
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = _4;
  _6 = selectorEntrySCS_hardwareValue[_5];
  selectorValue_7 = (uint32) _6;
  # DEBUG selectorValue => selectorValue_7
  # DEBUG BEGIN_STMT
  regValue_8 ={v} MEM[(struct SCG_Type *)1074151424B].RCCR;
  # DEBUG regValue => regValue_8
  # DEBUG BEGIN_STMT
  regValue_9 = regValue_8 & 4043309055;
  # DEBUG regValue => regValue_9
  # DEBUG BEGIN_STMT
  _10 = selectorValue_7 << 24;
  _11 = _10 & 251658240;
  regValue_12 = regValue_9 | _11;
  # DEBUG regValue => regValue_12
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].RCCR ={v} regValue_12;
  # DEBUG regValue => NULL
  # DEBUG selectorValue => NULL
  return;

}



;; Function SetScgVlprSel (SetScgVlprSel, funcdef_no=6, decl_uid=6063, cgraph_uid=7, symbol_order=7)


Symbols to be put in SSA form
{ D.6258 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 6
Number of blocks to update: 5 ( 83%)


Merging blocks 2 and 4
Merging blocks 2 and 5
Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
SetScgVlprSel (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 selectorValue;
  uint32 regValue;
  <unnamed type> _4;
  <unnamed type> _5;
  unsigned char _6;
  long unsigned int _10;
  long unsigned int _11;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _4 = MEM[(<unnamed type> *)config_2(D) + 4B];
  # DEBUG D#3 => config_2(D)
  # DEBUG INLINE_ENTRY SetScgVlprSel_TrustedCall
  # DEBUG config => D#3
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = _4;
  _6 = selectorEntrySCS_hardwareValue[_5];
  selectorValue_7 = (uint32) _6;
  # DEBUG selectorValue => selectorValue_7
  # DEBUG BEGIN_STMT
  regValue_8 ={v} MEM[(struct SCG_Type *)1074151424B].VCCR;
  # DEBUG regValue => regValue_8
  # DEBUG BEGIN_STMT
  regValue_9 = regValue_8 & 4043309055;
  # DEBUG regValue => regValue_9
  # DEBUG BEGIN_STMT
  _10 = selectorValue_7 << 24;
  _11 = _10 & 251658240;
  regValue_12 = regValue_9 | _11;
  # DEBUG regValue => regValue_12
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].VCCR ={v} regValue_12;
  # DEBUG regValue => NULL
  # DEBUG selectorValue => NULL
  return;

}



;; Function ResetScgHsrunSel (ResetScgHsrunSel, funcdef_no=8, decl_uid=6065, cgraph_uid=9, symbol_order=9)


Symbols to be put in SSA form
{ D.6260 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 6
Number of blocks to update: 5 ( 83%)


Merging blocks 2 and 4
Merging blocks 2 and 5
Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
ResetScgHsrunSel (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 selectorValue;
  uint32 regValue;
  unsigned char _4;
  long unsigned int _8;
  long unsigned int _9;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG D#4 => config_2(D)
  # DEBUG INLINE_ENTRY ResetScgHsrunSel_TrustedCall
  # DEBUG config => D#4
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _4 = selectorEntrySCS_hardwareValue[5];
  selectorValue_5 = (uint32) _4;
  # DEBUG selectorValue => selectorValue_5
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  regValue_6 ={v} MEM[(struct SCG_Type *)1074151424B].HCCR;
  # DEBUG regValue => regValue_6
  # DEBUG BEGIN_STMT
  regValue_7 = regValue_6 & 4043309055;
  # DEBUG regValue => regValue_7
  # DEBUG BEGIN_STMT
  _8 = selectorValue_5 << 24;
  _9 = _8 & 251658240;
  regValue_10 = regValue_7 | _9;
  # DEBUG regValue => regValue_10
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].HCCR ={v} regValue_10;
  # DEBUG regValue => NULL
  # DEBUG selectorValue => NULL
  return;

}



;; Function SetScgHsrunSel (SetScgHsrunSel, funcdef_no=10, decl_uid=6067, cgraph_uid=11, symbol_order=11)


Symbols to be put in SSA form
{ D.6262 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 6
Number of blocks to update: 5 ( 83%)


Merging blocks 2 and 4
Merging blocks 2 and 5
Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
SetScgHsrunSel (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 selectorValue;
  uint32 regValue;
  <unnamed type> _4;
  <unnamed type> _5;
  unsigned char _6;
  long unsigned int _10;
  long unsigned int _11;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _4 = MEM[(<unnamed type> *)config_2(D) + 4B];
  # DEBUG D#5 => config_2(D)
  # DEBUG INLINE_ENTRY SetScgHsrunSel_TrustedCall
  # DEBUG config => D#5
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = _4;
  _6 = selectorEntrySCS_hardwareValue[_5];
  selectorValue_7 = (uint32) _6;
  # DEBUG selectorValue => selectorValue_7
  # DEBUG BEGIN_STMT
  regValue_8 ={v} MEM[(struct SCG_Type *)1074151424B].HCCR;
  # DEBUG regValue => regValue_8
  # DEBUG BEGIN_STMT
  regValue_9 = regValue_8 & 4043309055;
  # DEBUG regValue => regValue_9
  # DEBUG BEGIN_STMT
  _10 = selectorValue_7 << 24;
  _11 = _10 & 251658240;
  regValue_12 = regValue_9 | _11;
  # DEBUG regValue => regValue_12
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].HCCR ={v} regValue_12;
  # DEBUG regValue => NULL
  # DEBUG selectorValue => NULL
  return;

}



;; Function ResetSimRtcSel (ResetSimRtcSel, funcdef_no=12, decl_uid=6047, cgraph_uid=13, symbol_order=13)


Symbols to be put in SSA form
{ D.6264 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 6
Number of blocks to update: 5 ( 83%)


Merging blocks 2 and 4
Merging blocks 2 and 5
Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
ResetSimRtcSel (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 selectorValue;
  uint32 regValue;
  unsigned char _4;
  long unsigned int _8;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG D#6 => config_2(D)
  # DEBUG INLINE_ENTRY ResetSimRtcSel_TrustedCall
  # DEBUG config => D#6
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _4 = selectorEntry_hardwareValue[14];
  selectorValue_5 = (uint32) _4;
  # DEBUG selectorValue => selectorValue_5
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  regValue_6 ={v} MEM[(struct SIM_Type *)1074036736B].LPOCLKS;
  # DEBUG regValue => regValue_6
  # DEBUG BEGIN_STMT
  regValue_7 = regValue_6 & 4294967247;
  # DEBUG regValue => regValue_7
  # DEBUG BEGIN_STMT
  _8 = selectorValue_5 << 4;
  regValue_9 = regValue_7 | _8;
  # DEBUG regValue => regValue_9
  # DEBUG BEGIN_STMT
  MEM[(struct SIM_Type *)1074036736B].LPOCLKS ={v} regValue_9;
  # DEBUG regValue => NULL
  # DEBUG selectorValue => NULL
  return;

}



;; Function SetSimRtcSel (SetSimRtcSel, funcdef_no=14, decl_uid=6049, cgraph_uid=15, symbol_order=15)


Symbols to be put in SSA form
{ D.6266 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 6
Number of blocks to update: 5 ( 83%)


Merging blocks 2 and 4
Merging blocks 2 and 5
Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
SetSimRtcSel (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 selectorValue;
  uint32 regValue;
  <unnamed type> _4;
  <unnamed type> _5;
  unsigned char _6;
  long unsigned int _10;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _4 = MEM[(<unnamed type> *)config_2(D) + 4B];
  # DEBUG D#7 => config_2(D)
  # DEBUG INLINE_ENTRY SetSimRtcSel_TrustedCall
  # DEBUG config => D#7
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = _4;
  _6 = selectorEntry_hardwareValue[_5];
  selectorValue_7 = (uint32) _6;
  # DEBUG selectorValue => selectorValue_7
  # DEBUG BEGIN_STMT
  regValue_8 ={v} MEM[(struct SIM_Type *)1074036736B].LPOCLKS;
  # DEBUG regValue => regValue_8
  # DEBUG BEGIN_STMT
  regValue_9 = regValue_8 & 4294967247;
  # DEBUG regValue => regValue_9
  # DEBUG BEGIN_STMT
  _10 = selectorValue_7 << 4;
  regValue_11 = regValue_9 | _10;
  # DEBUG regValue => regValue_11
  # DEBUG BEGIN_STMT
  MEM[(struct SIM_Type *)1074036736B].LPOCLKS ={v} regValue_11;
  # DEBUG regValue => NULL
  # DEBUG selectorValue => NULL
  return;

}



;; Function ResetSimLpoSel (ResetSimLpoSel, funcdef_no=16, decl_uid=6051, cgraph_uid=17, symbol_order=17)


Symbols to be put in SSA form
{ D.6268 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 6
Number of blocks to update: 5 ( 83%)


Merging blocks 2 and 4
Merging blocks 2 and 5
Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
ResetSimLpoSel (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 selectorValue;
  uint32 regValue;
  unsigned char _4;
  long unsigned int _8;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG D#8 => config_2(D)
  # DEBUG INLINE_ENTRY ResetSimLpoSel_TrustedCall
  # DEBUG config => D#8
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _4 = selectorEntryPCS_hardwareValue[1];
  selectorValue_5 = (uint32) _4;
  # DEBUG selectorValue => selectorValue_5
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  regValue_6 ={v} MEM[(struct SIM_Type *)1074036736B].LPOCLKS;
  # DEBUG regValue => regValue_6
  # DEBUG BEGIN_STMT
  regValue_7 = regValue_6 & 4294967283;
  # DEBUG regValue => regValue_7
  # DEBUG BEGIN_STMT
  _8 = selectorValue_5 << 2;
  regValue_9 = regValue_7 | _8;
  # DEBUG regValue => regValue_9
  # DEBUG BEGIN_STMT
  MEM[(struct SIM_Type *)1074036736B].LPOCLKS ={v} regValue_9;
  # DEBUG regValue => NULL
  # DEBUG selectorValue => NULL
  return;

}



;; Function SetSimLpoSel (SetSimLpoSel, funcdef_no=18, decl_uid=6053, cgraph_uid=19, symbol_order=19)


Symbols to be put in SSA form
{ D.6270 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 6
Number of blocks to update: 5 ( 83%)


Merging blocks 2 and 4
Merging blocks 2 and 5
Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
SetSimLpoSel (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 selectorValue;
  uint32 regValue;
  <unnamed type> _4;
  <unnamed type> _5;
  unsigned char _6;
  long unsigned int _10;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _4 = MEM[(<unnamed type> *)config_2(D) + 4B];
  # DEBUG D#9 => config_2(D)
  # DEBUG INLINE_ENTRY SetSimLpoSel_TrustedCall
  # DEBUG config => D#9
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = _4;
  _6 = selectorEntryPCS_hardwareValue[_5];
  selectorValue_7 = (uint32) _6;
  # DEBUG selectorValue => selectorValue_7
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  regValue_8 ={v} MEM[(struct SIM_Type *)1074036736B].LPOCLKS;
  # DEBUG regValue => regValue_8
  # DEBUG BEGIN_STMT
  regValue_9 = regValue_8 & 4294967283;
  # DEBUG regValue => regValue_9
  # DEBUG BEGIN_STMT
  _10 = selectorValue_7 << 2;
  regValue_11 = regValue_9 | _10;
  # DEBUG regValue => regValue_11
  # DEBUG BEGIN_STMT
  MEM[(struct SIM_Type *)1074036736B].LPOCLKS ={v} regValue_11;
  # DEBUG regValue => NULL
  # DEBUG selectorValue => NULL
  return;

}



;; Function ResetScgClkoutSel (ResetScgClkoutSel, funcdef_no=20, decl_uid=6055, cgraph_uid=21, symbol_order=21)


Symbols to be put in SSA form
{ D.6272 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 6
Number of blocks to update: 5 ( 83%)


Merging blocks 2 and 4
Merging blocks 2 and 5
Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
ResetScgClkoutSel (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 selectorValue;
  uint32 regValue;
  unsigned char _4;
  long unsigned int _8;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG D#10 => config_2(D)
  # DEBUG INLINE_ENTRY ResetScgClkoutSel_TrustedCall
  # DEBUG config => D#10
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _4 = selectorEntrySCS_hardwareValue[5];
  selectorValue_5 = (uint32) _4;
  # DEBUG selectorValue => selectorValue_5
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  regValue_6 ={v} MEM[(struct SCG_Type *)1074151424B].CLKOUTCNFG;
  # DEBUG regValue => regValue_6
  # DEBUG BEGIN_STMT
  regValue_7 = regValue_6 & 4043309055;
  # DEBUG regValue => regValue_7
  # DEBUG BEGIN_STMT
  _8 = selectorValue_5 << 24;
  regValue_9 = regValue_7 | _8;
  # DEBUG regValue => regValue_9
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].CLKOUTCNFG ={v} regValue_9;
  # DEBUG regValue => NULL
  # DEBUG selectorValue => NULL
  return;

}



;; Function SetScgClkoutSel (SetScgClkoutSel, funcdef_no=22, decl_uid=6057, cgraph_uid=23, symbol_order=23)


Symbols to be put in SSA form
{ D.6274 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 6
Number of blocks to update: 5 ( 83%)


Merging blocks 2 and 4
Merging blocks 2 and 5
Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
SetScgClkoutSel (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 selectorValue;
  uint32 regValue;
  <unnamed type> _4;
  <unnamed type> _5;
  unsigned char _6;
  long unsigned int _10;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _4 = MEM[(<unnamed type> *)config_2(D) + 4B];
  # DEBUG D#11 => config_2(D)
  # DEBUG INLINE_ENTRY SetScgClkoutSel_TrustedCall
  # DEBUG config => D#11
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = _4;
  _6 = selectorEntrySCS_hardwareValue[_5];
  selectorValue_7 = (uint32) _6;
  # DEBUG selectorValue => selectorValue_7
  # DEBUG BEGIN_STMT
  regValue_8 ={v} MEM[(struct SCG_Type *)1074151424B].CLKOUTCNFG;
  # DEBUG regValue => regValue_8
  # DEBUG BEGIN_STMT
  regValue_9 = regValue_8 & 4043309055;
  # DEBUG regValue => regValue_9
  # DEBUG BEGIN_STMT
  _10 = selectorValue_7 << 24;
  regValue_11 = regValue_9 | _10;
  # DEBUG regValue => regValue_11
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].CLKOUTCNFG ={v} regValue_11;
  # DEBUG regValue => NULL
  # DEBUG selectorValue => NULL
  return;

}



;; Function ResetSimFtmoptSel (ResetSimFtmoptSel, funcdef_no=24, decl_uid=6069, cgraph_uid=25, symbol_order=25)


Symbols to be put in SSA form
{ D.6276 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 9
Number of blocks to update: 8 ( 89%)


Merging blocks 2 and 4
Merging blocks 8 and 3
Merging blocks 2 and 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }
ResetSimFtmoptSel (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 instance;
  uint32 selectorValue;
  uint32 regValue;
  <unnamed type> _4;
  unsigned char _5;
  <unnamed type> _7;
  unsigned char _8;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _16;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _24;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _4 = MEM[(<unnamed type> *)config_2(D)];
  # DEBUG D#12 => config_2(D)
  # DEBUG INLINE_ENTRY ResetSimFtmoptSel_TrustedCall
  # DEBUG config => D#12
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = selectorEntry_hardwareValue[5];
  selectorValue_6 = (uint32) _5;
  # DEBUG selectorValue => selectorValue_6
  # DEBUG BEGIN_STMT
  _7 = _4;
  _8 = clockFeatures[_7][0];
  instance_9 = (uint32) _8;
  # DEBUG instance => instance_9
  # DEBUG BEGIN_STMT
  regValue_10 ={v} MEM[(struct SIM_Type *)1074036736B].FTMOPT0;
  # DEBUG regValue => regValue_10
  # DEBUG BEGIN_STMT
  if (instance_9 <= 3)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  _11 = instance_9 << 1;
  _12 = _11 + 24;
  _13 = 3 << _12;
  _14 = ~_13;
  regValue_15 = regValue_10 & _14;
  # DEBUG regValue => regValue_15
  # DEBUG BEGIN_STMT
  _16 = selectorValue_6 << _12;
  regValue_17 = regValue_15 | _16;
  # DEBUG regValue => regValue_17
  goto <bb 5>; [100.00%]

  <bb 4> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  _18 = instance_9 + 4294967292;
  _19 = _18 << 1;
  _20 = _19 + 16;
  _21 = 3 << _20;
  _22 = ~_21;
  regValue_23 = regValue_10 & _22;
  # DEBUG regValue => regValue_23
  # DEBUG BEGIN_STMT
  _24 = selectorValue_6 << _20;
  regValue_25 = regValue_23 | _24;
  # DEBUG regValue => regValue_25

  <bb 5> [local count: 1073741824]:
  # regValue_26 = PHI <regValue_17(3), regValue_25(4)>
  # DEBUG regValue => regValue_26
  # DEBUG BEGIN_STMT
  MEM[(struct SIM_Type *)1074036736B].FTMOPT0 ={v} regValue_26;
  # DEBUG regValue => NULL
  # DEBUG selectorValue => NULL
  # DEBUG instance => NULL
  return;

}



;; Function ResetSimClkoutSel (ResetSimClkoutSel, funcdef_no=28, decl_uid=6073, cgraph_uid=29, symbol_order=29)


Symbols to be put in SSA form
{ D.6280 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 6
Number of blocks to update: 5 ( 83%)


Merging blocks 2 and 4
Merging blocks 2 and 5
Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
ResetSimClkoutSel (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 regValue;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG D#13 => config_2(D)
  # DEBUG INLINE_ENTRY ResetSimClkoutSel_TrustedCall
  # DEBUG config => D#13
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  regValue_4 ={v} MEM[(struct SIM_Type *)1074036736B].CHIPCTL;
  # DEBUG regValue => regValue_4
  # DEBUG BEGIN_STMT
  regValue_5 = regValue_4 & 4294965007;
  # DEBUG regValue => regValue_5
  # DEBUG BEGIN_STMT
  MEM[(struct SIM_Type *)1074036736B].CHIPCTL ={v} regValue_5;
  # DEBUG regValue => NULL
  return;

}



;; Function SetSimClkoutSel (SetSimClkoutSel, funcdef_no=30, decl_uid=6075, cgraph_uid=31, symbol_order=31)


Symbols to be put in SSA form
{ D.6282 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 6
Number of blocks to update: 5 ( 83%)


Merging blocks 2 and 4
Merging blocks 2 and 5
Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
SetSimClkoutSel (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 selectorValue;
  uint32 regValue;
  <unnamed type> _4;
  <unnamed type> _5;
  unsigned char _6;
  long unsigned int _10;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _4 = MEM[(<unnamed type> *)config_2(D) + 4B];
  # DEBUG D#14 => config_2(D)
  # DEBUG INLINE_ENTRY SetSimClkoutSel_TrustedCall
  # DEBUG config => D#14
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = _4;
  _6 = selectorEntry_hardwareValue[_5];
  selectorValue_7 = (uint32) _6;
  # DEBUG selectorValue => selectorValue_7
  # DEBUG BEGIN_STMT
  regValue_8 ={v} MEM[(struct SIM_Type *)1074036736B].CHIPCTL;
  # DEBUG regValue => regValue_8
  # DEBUG BEGIN_STMT
  regValue_9 = regValue_8 & 4294967055;
  # DEBUG regValue => regValue_9
  # DEBUG BEGIN_STMT
  _10 = selectorValue_7 << 4;
  regValue_11 = regValue_9 | _10;
  # DEBUG regValue => regValue_11
  # DEBUG BEGIN_STMT
  MEM[(struct SIM_Type *)1074036736B].CHIPCTL ={v} regValue_11;
  # DEBUG regValue => NULL
  # DEBUG selectorValue => NULL
  return;

}



;; Function ResetPccPcsSelect (ResetPccPcsSelect, funcdef_no=32, decl_uid=6077, cgraph_uid=33, symbol_order=33)


Symbols to be put in SSA form
{ D.6284 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 6
Number of blocks to update: 5 ( 83%)


Merging blocks 2 and 4
Merging blocks 2 and 5
Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
ResetPccPcsSelect (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 pccIndex;
  uint32 regValue;
  <unnamed type> _4;
  <unnamed type> _5;
  unsigned char _6;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _4 = MEM[(<unnamed type> *)config_2(D)];
  # DEBUG D#15 => config_2(D)
  # DEBUG INLINE_ENTRY ResetPccPcsSelect_TrustedCall
  # DEBUG config => D#15
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = _4;
  _6 = clockFeatures[_5][4];
  pccIndex_7 = (uint32) _6;
  # DEBUG pccIndex => pccIndex_7
  # DEBUG BEGIN_STMT
  regValue_8 ={v} MEM[(struct PCC_Type *)1074155520B].PCCn[pccIndex_7];
  # DEBUG regValue => regValue_8
  # DEBUG BEGIN_STMT
  regValue_9 = regValue_8 & 3103784959;
  # DEBUG regValue => regValue_9
  # DEBUG BEGIN_STMT
  MEM[(struct PCC_Type *)1074155520B].PCCn[pccIndex_7] ={v} regValue_9;
  # DEBUG regValue => NULL
  # DEBUG pccIndex => NULL
  return;

}



;; Function ResetSimTraceSel (ResetSimTraceSel, funcdef_no=36, decl_uid=6081, cgraph_uid=37, symbol_order=37)


Symbols to be put in SSA form
{ D.6288 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 6
Number of blocks to update: 5 ( 83%)


Merging blocks 2 and 4
Merging blocks 2 and 5
Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
ResetSimTraceSel (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 selectorValue;
  uint32 regValue;
  unsigned char _4;
  long unsigned int _8;
  long unsigned int _9;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG D#16 => config_2(D)
  # DEBUG INLINE_ENTRY ResetSimTraceSel_TrustedCall
  # DEBUG config => D#16
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _4 = selectorEntryPCS_hardwareValue[28];
  selectorValue_5 = (uint32) _4;
  # DEBUG selectorValue => selectorValue_5
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  regValue_6 ={v} MEM[(struct SIM_Type *)1074036736B].CHIPCTL;
  # DEBUG regValue => regValue_6
  # DEBUG BEGIN_STMT
  regValue_7 = regValue_6 & 4294963199;
  # DEBUG regValue => regValue_7
  # DEBUG BEGIN_STMT
  _8 = selectorValue_5 << 12;
  _9 = _8 & 4096;
  regValue_10 = regValue_7 | _9;
  # DEBUG regValue => regValue_10
  # DEBUG BEGIN_STMT
  MEM[(struct SIM_Type *)1074036736B].CHIPCTL ={v} regValue_10;
  # DEBUG regValue => NULL
  # DEBUG selectorValue => NULL
  return;

}



;; Function SetSimTraceSel (SetSimTraceSel, funcdef_no=38, decl_uid=6083, cgraph_uid=39, symbol_order=39)


Symbols to be put in SSA form
{ D.6290 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 6
Number of blocks to update: 5 ( 83%)


Merging blocks 2 and 4
Merging blocks 2 and 5
Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
SetSimTraceSel (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 selectorValue;
  uint32 regValue;
  <unnamed type> _4;
  <unnamed type> _5;
  unsigned char _6;
  long unsigned int _10;
  long unsigned int _11;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _4 = MEM[(<unnamed type> *)config_2(D) + 4B];
  # DEBUG D#17 => config_2(D)
  # DEBUG INLINE_ENTRY SetSimTraceSel_TrustedCall
  # DEBUG config => D#17
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = _4;
  _6 = selectorEntryPCS_hardwareValue[_5];
  selectorValue_7 = (uint32) _6;
  # DEBUG selectorValue => selectorValue_7
  # DEBUG BEGIN_STMT
  regValue_8 ={v} MEM[(struct SIM_Type *)1074036736B].CHIPCTL;
  # DEBUG regValue => regValue_8
  # DEBUG BEGIN_STMT
  regValue_9 = regValue_8 & 4294963199;
  # DEBUG regValue => regValue_9
  # DEBUG BEGIN_STMT
  _10 = selectorValue_7 << 12;
  _11 = _10 & 4096;
  regValue_12 = regValue_9 | _11;
  # DEBUG regValue => regValue_12
  # DEBUG BEGIN_STMT
  MEM[(struct SIM_Type *)1074036736B].CHIPCTL ={v} regValue_12;
  # DEBUG regValue => NULL
  # DEBUG selectorValue => NULL
  return;

}


