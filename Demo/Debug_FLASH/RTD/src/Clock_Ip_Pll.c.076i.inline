IPA function summary for CompleteSpll.part.0/19 inlinable
  global time:     228.359649
  self size:       26
  global size:     26
  min size:       26
  self stack:      12
  global stack:    12
    size:10.000000, time:75.755550
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    ClockStartTimeout/13 function body not available
      loop depth: 0 freq:1.00 size: 5 time: 14
       op0 is compile time invariant
       op1 is compile time invariant
       op2 is compile time invariant
       op3 is compile time invariant
    ClockTimeoutExpired/14 function body not available
      loop depth: 1 freq:9.35 size: 5 time: 14
       op0 is compile time invariant
       op1 is compile time invariant
    ReportClockErrors/15 function body not available
      loop depth: 0 freq:0.48 size: 3 time: 12
       op0 is compile time invariant

IPA function summary for EnableSpll_TrustedCall.isra.0/18 inlinable
  global time:     5.020000
  self size:       8
  global size:     8
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:3.000000, time:1.020000,  executed if:(op0 == 1)
  calls:

IPA function summary for DisableSpll_TrustedCall.isra.0/17 inlinable
  global time:     8.000000
  self size:       9
  global size:     9
  min size:       0
  self stack:      0
  global stack:    0
    size:6.000000, time:6.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for ResetSpll_TrustedCall.isra.0/16 inlinable
  global time:     14.000000
  self size:       15
  global size:     15
  min size:       0
  self stack:      0
  global stack:    0
    size:12.000000, time:12.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for EnableSpll/12 inlinable
  global time:     14.000000
  self size:       6
  global size:     6
  min size:       4
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    EnableSpll_TrustedCall.isra.0/18 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 4 stack: 0

IPA function summary for DisableSpll/10 inlinable
  global time:     12.000000
  self size:       4
  global size:     4
  min size:       2
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    DisableSpll_TrustedCall.isra.0/17 function not considered for inlining
      loop depth: 0 freq:1.00 size: 1 time: 10callee size: 4 stack: 0

IPA function summary for CompleteSpll/8 inlinable
  global time:     9.960000
  self size:       10
  global size:     10
  min size:       6
  self stack:      0
  global stack:    0
    size:4.000000, time:4.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    CompleteSpll.part.0/19 function not considered for inlining
      loop depth: 0 freq:0.33 size: 3 time: 12callee size:13 stack:12

IPA function summary for SetSpll/7 inlinable
  global time:     13.000000
  self size:       5
  global size:     5
  min size:       4
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    SetSpll_TrustedCall/6 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size:15 stack: 0

IPA function summary for SetSpll_TrustedCall/6 inlinable
  global time:     11.035000
  self size:       30
  global size:     30
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 32] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op0[ref offset: 32] changed)
    size:3.000000, time:1.020000,  executed if:(op0[ref offset: 32] == 1)
    size:0.500000, time:0.170000,  executed if:(op0[ref offset: 32] == 1) && (not inlined),  nonconst if:(op0[ref offset: 104] changed) && (op0[ref offset: 32] == 1) && (not inlined)
    size:3.500000, time:1.190000,  executed if:(op0[ref offset: 32] == 1),  nonconst if:(op0[ref offset: 104] changed) && (op0[ref offset: 32] == 1)
    size:0.500000, time:0.170000,  executed if:(op0[ref offset: 32] == 1) && (not inlined),  nonconst if:(op0[ref offset: 128] changed) && (op0[ref offset: 32] == 1) && (not inlined)
    size:3.500000, time:1.190000,  executed if:(op0[ref offset: 32] == 1),  nonconst if:(op0[ref offset: 128] changed) && (op0[ref offset: 32] == 1)
    size:1.000000, time:0.340000,  executed if:(op0[ref offset: 32] == 1),  nonconst if:(op0[ref offset: 104] changed || op0[ref offset: 128] changed) && (op0[ref offset: 32] == 1)
    size:0.500000, time:0.170000,  executed if:(op0[ref offset: 32] == 1) && (not inlined),  nonconst if:(op0[ref offset: 216] changed) && (op0[ref offset: 32] == 1) && (not inlined)
    size:8.500000, time:1.530000,  executed if:(op0[ref offset: 32] == 1),  nonconst if:(op0[ref offset: 216] changed) && (op0[ref offset: 32] == 1)
    size:1.000000, time:0.085000,  executed if:(op0[ref offset: 216] == 2) && (op0[ref offset: 32] == 1)
    size:1.000000, time:0.085000,  executed if:(op0[ref offset: 216] == 1) && (op0[ref offset: 32] == 1)
    size:1.000000, time:0.085000,  executed if:(op0[ref offset: 216] == 0) && (op0[ref offset: 32] == 1)
  calls:

IPA function summary for ResetSpll/5 inlinable
  global time:     12.000000
  self size:       4
  global size:     4
  min size:       2
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    ResetSpll_TrustedCall.isra.0/16 function not considered for inlining
      loop depth: 0 freq:1.00 size: 1 time: 10callee size: 7 stack: 0

IPA function summary for Callback_PllEmptyDisable/3 inlinable
  global time:     2.000000
  self size:       3
  global size:     3
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for Callback_PllEmptyComplete/2 inlinable
  global time:     2.000000
  self size:       3
  global size:     3
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for Callback_PllEmpty/1 inlinable
  global time:     2.000000
  self size:       3
  global size:     3
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:


Flattening functions:
Overall time estimate: 333.374649 weighted by profile: 0.000000

Deciding on inlining of small functions.  Starting with size 0.
Enqueueing calls in CompleteSpll.part.0/19.
Enqueueing calls in EnableSpll_TrustedCall.isra.0/18.
Enqueueing calls in DisableSpll_TrustedCall.isra.0/17.
Enqueueing calls in ResetSpll_TrustedCall.isra.0/16.
Enqueueing calls in EnableSpll/12.
Enqueueing calls in DisableSpll/10.
Enqueueing calls in CompleteSpll/8.
Enqueueing calls in SetSpll/7.
Enqueueing calls in SetSpll_TrustedCall/6.
Enqueueing calls in ResetSpll/5.
Enqueueing calls in Callback_PllEmptyDisable/3.
Enqueueing calls in Callback_PllEmptyComplete/2.
Enqueueing calls in Callback_PllEmpty/1.

Considering EnableSpll_TrustedCall.isra.0/18 with 8 size
 to be inlined into EnableSpll/12 in ../RTD/src/Clock_Ip_Pll.c:658
 Estimated badness is -1.925926, frequency 1.00.

Considering DisableSpll_TrustedCall.isra.0/17 with 9 size
 to be inlined into DisableSpll/10 in ../RTD/src/Clock_Ip_Pll.c:639
 Estimated badness is -1.066667, frequency 1.00.

Considering ResetSpll_TrustedCall.isra.0/16 with 15 size
 to be inlined into ResetSpll/5 in ../RTD/src/Clock_Ip_Pll.c:514
 Estimated badness is -0.290909, frequency 1.00.

Considering SetSpll_TrustedCall/6 with 30 size
 to be inlined into SetSpll/7 in ../RTD/src/Clock_Ip_Pll.c:579
 Estimated badness is -0.087019, frequency 1.00.

Considering CompleteSpll.part.0/19 with 26 size
 to be inlined into CompleteSpll/8 in unknown:0
 Estimated badness is -0.030800, frequency 0.33.

Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:

Deciding on functions to be inlined into all callers and removing useless speculations:
Overall time estimate: 124.743684 weighted by profile: 0.000000

Why inlining failed?
function body not available                       :        3 calls, 3.572474 freq, 0 count
IPA function summary for EnableSpll/12 inlinable
  global time:     6.020000
  self size:       6
  global size:     9
  min size:       4
  self stack:      0
  global stack:    0
    size:5.500000, time:3.520000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    EnableSpll_TrustedCall.isra.0/18 inlined
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 4 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for DisableSpll/10 inlinable
  global time:     8.000000
  self size:       4
  global size:     9
  min size:       2
  self stack:      0
  global stack:    0
    size:6.000000, time:6.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    DisableSpll_TrustedCall.isra.0/17 inlined
      loop depth: 0 freq:1.00 size: 1 time: 10callee size: 4 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for CompleteSpll/8 inlinable
  global time:     80.698684
  self size:       10
  global size:     30
  min size:       32
  self stack:      0
  global stack:    12
    size:14.000000, time:28.999331
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    CompleteSpll.part.0/19 inlined
      loop depth: 0 freq:0.33 size: 3 time: 12callee size:13 stack:12
      Stack frame offset 0, callee self size 12, callee size 12
      ClockStartTimeout/13 function body not available
        loop depth: 0 freq:0.33 size: 5 time: 14
         op0 is compile time invariant
         op1 is compile time invariant
         op2 is compile time invariant
         op3 is compile time invariant
      ClockTimeoutExpired/14 function body not available
        loop depth: 1 freq:3.08 size: 5 time: 14
         op0 is compile time invariant
         op1 is compile time invariant
      ReportClockErrors/15 function body not available
        loop depth: 0 freq:0.16 size: 3 time: 12
         op0 is compile time invariant

IPA function summary for SetSpll/7 inlinable
  global time:     10.025000
  self size:       5
  global size:     28
  min size:       4
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op0[ref offset: 32] changed)
    size:3.000000, time:1.020000,  executed if:(op0[ref offset: 32] == 1)
    size:3.500000, time:1.190000,  executed if:(op0[ref offset: 32] == 1),  nonconst if:(op0[ref offset: 104] changed) && (op0[ref offset: 32] == 1)
    size:3.500000, time:1.190000,  executed if:(op0[ref offset: 32] == 1),  nonconst if:(op0[ref offset: 128] changed) && (op0[ref offset: 32] == 1)
    size:1.000000, time:0.340000,  executed if:(op0[ref offset: 32] == 1),  nonconst if:(op0[ref offset: 104] changed || op0[ref offset: 128] changed) && (op0[ref offset: 32] == 1)
    size:8.500000, time:1.530000,  executed if:(op0[ref offset: 32] == 1),  nonconst if:(op0[ref offset: 216] changed) && (op0[ref offset: 32] == 1)
    size:1.000000, time:0.085000,  executed if:(op0[ref offset: 216] == 2) && (op0[ref offset: 32] == 1)
    size:1.000000, time:0.085000,  executed if:(op0[ref offset: 216] == 1) && (op0[ref offset: 32] == 1)
    size:1.000000, time:0.085000,  executed if:(op0[ref offset: 216] == 0) && (op0[ref offset: 32] == 1)
  calls:
    SetSpll_TrustedCall/6 inlined
      loop depth: 0 freq:1.00 size: 2 time: 11callee size:15 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for ResetSpll/5 inlinable
  global time:     14.000000
  self size:       4
  global size:     15
  min size:       2
  self stack:      0
  global stack:    0
    size:12.000000, time:12.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    ResetSpll_TrustedCall.isra.0/16 inlined
      loop depth: 0 freq:1.00 size: 1 time: 10callee size: 7 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for Callback_PllEmptyDisable/3 inlinable
  global time:     2.000000
  self size:       3
  global size:     3
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for Callback_PllEmptyComplete/2 inlinable
  global time:     2.000000
  self size:       3
  global size:     3
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

IPA function summary for Callback_PllEmpty/1 inlinable
  global time:     2.000000
  self size:       3
  global size:     3
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

Symbol table:

CompleteSpll.part.0/19 (CompleteSpll.part.0) @06bd92a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Function CompleteSpll.part.0/19 is inline copy in CompleteSpll/8
  Availability: local
  Function flags: count:114863531 (estimated locally) first_run:1 body local split_part optimize_size
  Called by: CompleteSpll/8 (inlined) (114863531 (estimated locally),0.33 per call) 
  Calls: ClockStartTimeout/13 (114863531 (estimated locally),0.33 per call) ClockTimeoutExpired/14 (1073741815 (estimated locally),3.08 per call) ReportClockErrors/15 (54870309 (estimated locally),0.16 per call) 
EnableSpll_TrustedCall.isra.0/18 (EnableSpll_TrustedCall.isra.0) @06b29ee0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Function EnableSpll_TrustedCall.isra.0/18 is inline copy in EnableSpll/12
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: EnableSpll/12 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
DisableSpll_TrustedCall.isra.0/17 (DisableSpll_TrustedCall.isra.0) @06b29a80
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Function DisableSpll_TrustedCall.isra.0/17 is inline copy in DisableSpll/10
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: DisableSpll/10 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
ResetSpll_TrustedCall.isra.0/16 (ResetSpll_TrustedCall.isra.0) @06b29540
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Function ResetSpll_TrustedCall.isra.0/16 is inline copy in ResetSpll/5
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: ResetSpll/5 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
ReportClockErrors/15 (ReportClockErrors) @05fd62a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: CompleteSpll.part.0/19 (54870309 (estimated locally),0.16 per call) 
  Calls: 
ClockTimeoutExpired/14 (ClockTimeoutExpired) @05fd61c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: CompleteSpll.part.0/19 (1073741815 (estimated locally),3.08 per call) 
  Calls: 
ClockStartTimeout/13 (ClockStartTimeout) @05fd60e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: CompleteSpll.part.0/19 (114863531 (estimated locally),0.33 per call) 
  Calls: 
EnableSpll/12 (EnableSpll) @05fcda80
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: pllCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: EnableSpll_TrustedCall.isra.0/18 (inlined) (1073741824 (estimated locally),1.00 per call) 
DisableSpll/10 (DisableSpll) @05fcd460
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: pllCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: DisableSpll_TrustedCall.isra.0/17 (inlined) (1073741824 (estimated locally),1.00 per call) 
CompleteSpll/8 (CompleteSpll) @05eccd20
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: pllCallbacks/0 (addr)
  Availability: available
  Function flags: count:348071309 (estimated locally) body optimize_size
  Called by: 
  Calls: CompleteSpll.part.0/19 (inlined) (114863531 (estimated locally),0.33 per call) 
SetSpll/7 (SetSpll) @05eccee0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: pllCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: SetSpll_TrustedCall/6 (inlined) (1073741824 (estimated locally),1.00 per call) 
SetSpll_TrustedCall/6 (SetSpll_TrustedCall) @05eccc40
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function SetSpll_TrustedCall/6 is inline copy in SetSpll/7
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: SetSpll/7 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
ResetSpll/5 (ResetSpll) @05ecc460
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: pllCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: ResetSpll_TrustedCall.isra.0/16 (inlined) (1073741824 (estimated locally),1.00 per call) 
Callback_PllEmptyDisable/3 (Callback_PllEmptyDisable) @05ec6d20
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: pllCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
Callback_PllEmptyComplete/2 (Callback_PllEmptyComplete) @05ec6ee0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: pllCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
Callback_PllEmpty/1 (Callback_PllEmpty) @05ec6c40
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: pllCallbacks/0 (addr)pllCallbacks/0 (addr)pllCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
pllCallbacks/0 (pllCallbacks) @05ec8900
  Type: variable definition analyzed
  Visibility: externally_visible public
  References: Callback_PllEmpty/1 (addr)Callback_PllEmpty/1 (addr)Callback_PllEmptyComplete/2 (addr)Callback_PllEmpty/1 (addr)Callback_PllEmptyDisable/3 (addr)ResetSpll/5 (addr)SetSpll/7 (addr)CompleteSpll/8 (addr)EnableSpll/12 (addr)DisableSpll/10 (addr)
  Referring: 
  Availability: available
  Varpool flags: initialized read-only const-value-known

;; Function Callback_PllEmpty (Callback_PllEmpty, funcdef_no=0, decl_uid=6045, cgraph_uid=1, symbol_order=1)

Callback_PllEmpty (const struct Clock_Ip_PllConfigType * config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  return;

}



;; Function Callback_PllEmptyComplete (Callback_PllEmptyComplete, funcdef_no=1, decl_uid=6047, cgraph_uid=2, symbol_order=2)

Callback_PllEmptyComplete (Clock_Ip_NameType PllName)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  return 0;

}



;; Function Callback_PllEmptyDisable (Callback_PllEmptyDisable, funcdef_no=2, decl_uid=6049, cgraph_uid=3, symbol_order=3)

Callback_PllEmptyDisable (Clock_Ip_NameType PllName)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  return;

}



;; Function SetSpll (SetSpll, funcdef_no=6, decl_uid=6053, cgraph_uid=7, symbol_order=7)


Symbols to be put in SSA form
{ D.6137 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 10
Number of blocks to update: 9 ( 90%)


Merging blocks 2 and 4
Merging blocks 9 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;; 2 succs { 3 7 }
;; 3 succs { 7 4 5 6 }
;; 4 succs { 7 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 1 }
SetSpll (const struct Clock_Ip_PllConfigType * config)
{
  short unsigned int _4;
  long unsigned int _5;
  unsigned char _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  unsigned char _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  unsigned char _18;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG config => config_2(D)
  # DEBUG INLINE_ENTRY SetSpll_TrustedCall
  # DEBUG BEGIN_STMT
  _4 = config_2(D)->enable;
  if (_4 == 1)
    goto <bb 3>; [34.00%]
  else
    goto <bb 7>; [66.00%]

  <bb 3> [local count: 365072220]:
  # DEBUG BEGIN_STMT
  _5 ={v} MEM[(struct SCG_Type *)1074151424B].SPLLCFG;
  _6 = config_2(D)->predivider;
  _7 = (long unsigned int) _6;
  _8 = _7 + 4294967295;
  _9 = _8 << 8;
  _10 = _9 & 1792;
  _11 = config_2(D)->mulFactorDiv;
  _12 = (long unsigned int) _11;
  _13 = _12 + 4294967280;
  _14 = _13 << 16;
  _15 = _14 & 2031616;
  _16 = _10 | _15;
  _17 = _5 | _16;
  MEM[(struct SCG_Type *)1074151424B].SPLLCFG ={v} _17;
  # DEBUG BEGIN_STMT
  _18 = config_2(D)->monitor;
  switch (_18) <default: <L3> [25.00%], case 0: <L0> [25.00%], case 1: <L1> [25.00%], case 2: <L2> [25.00%]>

  <bb 4> [local count: 91268055]:
<L0>:
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].SPLLCSR ={v} 0;
  # DEBUG BEGIN_STMT
  goto <bb 7>; [100.00%]

  <bb 5> [local count: 91268055]:
<L1>:
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].SPLLCSR ={v} 65536;
  # DEBUG BEGIN_STMT
  goto <bb 7>; [100.00%]

  <bb 6> [local count: 91268055]:
<L2>:
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].SPLLCSR ={v} 196608;
  # DEBUG BEGIN_STMT

  <bb 7> [local count: 1073741824]:
<L3>:
  # DEBUG config => NULL
  return;

}



;; Function ResetSpll (ResetSpll, funcdef_no=4, decl_uid=6051, cgraph_uid=5, symbol_order=5)


Symbols to be put in SSA form
{ D.6135 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 6
Number of blocks to update: 5 ( 83%)


Merging blocks 2 and 4
Merging blocks 2 and 5
Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
ResetSpll (const struct Clock_Ip_PllConfigType * config)
{
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG D#1 => config_2(D)
  # DEBUG INLINE_ENTRY ResetSpll_TrustedCall
  # DEBUG config => D#1
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _4 ={v} MEM[(struct SCG_Type *)1074151424B].SPLLCSR;
  _5 = _4 & 4286578687;
  MEM[(struct SCG_Type *)1074151424B].SPLLCSR ={v} _5;
  # DEBUG BEGIN_STMT
  _6 ={v} MEM[(struct SCG_Type *)1074151424B].SPLLCSR;
  _7 = _6 & 4294967294;
  MEM[(struct SCG_Type *)1074151424B].SPLLCSR ={v} _7;
  # DEBUG BEGIN_STMT
  _8 ={v} MEM[(struct SCG_Type *)1074151424B].SPLLCFG;
  _9 = _8 & 4294965503;
  MEM[(struct SCG_Type *)1074151424B].SPLLCFG ={v} _9;
  # DEBUG BEGIN_STMT
  _10 ={v} MEM[(struct SCG_Type *)1074151424B].SPLLCFG;
  _11 = _10 & 4292935679;
  MEM[(struct SCG_Type *)1074151424B].SPLLCFG ={v} _11;
  return;

}



;; Function DisableSpll (DisableSpll, funcdef_no=9, decl_uid=6059, cgraph_uid=10, symbol_order=10)


Symbols to be put in SSA form
{ D.6139 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 6
Number of blocks to update: 5 ( 83%)


Merging blocks 2 and 4
Merging blocks 2 and 5
Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
DisableSpll (Clock_Ip_NameType PllName)
{
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG D#2 => PllName_2(D)
  # DEBUG INLINE_ENTRY DisableSpll_TrustedCall
  # DEBUG PllName => D#2
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _4 ={v} MEM[(struct SCG_Type *)1074151424B].SPLLCSR;
  _5 = _4 & 4286578687;
  MEM[(struct SCG_Type *)1074151424B].SPLLCSR ={v} _5;
  # DEBUG BEGIN_STMT
  _6 ={v} MEM[(struct SCG_Type *)1074151424B].SPLLCSR;
  _7 = _6 & 4294967294;
  MEM[(struct SCG_Type *)1074151424B].SPLLCSR ={v} _7;
  return;

}



;; Function EnableSpll (EnableSpll, funcdef_no=11, decl_uid=6057, cgraph_uid=12, symbol_order=12)


Symbols to be put in SSA form
{ D.6141 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 8
Number of blocks to update: 7 ( 88%)


Merging blocks 2 and 4
Merging blocks 7 and 3
Merging blocks 2 and 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }
EnableSpll (const struct Clock_Ip_PllConfigType * config)
{
  short unsigned int _4;
  short unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _4 = MEM[(short unsigned int *)config_2(D) + 4B];
  # DEBUG D#3 => config_2(D)
  # DEBUG INLINE_ENTRY EnableSpll_TrustedCall
  # DEBUG config => D#3
  # DEBUG BEGIN_STMT
  _5 = _4;
  if (_5 == 1)
    goto <bb 3>; [34.00%]
  else
    goto <bb 4>; [66.00%]

  <bb 3> [local count: 365072220]:
  # DEBUG BEGIN_STMT
  _6 ={v} MEM[(struct SCG_Type *)1074151424B].SPLLCSR;
  _7 = _6 | 1;
  MEM[(struct SCG_Type *)1074151424B].SPLLCSR ={v} _7;

  <bb 4> [local count: 1073741824]:
  return;

}



;; Function CompleteSpll (CompleteSpll, funcdef_no=7, decl_uid=6055, cgraph_uid=8, symbol_order=8)


Symbols to be put in SSA form
{ D.6142 D.6212 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 14
Number of blocks to update: 13 ( 93%)


Removing basic block 3
Removing basic block 6
Removing basic block 10
Merging blocks 13 and 5
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9
;;
;; Loop 2
;;  header 4, latch 5
;;  depth 1, outer 0
;;  nodes: 4 5
;; 2 succs { 3 9 }
;; 3 succs { 4 }
;; 4 succs { 5 6 }
;; 5 succs { 4 6 }
;; 6 succs { 8 7 }
;; 7 succs { 8 }
;; 8 succs { 9 }
;; 9 succs { 1 }
CompleteSpll (Clock_Ip_NameType pllName)
{
  uint32 SPLLStatus;
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  boolean TimeoutOccurred;
  clock_pll_status_t pllStatus;
  clock_pll_status_t D.6212;
  clock_pll_status_t pllStatus;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int TimeoutTicks.0_12;

  <bb 2> [local count: 348071309]:
  # DEBUG BEGIN_STMT
  # DEBUG pllStatus => 1
  # DEBUG BEGIN_STMT
  # DEBUG TimeoutOccurred => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 ={v} MEM[(struct SCG_Type *)1074151424B].SPLLCSR;
  _2 = _1 & 1;
  if (_2 != 0)
    goto <bb 3>; [33.00%]
  else
    goto <bb 9>; [67.00%]

  <bb 3> [local count: 114863532]:
  # DEBUG pllName => pllName_8(D)
  # DEBUG INLINE_ENTRY CompleteSpll
  # DEBUG BEGIN_STMT
  ClockStartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 4> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _9 ={v} MEM[(struct SCG_Type *)1074151424B].SPLLCSR;
  _10 = _9 >> 24;
  SPLLStatus_11 = _10 & 1;
  # DEBUG SPLLStatus => SPLLStatus_11
  # DEBUG BEGIN_STMT
  TimeoutTicks.0_12 = TimeoutTicks;
  TimeoutOccurred_13 = ClockTimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.0_12);
  # DEBUG TimeoutOccurred => TimeoutOccurred_13
  # DEBUG BEGIN_STMT
  if (SPLLStatus_11 == 0)
    goto <bb 5>; [94.50%]
  else
    goto <bb 6>; [5.50%]

  <bb 5> [local count: 1014686025]:
  if (TimeoutOccurred_13 != 0)
    goto <bb 6>; [5.50%]
  else
    goto <bb 4>; [94.50%]

  <bb 6> [local count: 114863532]:
  # TimeoutOccurred_14 = PHI <TimeoutOccurred_13(4), TimeoutOccurred_13(5)>
  # DEBUG BEGIN_STMT
  if (TimeoutOccurred_14 != 0)
    goto <bb 7>; [47.77%]
  else
    goto <bb 8>; [52.23%]

  <bb 7> [local count: 54870309]:
  # DEBUG BEGIN_STMT
  ReportClockErrors (1, pllName_8(D));

  <bb 8> [local count: 114863532]:
  # pllStatus_15 = PHI <2(6), 1(7)>
  # DEBUG pllStatus => pllStatus_15
  # DEBUG BEGIN_STMT
  StartTime ={v} {CLOBBER};
  ElapsedTime ={v} {CLOBBER};
  TimeoutTicks ={v} {CLOBBER};
  _24 = pllStatus_15;
  # DEBUG pllName => NULL
  # DEBUG pllStatus => NULL
  # DEBUG TimeoutOccurred => NULL
  # DEBUG StartTime => NULL
  # DEBUG ElapsedTime => NULL
  # DEBUG TimeoutTicks => NULL
  # DEBUG SPLLStatus => NULL
  pllStatus_4 = _24;

  <bb 9> [local count: 348071309]:
  # pllStatus_5 = PHI <pllStatus_4(8), 0(2)>
  # DEBUG pllStatus => pllStatus_5
  # DEBUG BEGIN_STMT
  return pllStatus_5;

}


