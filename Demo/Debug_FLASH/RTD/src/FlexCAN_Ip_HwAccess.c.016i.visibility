
Marking local functions: FlexCAN_GetPayloadSize FlexCAN_ComputePayloadSize FlexCAN_ClearRAM FlexCAN_ComputeDLCValue FlexCAN_CanBitSampling FlexCAN_SetEdgeFilter FlexCAN_SetBusOffAutorecovery FlexCAN_SetRemoteReqStore FlexCAN_SetProtocolException FlexCAN_SetEntireFrameArbitrationFieldComparison FlexCAN_SetIsoCan FlexCAN_IsFDEnabled FlexCAN_SetSelfReception DevAssert


Marking externally visible functions: FlexCAN_ConfigCtrlOptions FlexCAN_IsMbOutOfRange FlexCAN_ReadRxFifo FlexCAN_SetRxFifoFilter FlexCAN_SetOperationMode FlexCAN_SetMaxMsgBuffNum FlexCAN_SetTxMsgBuff FlexCAN_GetMsgBuff FlexCAN_GetMsgBuffTimestamp FlexCAN_SetRxMsgBuff FlexCAN_EnableInterrupts FlexCAN_DisableInterrupts FLEXCAN_ClearMsgBuffIntCmd FlexCAN_SetMsgBuffIntCmd FlexCAN_LockRxMsgBuff FlexCAN_GetMbPayloadSize FlexCAN_SetPayloadSize FlexCAN_IsFDAvailable FlexCAN_EnableRxFifo FlexCAN_Init FlexCAN_SetErrIntCmd FlexCAN_Disable FlexCAN_ExitFreezeMode FlexCAN_Enable FlexCAN_EnterFreezeMode FlexCAN_GetMaxMbNum FlexCAN_GetMsgBuffRegion


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13/91 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13) @06f32620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_SetRxFifoFilter/65 FlexCAN_SetRxFifoFilter/65 FlexCAN_SetRxFifoFilter/65 FlexCAN_SetRxFifoFilter/65 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13/90 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13) @06f32ee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_SetRxFifoFilter/65 FlexCAN_SetRxFifoFilter/65 FlexCAN_SetRxFifoFilter/65 FlexCAN_SetRxFifoFilter/65 
  Calls: 
payload_code.6941/89 (payload_code) @06f44120
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: FlexCAN_ComputeDLCValue/38 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_11/88 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_11) @06f32000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FLEXCAN_ClearMsgBuffIntCmd/56 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_11/87 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_11) @06f1dee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FLEXCAN_ClearMsgBuffIntCmd/56 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18/86 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18) @06f1dc40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_SetMsgBuffIntCmd/55 FlexCAN_SetMsgBuffIntCmd/55 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18/85 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18) @06f1db60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_SetMsgBuffIntCmd/55 FlexCAN_SetMsgBuffIntCmd/55 
  Calls: 
flexcanBase.7066/84 (flexcanBase) @06f27168
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: FlexCAN_IsFDAvailable/50 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_06/83 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_06) @06f1d1c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_SetErrIntCmd/47 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_06/82 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_06) @06f1d0e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_SetErrIntCmd/47 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_05/81 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_05) @06edeee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Disable/46 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_05/80 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_05) @06edee00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Disable/46 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_04/79 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_04) @06edec40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_ExitFreezeMode/45 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_04/78 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_04) @06edeb60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_ExitFreezeMode/45 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_03/77 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_03) @06ede9a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Enable/44 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_03/76 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_03) @06ede8c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Enable/44 
  Calls: 
OsIf_GetElapsed/75 (OsIf_GetElapsed) @06ede700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Init/48 FlexCAN_Disable/46 FlexCAN_ExitFreezeMode/45 FlexCAN_Enable/44 FlexCAN_EnterFreezeMode/43 
  Calls: 
OsIf_GetCounter/74 (OsIf_GetCounter) @06ede620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Init/48 FlexCAN_Disable/46 FlexCAN_ExitFreezeMode/45 FlexCAN_Enable/44 FlexCAN_EnterFreezeMode/43 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_02/73 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_02) @06ede540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_EnterFreezeMode/43 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_02/72 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_02) @06ede460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_EnterFreezeMode/43 
  Calls: 
OsIf_MicrosToTicks/71 (OsIf_MicrosToTicks) @06ede380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Init/48 FlexCAN_Disable/46 FlexCAN_ExitFreezeMode/45 FlexCAN_Enable/44 FlexCAN_EnterFreezeMode/43 
  Calls: 
maxMbNum.6992/70 (maxMbNum) @06edda68
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: FlexCAN_GetMaxMbNum/42 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
flexcanBase.6991/69 (flexcanBase) @06edda20
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: FlexCAN_GetMaxMbNum/42 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
FlexCAN_ConfigCtrlOptions/68 (FlexCAN_ConfigCtrlOptions) @06d9f540
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: FlexCAN_SetEdgeFilter/27 FlexCAN_SetEdgeFilter/27 FlexCAN_SetRemoteReqStore/25 FlexCAN_SetRemoteReqStore/25 FlexCAN_SetBusOffAutorecovery/26 FlexCAN_SetBusOffAutorecovery/26 FlexCAN_CanBitSampling/28 FlexCAN_CanBitSampling/28 FlexCAN_SetProtocolException/24 FlexCAN_SetProtocolException/24 FlexCAN_SetEntireFrameArbitrationFieldComparison/23 FlexCAN_SetEntireFrameArbitrationFieldComparison/23 FlexCAN_SetIsoCan/22 FlexCAN_SetIsoCan/22 
FlexCAN_IsMbOutOfRange/67 (FlexCAN_IsMbOutOfRange) @06d9fd20
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: 
FlexCAN_ReadRxFifo/66 (FlexCAN_ReadRxFifo) @06d9fa80
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: DevAssert/0 FlexCAN_ComputePayloadSize/40 
FlexCAN_SetRxFifoFilter/65 (FlexCAN_SetRxFifoFilter) @06d9f700
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13/91 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13/90 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13/91 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13/90 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13/91 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13/90 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13/91 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13/90 DevAssert/0 
FlexCAN_SetOperationMode/64 (FlexCAN_SetOperationMode) @06d9f460
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: FlexCAN_SetSelfReception/18 
FlexCAN_SetMaxMsgBuffNum/63 (FlexCAN_SetMaxMsgBuffNum) @06d8c7e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: FlexCAN_GetMbPayloadSize/53 FlexCAN_GetMsgBuffRegion/41 FlexCAN_GetMaxMbNum/42 FlexCAN_GetMsgBuffRegion/41 DevAssert/0 FlexCAN_GetMbPayloadSize/53 
FlexCAN_SetTxMsgBuff/62 (FlexCAN_SetTxMsgBuff) @06d8c2a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: FlexCAN_ComputePayloadSize/40 FlexCAN_ComputeDLCValue/38 DevAssert/0 
FlexCAN_GetMsgBuff/61 (FlexCAN_GetMsgBuff) @06d8cb60
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: FlexCAN_GetMbPayloadSize/53 FlexCAN_GetMbPayloadSize/53 DevAssert/0 FlexCAN_ComputePayloadSize/40 FlexCAN_GetMsgBuffRegion/41 
FlexCAN_GetMsgBuffTimestamp/60 (FlexCAN_GetMsgBuffTimestamp) @06d8c700
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: FlexCAN_GetMsgBuffRegion/41 
FlexCAN_SetRxMsgBuff/59 (FlexCAN_SetRxMsgBuff) @06d8c460
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: DevAssert/0 FlexCAN_GetMsgBuffRegion/41 
FlexCAN_EnableInterrupts/58 (FlexCAN_EnableInterrupts) @06d8c1c0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: FlexCAN_Ip_au32ImaskBuff/37 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: 
FlexCAN_DisableInterrupts/57 (FlexCAN_DisableInterrupts) @06d82ee0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: 
FLEXCAN_ClearMsgBuffIntCmd/56 (FLEXCAN_ClearMsgBuffIntCmd) @06d829a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: FlexCAN_Ip_au32ImaskBuff/37 (write)FlexCAN_Ip_au32ImaskBuff/37 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: SchM_Exit_Can_CAN_EXCLUSIVE_AREA_11/88 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_11/87 
FlexCAN_SetMsgBuffIntCmd/55 (FlexCAN_SetMsgBuffIntCmd) @06d82460
  Type: function definition analyzed
  Visibility: externally_visible public
  References: FlexCAN_Ip_au32ImaskBuff/37 (read)FlexCAN_Ip_au32ImaskBuff/37 (write)FlexCAN_Ip_au32ImaskBuff/37 (read)FlexCAN_Ip_au32ImaskBuff/37 (read)FlexCAN_Ip_au32ImaskBuff/37 (write)FlexCAN_Ip_au32ImaskBuff/37 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18/86 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18/85 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18/86 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18/85 
FlexCAN_LockRxMsgBuff/54 (FlexCAN_LockRxMsgBuff) @06d82e00
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: FlexCAN_GetMsgBuffRegion/41 
FlexCAN_GetMbPayloadSize/53 (FlexCAN_GetMbPayloadSize) @06d82b60
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: FlexCAN_SetMaxMsgBuffNum/63 FlexCAN_SetMaxMsgBuffNum/63 FlexCAN_GetMsgBuff/61 FlexCAN_GetMsgBuff/61 
  Calls: FlexCAN_GetPayloadSize/52 
FlexCAN_GetPayloadSize/52 (FlexCAN_GetPayloadSize) @06d828c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: FlexCAN_GetMbPayloadSize/53 FlexCAN_GetMsgBuffRegion/41 
  Calls: FlexCAN_IsFDAvailable/50 
FlexCAN_SetPayloadSize/51 (FlexCAN_SetPayloadSize) @06d82620
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: FlexCAN_IsFDEnabled/19 DevAssert/0 FlexCAN_IsFDEnabled/19 
FlexCAN_IsFDAvailable/50 (FlexCAN_IsFDAvailable) @06d82380
  Type: function definition analyzed
  Visibility: externally_visible public
  References: flexcanBase.7066/84 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: FlexCAN_Init/48 FlexCAN_GetPayloadSize/52 
  Calls: 
FlexCAN_EnableRxFifo/49 (FlexCAN_EnableRxFifo) @06d820e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: FlexCAN_GetMaxMbNum/42 
FlexCAN_Init/48 (FlexCAN_Init) @06d787e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: FlexCAN_IsFDAvailable/50 FlexCAN_ClearRAM/39 OsIf_GetElapsed/75 OsIf_GetCounter/74 OsIf_MicrosToTicks/71 
FlexCAN_SetErrIntCmd/47 (FlexCAN_SetErrIntCmd) @06d78d20
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: SchM_Exit_Can_CAN_EXCLUSIVE_AREA_06/83 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_06/82 
FlexCAN_Disable/46 (FlexCAN_Disable) @06d78700
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: OsIf_GetElapsed/75 OsIf_GetCounter/74 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_05/81 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_05/80 OsIf_MicrosToTicks/71 
FlexCAN_ExitFreezeMode/45 (FlexCAN_ExitFreezeMode) @06d78380
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: OsIf_GetElapsed/75 OsIf_GetCounter/74 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_04/79 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_04/78 OsIf_MicrosToTicks/71 
FlexCAN_Enable/44 (FlexCAN_Enable) @06d58d20
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: OsIf_GetElapsed/75 OsIf_GetCounter/74 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_03/77 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_03/76 OsIf_MicrosToTicks/71 
FlexCAN_EnterFreezeMode/43 (FlexCAN_EnterFreezeMode) @06d587e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: OsIf_GetElapsed/75 OsIf_GetCounter/74 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_02/73 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_02/72 OsIf_MicrosToTicks/71 
FlexCAN_GetMaxMbNum/42 (FlexCAN_GetMaxMbNum) @06d58ee0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: flexcanBase.6991/69 (read)maxMbNum.6992/70 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: FlexCAN_SetMaxMsgBuffNum/63 FlexCAN_EnableRxFifo/49 FlexCAN_ClearRAM/39 FlexCAN_ClearRAM/39 
  Calls: 
FlexCAN_GetMsgBuffRegion/41 (FlexCAN_GetMsgBuffRegion) @06d58c40
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: FlexCAN_SetMaxMsgBuffNum/63 FlexCAN_SetMaxMsgBuffNum/63 FlexCAN_GetMsgBuff/61 FlexCAN_GetMsgBuffTimestamp/60 FlexCAN_SetRxMsgBuff/59 FlexCAN_LockRxMsgBuff/54 
  Calls: FlexCAN_GetPayloadSize/52 
FlexCAN_ComputePayloadSize/40 (FlexCAN_ComputePayloadSize) @06d589a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: FlexCAN_ReadRxFifo/66 FlexCAN_SetTxMsgBuff/62 FlexCAN_GetMsgBuff/61 
  Calls: 
FlexCAN_ClearRAM/39 (FlexCAN_ClearRAM) @06d58700
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: FlexCAN_Init/48 
  Calls: FlexCAN_GetMaxMbNum/42 FlexCAN_GetMaxMbNum/42 
FlexCAN_ComputeDLCValue/38 (FlexCAN_ComputeDLCValue) @06d58460
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: payload_code.6941/89 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: FlexCAN_SetTxMsgBuff/62 
  Calls: 
FlexCAN_Ip_au32ImaskBuff/37 (FlexCAN_Ip_au32ImaskBuff) @068622d0
  Type: variable definition analyzed
  Visibility: force_output prevailing_def_ironly
  References: 
  Referring: FlexCAN_SetMsgBuffIntCmd/55 (read)FlexCAN_SetMsgBuffIntCmd/55 (write)FlexCAN_SetMsgBuffIntCmd/55 (read)FlexCAN_SetMsgBuffIntCmd/55 (read)FlexCAN_SetMsgBuffIntCmd/55 (write)FlexCAN_SetMsgBuffIntCmd/55 (read)FLEXCAN_ClearMsgBuffIntCmd/56 (write)FLEXCAN_ClearMsgBuffIntCmd/56 (read)FlexCAN_EnableInterrupts/58 (read)
  Availability: available
  Varpool flags:
FlexCAN_CanBitSampling/28 (FlexCAN_CanBitSampling) @06d4c000
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: FlexCAN_ConfigCtrlOptions/68 FlexCAN_ConfigCtrlOptions/68 
  Calls: 
FlexCAN_SetEdgeFilter/27 (FlexCAN_SetEdgeFilter) @06d47c40
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: FlexCAN_ConfigCtrlOptions/68 FlexCAN_ConfigCtrlOptions/68 
  Calls: 
FlexCAN_SetBusOffAutorecovery/26 (FlexCAN_SetBusOffAutorecovery) @06d478c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: FlexCAN_ConfigCtrlOptions/68 FlexCAN_ConfigCtrlOptions/68 
  Calls: 
FlexCAN_SetRemoteReqStore/25 (FlexCAN_SetRemoteReqStore) @06d47540
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: FlexCAN_ConfigCtrlOptions/68 FlexCAN_ConfigCtrlOptions/68 
  Calls: 
FlexCAN_SetProtocolException/24 (FlexCAN_SetProtocolException) @06d471c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: FlexCAN_ConfigCtrlOptions/68 FlexCAN_ConfigCtrlOptions/68 
  Calls: 
FlexCAN_SetEntireFrameArbitrationFieldComparison/23 (FlexCAN_SetEntireFrameArbitrationFieldComparison) @06d43e00
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: FlexCAN_ConfigCtrlOptions/68 FlexCAN_ConfigCtrlOptions/68 
  Calls: 
FlexCAN_SetIsoCan/22 (FlexCAN_SetIsoCan) @06d43a80
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: FlexCAN_ConfigCtrlOptions/68 FlexCAN_ConfigCtrlOptions/68 
  Calls: 
FlexCAN_IsFDEnabled/19 (FlexCAN_IsFDEnabled) @06d430e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: FlexCAN_SetPayloadSize/51 FlexCAN_SetPayloadSize/51 
  Calls: 
FlexCAN_SetSelfReception/18 (FlexCAN_SetSelfReception) @06d3de00
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: FlexCAN_SetOperationMode/64 
  Calls: 
DevAssert/0 (DevAssert) @06d0e9a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: FlexCAN_ReadRxFifo/66 FlexCAN_SetRxFifoFilter/65 FlexCAN_SetMaxMsgBuffNum/63 FlexCAN_SetTxMsgBuff/62 FlexCAN_GetMsgBuff/61 FlexCAN_SetRxMsgBuff/59 FlexCAN_SetPayloadSize/51 
  Calls: 
FlexCAN_ConfigCtrlOptions (struct FLEXCAN_Type * pBase, uint32 u32Options)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = u32Options & 32;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetIsoCan (pBase, 1);
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetIsoCan (pBase, 0);

  <bb 5> :
  # DEBUG BEGIN_STMT
  _2 = u32Options & 64;
  if (_2 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetEntireFrameArbitrationFieldComparison (pBase, 1);
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetEntireFrameArbitrationFieldComparison (pBase, 0);

  <bb 8> :
  # DEBUG BEGIN_STMT
  _3 = u32Options & 8;
  if (_3 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetProtocolException (pBase, 1);
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetProtocolException (pBase, 0);

  <bb 11> :
  # DEBUG BEGIN_STMT
  _4 = u32Options & 2;
  if (_4 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  _5 = pBase->MCR;
  _6 = _5 & 2048;
  if (_6 == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  FlexCAN_CanBitSampling (pBase, 1);
  goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  FlexCAN_CanBitSampling (pBase, 0);

  <bb 15> :
  # DEBUG BEGIN_STMT
  _7 = u32Options & 4;
  if (_7 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetBusOffAutorecovery (pBase, 1);
  goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetBusOffAutorecovery (pBase, 0);

  <bb 18> :
  # DEBUG BEGIN_STMT
  _8 = u32Options & 1;
  if (_8 != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetRemoteReqStore (pBase, 1);
  goto <bb 21>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetRemoteReqStore (pBase, 0);

  <bb 21> :
  # DEBUG BEGIN_STMT
  _9 = u32Options & 16;
  if (_9 != 0)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetEdgeFilter (pBase, 1);
  goto <bb 24>; [INV]

  <bb 23> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetEdgeFilter (pBase, 0);

  <bb 24> :
  return;

}


FlexCAN_IsMbOutOfRange (const struct FLEXCAN_Type * pBase, uint8 u8MbIndex, boolean bIsLegacyFifoEn, uint32 u32MaxMbNum)
{
  uint32 u32NumOfMbOccupiedByFiFo;
  uint32 u32NumOfFiFoElement;
  boolean ReturnValue;
  boolean D.7478;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ReturnValue = 0;
  # DEBUG BEGIN_STMT
  u32NumOfFiFoElement = 0;
  # DEBUG BEGIN_STMT
  u32NumOfMbOccupiedByFiFo = 0;
  # DEBUG BEGIN_STMT
  _1 = (unsigned char) u32MaxMbNum;
  if (u8MbIndex >= _1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  ReturnValue = 1;
  goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (bIsLegacyFifoEn != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _2 = pBase->CTRL2;
  _3 = _2 >> 24;
  u32NumOfFiFoElement = _3 & 15;
  # DEBUG BEGIN_STMT
  _4 = u32NumOfFiFoElement + 1;
  _5 = _4 * 8;
  _6 = _5 / 4;
  u32NumOfMbOccupiedByFiFo = _6 + 5;
  # DEBUG BEGIN_STMT
  _7 = (long unsigned int) u8MbIndex;
  if (u32NumOfMbOccupiedByFiFo >= _7)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  ReturnValue = 1;
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  ReturnValue = 0;

  <bb 8> :
  # DEBUG BEGIN_STMT
  D.7478 = ReturnValue;
  return D.7478;

}


FlexCAN_ReadRxFifo (const struct FLEXCAN_Type * base, struct Flexcan_Ip_MsgBuffType * rxFifo)
{
  uint8 can_real_payload;
  uint8 flexcan_mb_dlc_value;
  uint32 * msgData_32;
  const uint32 * flexcan_mb_data_32;
  const uint32 * flexcan_mb_id;
  const uint32 * flexcan_mb;
  uint32 MbWord;
  uint32 DataByte;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  base.14_1 = (long unsigned int) base;
  _2 = base.14_1 + 128;
  flexcan_mb = (const uint32 *) _2;
  # DEBUG BEGIN_STMT
  flexcan_mb_id = flexcan_mb + 4;
  # DEBUG BEGIN_STMT
  flexcan_mb_data_32 = flexcan_mb + 8;
  # DEBUG BEGIN_STMT
  msgData_32 = &rxFifo->data;
  # DEBUG BEGIN_STMT
  _3 = *flexcan_mb;
  _4 = _3 >> 16;
  _5 = (unsigned char) _4;
  flexcan_mb_dlc_value = _5 & 15;
  # DEBUG BEGIN_STMT
  can_real_payload = FlexCAN_ComputePayloadSize (flexcan_mb_dlc_value);
  # DEBUG BEGIN_STMT
  _6 = rxFifo != 0B;
  DevAssert (_6);
  # DEBUG BEGIN_STMT
  if (can_real_payload > 8)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  can_real_payload = 8;

  <bb 4> :
  # DEBUG BEGIN_STMT
  rxFifo->dataLen = can_real_payload;
  # DEBUG BEGIN_STMT
  _7 = *flexcan_mb;
  rxFifo->cs = _7;
  # DEBUG BEGIN_STMT
  _8 = rxFifo->cs;
  _9 = _8 & 2097152;
  if (_9 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _10 = *flexcan_mb_id;
  rxFifo->msgId = _10;
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _11 = *flexcan_mb_id;
  _12 = _11 >> 18;
  rxFifo->msgId = _12;

  <bb 7> :
  # DEBUG BEGIN_STMT
  _13 = base->RXFIR;
  _14 = (unsigned char) _13;
  rxFifo->id_hit = _14;
  # DEBUG BEGIN_STMT
  _15 = rxFifo->cs;
  _16 = _15 & 65535;
  rxFifo->time_stamp = _16;
  # DEBUG BEGIN_STMT
  DataByte = 0;
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _17 = DataByte >> 2;
  _18 = _17 * 4;
  _19 = flexcan_mb_data_32 + _18;
  MbWord = *_19;
  # DEBUG BEGIN_STMT
  _20 = MbWord >> 24;
  _21 = MbWord >> 8;
  _22 = _21 & 65280;
  _23 = _20 | _22;
  _24 = MbWord << 8;
  _25 = _24 & 16711680;
  _26 = _23 | _25;
  _27 = MbWord << 24;
  _28 = DataByte >> 2;
  _29 = _28 * 4;
  _30 = msgData_32 + _29;
  _31 = _26 | _27;
  *_30 = _31;
  # DEBUG BEGIN_STMT
  DataByte = DataByte + 4;

  <bb 9> :
  # DEBUG BEGIN_STMT
  _32 = (long unsigned int) can_real_payload;
  if (DataByte < _32)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  return;

}


FlexCAN_SetRxFifoFilter (struct FLEXCAN_Type * base, Flexcan_Ip_RxFifoIdElementFormatType idFormat, const struct Flexcan_Ip_IdTableType * idFilterTable)
{
  volatile uint32 * FilterTable;
  uint32 Val;
  uint32 Val2;
  uint32 Val1;
  uint32 NumOfFilters;
  uint32 j;
  uint32 i;
  int iftmp.13;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Val1 = 0;
  Val2 = 0;
  Val = 0;
  # DEBUG BEGIN_STMT
  base.12_1 = (long unsigned int) base;
  _2 = base.12_1 + 224;
  FilterTable = (volatile uint32 *) _2;
  # DEBUG BEGIN_STMT
  if (idFilterTable != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (idFormat == 3)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.13 = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.13 = 0;

  <bb 6> :
  _3 = (_Bool) iftmp.13;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  _4 = base->CTRL2;
  _5 = _4 >> 24;
  NumOfFilters = _5 & 15;
  # DEBUG BEGIN_STMT
  switch (idFormat) <default: <L46> [INV], case 0: <L4> [INV], case 1: <L13> [INV], case 2: <L27> [INV], case 3: <L43> [INV]>

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13 ();
  # DEBUG BEGIN_STMT
  _6 = base->MCR;
  _7 = _6 & 4294966527;
  base->MCR = _7;
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13 ();
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 14>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Val = 0;
  # DEBUG BEGIN_STMT
  _8 = i * 8;
  _9 = idFilterTable + _8;
  _10 = _9->isRemoteFrame;
  if (_10 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Val = 2147483648;

  <bb 10> :
  # DEBUG BEGIN_STMT
  _11 = i * 8;
  _12 = idFilterTable + _11;
  _13 = _12->isExtendedFrame;
  if (_13 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Val = Val | 1073741824;
  # DEBUG BEGIN_STMT
  _14 = i * 8;
  _15 = idFilterTable + _14;
  _16 = _15->id;
  _17 = _16 << 1;
  _18 = _17 & 1073741823;
  _19 = i * 4;
  _20 = FilterTable + _19;
  _21 = Val + _18;
  *_20 = _21;
  goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _22 = i * 8;
  _23 = idFilterTable + _22;
  _24 = _23->id;
  _25 = _24 << 19;
  _26 = _25 & 1073217536;
  _27 = i * 4;
  _28 = FilterTable + _27;
  _29 = Val + _26;
  *_28 = _29;

  <bb 13> :
  # DEBUG BEGIN_STMT
  i = i + 1;

  <bb 14> :
  # DEBUG BEGIN_STMT
  _30 = NumOfFilters + 1;
  _31 = _30 * 8;
  if (i < _31)
    goto <bb 8>; [INV]
  else
    goto <bb 44>; [INV]

  <bb 15> :
<L13>:
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13 ();
  # DEBUG BEGIN_STMT
  _32 = base->MCR;
  _33 = _32 & 4294966527;
  _34 = _33 | 256;
  base->MCR = _34;
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13 ();
  # DEBUG BEGIN_STMT
  j = 0;
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 27>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  Val1 = 0;
  # DEBUG BEGIN_STMT
  Val2 = 0;
  # DEBUG BEGIN_STMT
  _35 = j * 8;
  _36 = idFilterTable + _35;
  _37 = _36->isRemoteFrame;
  if (_37 != 0)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  Val1 = 2147483648;

  <bb 18> :
  # DEBUG BEGIN_STMT
  _38 = j + 1;
  _39 = _38 * 8;
  _40 = idFilterTable + _39;
  _41 = _40->isRemoteFrame;
  if (_41 != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  Val2 = 32768;

  <bb 20> :
  # DEBUG BEGIN_STMT
  _42 = j * 8;
  _43 = idFilterTable + _42;
  _44 = _43->isExtendedFrame;
  if (_44 != 0)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  Val1 = Val1 | 1073741824;
  # DEBUG BEGIN_STMT
  _45 = j * 8;
  _46 = idFilterTable + _45;
  _47 = _46->id;
  _48 = _47 >> 15;
  _49 = _48 << 16;
  _50 = _49 & 1073676288;
  _51 = i * 4;
  _52 = FilterTable + _51;
  _53 = Val1 + _50;
  *_52 = _53;
  goto <bb 23>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  _54 = j * 8;
  _55 = idFilterTable + _54;
  _56 = _55->id;
  _57 = _56 << 19;
  _58 = _57 & 1073217536;
  _59 = i * 4;
  _60 = FilterTable + _59;
  _61 = Val1 + _58;
  *_60 = _61;

  <bb 23> :
  # DEBUG BEGIN_STMT
  _62 = j + 1;
  _63 = _62 * 8;
  _64 = idFilterTable + _63;
  _65 = _64->isExtendedFrame;
  if (_65 != 0)
    goto <bb 24>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  Val2 = Val2 | 16384;
  # DEBUG BEGIN_STMT
  _66 = i * 4;
  _67 = FilterTable + _66;
  _68 = *_67;
  _69 = j + 1;
  _70 = _69 * 8;
  _71 = idFilterTable + _70;
  _72 = _71->id;
  _73 = _72 >> 15;
  _74 = _73 & 16383;
  _75 = Val2 + _74;
  _76 = i * 4;
  _77 = FilterTable + _76;
  _78 = _68 | _75;
  *_77 = _78;
  goto <bb 26>; [INV]

  <bb 25> :
  # DEBUG BEGIN_STMT
  _79 = i * 4;
  _80 = FilterTable + _79;
  _81 = *_80;
  _82 = j + 1;
  _83 = _82 * 8;
  _84 = idFilterTable + _83;
  _85 = _84->id;
  _86 = _85 << 3;
  _87 = _86 & 16376;
  _88 = Val2 + _87;
  _89 = i * 4;
  _90 = FilterTable + _89;
  _91 = _81 | _88;
  *_90 = _91;

  <bb 26> :
  # DEBUG BEGIN_STMT
  j = j + 2;
  # DEBUG BEGIN_STMT
  i = i + 1;

  <bb 27> :
  # DEBUG BEGIN_STMT
  _92 = NumOfFilters + 1;
  _93 = _92 * 8;
  if (i < _93)
    goto <bb 16>; [INV]
  else
    goto <bb 44>; [INV]

  <bb 28> :
<L27>:
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13 ();
  # DEBUG BEGIN_STMT
  _94 = base->MCR;
  _95 = _94 & 4294966527;
  _96 = _95 | 512;
  base->MCR = _96;
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13 ();
  # DEBUG BEGIN_STMT
  j = 0;
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 42>; [INV]

  <bb 29> :
  # DEBUG BEGIN_STMT
  _97 = j * 8;
  _98 = idFilterTable + _97;
  _99 = _98->isExtendedFrame;
  if (_99 != 0)
    goto <bb 30>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 30> :
  # DEBUG BEGIN_STMT
  _100 = j * 8;
  _101 = idFilterTable + _100;
  _102 = _101->id;
  _103 = _102 >> 21;
  _104 = _103 << 24;
  _105 = i * 4;
  _106 = FilterTable + _105;
  _107 = Val1 + _104;
  *_106 = _107;
  goto <bb 32>; [INV]

  <bb 31> :
  # DEBUG BEGIN_STMT
  _108 = j * 8;
  _109 = idFilterTable + _108;
  _110 = _109->id;
  _111 = _110 >> 3;
  _112 = _111 << 24;
  _113 = i * 4;
  _114 = FilterTable + _113;
  _115 = Val1 + _112;
  *_114 = _115;

  <bb 32> :
  # DEBUG BEGIN_STMT
  _116 = j + 1;
  _117 = _116 * 8;
  _118 = idFilterTable + _117;
  _119 = _118->isExtendedFrame;
  if (_119 != 0)
    goto <bb 33>; [INV]
  else
    goto <bb 34>; [INV]

  <bb 33> :
  # DEBUG BEGIN_STMT
  _120 = i * 4;
  _121 = FilterTable + _120;
  _122 = *_121;
  _123 = j + 1;
  _124 = _123 * 8;
  _125 = idFilterTable + _124;
  _126 = _125->id;
  _127 = _126 >> 21;
  _128 = _127 << 16;
  _129 = _128 & 16711680;
  _130 = Val1 + _129;
  _131 = i * 4;
  _132 = FilterTable + _131;
  _133 = _122 | _130;
  *_132 = _133;
  goto <bb 35>; [INV]

  <bb 34> :
  # DEBUG BEGIN_STMT
  _134 = i * 4;
  _135 = FilterTable + _134;
  _136 = *_135;
  _137 = j + 1;
  _138 = _137 * 8;
  _139 = idFilterTable + _138;
  _140 = _139->id;
  _141 = _140 >> 3;
  _142 = _141 << 16;
  _143 = _142 & 16711680;
  _144 = Val1 + _143;
  _145 = i * 4;
  _146 = FilterTable + _145;
  _147 = _136 | _144;
  *_146 = _147;

  <bb 35> :
  # DEBUG BEGIN_STMT
  _148 = j + 2;
  _149 = _148 * 8;
  _150 = idFilterTable + _149;
  _151 = _150->isExtendedFrame;
  if (_151 != 0)
    goto <bb 36>; [INV]
  else
    goto <bb 37>; [INV]

  <bb 36> :
  # DEBUG BEGIN_STMT
  _152 = i * 4;
  _153 = FilterTable + _152;
  _154 = *_153;
  _155 = j + 2;
  _156 = _155 * 8;
  _157 = idFilterTable + _156;
  _158 = _157->id;
  _159 = _158 >> 21;
  _160 = _159 << 8;
  _161 = _160 & 65535;
  _162 = Val1 + _161;
  _163 = i * 4;
  _164 = FilterTable + _163;
  _165 = _154 | _162;
  *_164 = _165;
  goto <bb 38>; [INV]

  <bb 37> :
  # DEBUG BEGIN_STMT
  _166 = i * 4;
  _167 = FilterTable + _166;
  _168 = *_167;
  _169 = j + 2;
  _170 = _169 * 8;
  _171 = idFilterTable + _170;
  _172 = _171->id;
  _173 = _172 >> 3;
  _174 = _173 << 8;
  _175 = _174 & 65535;
  _176 = Val1 + _175;
  _177 = i * 4;
  _178 = FilterTable + _177;
  _179 = _168 | _176;
  *_178 = _179;

  <bb 38> :
  # DEBUG BEGIN_STMT
  _180 = j + 3;
  _181 = _180 * 8;
  _182 = idFilterTable + _181;
  _183 = _182->isExtendedFrame;
  if (_183 != 0)
    goto <bb 39>; [INV]
  else
    goto <bb 40>; [INV]

  <bb 39> :
  # DEBUG BEGIN_STMT
  _184 = i * 4;
  _185 = FilterTable + _184;
  _186 = *_185;
  _187 = j + 3;
  _188 = _187 * 8;
  _189 = idFilterTable + _188;
  _190 = _189->id;
  _191 = _190 >> 21;
  _192 = _191 & 255;
  _193 = Val1 + _192;
  _194 = i * 4;
  _195 = FilterTable + _194;
  _196 = _186 | _193;
  *_195 = _196;
  goto <bb 41>; [INV]

  <bb 40> :
  # DEBUG BEGIN_STMT
  _197 = i * 4;
  _198 = FilterTable + _197;
  _199 = *_198;
  _200 = j + 3;
  _201 = _200 * 8;
  _202 = idFilterTable + _201;
  _203 = _202->id;
  _204 = _203 >> 3;
  _205 = _204 & 255;
  _206 = Val1 + _205;
  _207 = i * 4;
  _208 = FilterTable + _207;
  _209 = _199 | _206;
  *_208 = _209;

  <bb 41> :
  # DEBUG BEGIN_STMT
  j = j + 4;
  # DEBUG BEGIN_STMT
  i = i + 1;

  <bb 42> :
  # DEBUG BEGIN_STMT
  _210 = NumOfFilters + 1;
  _211 = _210 * 8;
  if (i < _211)
    goto <bb 29>; [INV]
  else
    goto <bb 44>; [INV]

  <bb 43> :
<L43>:
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13 ();
  # DEBUG BEGIN_STMT
  _212 = base->MCR;
  _213 = _212 | 768;
  base->MCR = _213;
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13 ();
  # DEBUG BEGIN_STMT

  <bb 44> :
<L46>:
  return;

}


FlexCAN_SetOperationMode (struct FLEXCAN_Type * base, Flexcan_Ip_ModesType mode)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  switch (mode) <default: <L5> [INV], case 0: <L0> [INV], case 1: <L1> [INV], case 2: <L2> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  _1 = base->CTRL1;
  _2 = _1 & 4294967287;
  base->CTRL1 = _2;
  # DEBUG BEGIN_STMT
  _3 = base->CTRL1;
  _4 = _3 & 4294963199;
  base->CTRL1 = _4;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  _5 = base->CTRL1;
  _6 = _5 | 8;
  base->CTRL1 = _6;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  _7 = base->CTRL1;
  _8 = _7 | 4096;
  base->CTRL1 = _8;
  # DEBUG BEGIN_STMT
  _9 = base->CTRL1;
  _10 = _9 & 4294967287;
  base->CTRL1 = _10;
  # DEBUG BEGIN_STMT
  FlexCAN_SetSelfReception (base, 1);
  # DEBUG BEGIN_STMT

  <bb 6> :
<L5>:
  return;

}


FlexCAN_SetMaxMsgBuffNum (struct FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
  Flexcan_Ip_StatusType Status;
  uint32 ValEndRam;
  uint32 ValEndMb;
  uint8 Can_Real_Payload;
  uint8 Arbitration_Field_Size;
  volatile uint8 * Flexcan_Mb_Data;
  volatile uint32 * Flexcan_Mb_Id;
  volatile uint32 * Flexcan_Mb;
  const uint32 * ValEndMbPointer;
  const uint32 * RAM;
  uint32 DataByte;
  uint8 MsgBuffIdx;
  Flexcan_Ip_StatusType D.7425;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  base.8_1 = (long unsigned int) base;
  _2 = base.8_1 + 128;
  RAM = (const uint32 *) _2;
  # DEBUG BEGIN_STMT
  ValEndMbPointer = 0B;
  # DEBUG BEGIN_STMT
  Flexcan_Mb = 0B;
  # DEBUG BEGIN_STMT
  Flexcan_Mb_Id = 0B;
  # DEBUG BEGIN_STMT
  Flexcan_Mb_Data = 0B;
  # DEBUG BEGIN_STMT
  Arbitration_Field_Size = 8;
  # DEBUG BEGIN_STMT
  _3 = maxMsgBuffNum + 4294967295;
  Can_Real_Payload = FlexCAN_GetMbPayloadSize (base, _3);
  # DEBUG BEGIN_STMT
  ValEndMb = 0;
  # DEBUG BEGIN_STMT
  ValEndRam = 0;
  # DEBUG BEGIN_STMT
  Status = 0;
  # DEBUG BEGIN_STMT
  _4 = maxMsgBuffNum != 0;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = maxMsgBuffNum + 4294967295;
  ValEndMbPointer = FlexCAN_GetMsgBuffRegion (base, _5);
  # DEBUG BEGIN_STMT
  _6 = (long unsigned int) Can_Real_Payload;
  ValEndMbPointer.9_7 = (long unsigned int) ValEndMbPointer;
  _8 = _6 + ValEndMbPointer.9_7;
  _9 = (long unsigned int) Arbitration_Field_Size;
  ValEndMb = _8 + _9;
  # DEBUG BEGIN_STMT
  _10 = RAM + 512;
  ValEndRam = (uint32) _10;
  # DEBUG BEGIN_STMT
  if (ValEndMb > ValEndRam)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _11 = FlexCAN_GetMaxMbNum (base);
  if (maxMsgBuffNum > _11)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Status = 4;

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (Status == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _12 = base->MCR;
  _13 = _12 & 4294967168;
  _14 = maxMsgBuffNum + 4294967295;
  _15 = _14 & 127;
  _16 = _13 | _15;
  base->MCR = _16;
  # DEBUG BEGIN_STMT
  _17 = base->MCR;
  _18 = _17 & 536870912;
  if (_18 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  MsgBuffIdx = 0;
  goto <bb 12>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _19 = (long unsigned int) MsgBuffIdx;
  Flexcan_Mb = FlexCAN_GetMsgBuffRegion (base, _19);
  # DEBUG BEGIN_STMT
  Flexcan_Mb_Id = Flexcan_Mb + 4;
  # DEBUG BEGIN_STMT
  Flexcan_Mb_Data = Flexcan_Mb + 8;
  # DEBUG BEGIN_STMT
  *Flexcan_Mb = 0;
  # DEBUG BEGIN_STMT
  *Flexcan_Mb_Id = 0;
  # DEBUG BEGIN_STMT
  _20 = (long unsigned int) MsgBuffIdx;
  Can_Real_Payload = FlexCAN_GetMbPayloadSize (base, _20);
  # DEBUG BEGIN_STMT
  DataByte = 0;
  goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _21 = Flexcan_Mb_Data + DataByte;
  *_21 = 0;
  # DEBUG BEGIN_STMT
  DataByte = DataByte + 1;

  <bb 10> :
  # DEBUG BEGIN_STMT
  _22 = (long unsigned int) Can_Real_Payload;
  if (DataByte < _22)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  MsgBuffIdx.10_23 = MsgBuffIdx;
  MsgBuffIdx = MsgBuffIdx.10_23 + 1;

  <bb 12> :
  # DEBUG BEGIN_STMT
  _24 = (long unsigned int) MsgBuffIdx;
  if (maxMsgBuffNum > _24)
    goto <bb 8>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  D.7425 = Status;
  return D.7425;

}


FlexCAN_SetTxMsgBuff (volatile uint32 * const pMbAddr, const struct Flexcan_Ip_MsbuffCodeStatusType * cs, uint32 msgId, const uint8 * msgData, const boolean isRemote)
{
  const uint32 * MsgData_32;
  volatile uint32 * Flexcan_Mb_Data_32;
  volatile uint8 * Flexcan_Mb_Data;
  volatile uint32 * Flexcan_Mb_Id;
  volatile uint32 * Flexcan_Mb;
  uint8 Payload_Size;
  uint8 Dlc_Value;
  uint32 DataByte;
  uint32 Flexcan_Mb_Config;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Flexcan_Mb_Config = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Flexcan_Mb = pMbAddr;
  # DEBUG BEGIN_STMT
  Flexcan_Mb_Id = Flexcan_Mb + 4;
  # DEBUG BEGIN_STMT
  Flexcan_Mb_Data = Flexcan_Mb + 8;
  # DEBUG BEGIN_STMT
  Flexcan_Mb_Data_32 = Flexcan_Mb + 8;
  # DEBUG BEGIN_STMT
  MsgData_32 = msgData;
  # DEBUG BEGIN_STMT
  _1 = cs != 0B;
  DevAssert (_1);
  # DEBUG BEGIN_STMT
  *Flexcan_Mb = 134217728;
  # DEBUG BEGIN_STMT
  *Flexcan_Mb_Id = 0;
  # DEBUG BEGIN_STMT
  _2 = cs->dataLen;
  _3 = (unsigned char) _2;
  Dlc_Value = FlexCAN_ComputeDLCValue (_3);
  # DEBUG BEGIN_STMT
  if (msgData != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  DataByte = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _4 = DataByte >> 2;
  _5 = _4 * 4;
  _6 = MsgData_32 + _5;
  _7 = *_6;
  _8 = _7 >> 24;
  _9 = DataByte >> 2;
  _10 = _9 * 4;
  _11 = MsgData_32 + _10;
  _12 = *_11;
  _13 = _12 >> 8;
  _14 = _13 & 65280;
  _15 = _8 | _14;
  _16 = DataByte >> 2;
  _17 = _16 * 4;
  _18 = MsgData_32 + _17;
  _19 = *_18;
  _20 = _19 << 8;
  _21 = _20 & 16711680;
  _22 = _15 | _21;
  _23 = DataByte >> 2;
  _24 = _23 * 4;
  _25 = MsgData_32 + _24;
  _26 = *_25;
  _27 = _26 << 24;
  _28 = DataByte >> 2;
  _29 = _28 * 4;
  _30 = Flexcan_Mb_Data_32 + _29;
  _31 = _22 | _27;
  *_30 = _31;
  # DEBUG BEGIN_STMT
  DataByte = DataByte + 4;

  <bb 5> :
  # DEBUG BEGIN_STMT
  _32 = cs->dataLen;
  _33 = _32 & 4294967292;
  if (DataByte < _33)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _34 = msgData + DataByte;
  _35 = DataByte ^ 3;
  _36 = Flexcan_Mb_Data + _35;
  _37 = *_34;
  *_36 = _37;
  # DEBUG BEGIN_STMT
  DataByte = DataByte + 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  _38 = cs->dataLen;
  if (DataByte < _38)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  Payload_Size = FlexCAN_ComputePayloadSize (Dlc_Value);
  # DEBUG BEGIN_STMT
  DataByte = cs->dataLen;
  goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _39 = DataByte ^ 3;
  _40 = Flexcan_Mb_Data + _39;
  _41 = cs->fd_padding;
  *_40 = _41;
  # DEBUG BEGIN_STMT
  DataByte = DataByte + 1;

  <bb 10> :
  # DEBUG BEGIN_STMT
  _42 = (long unsigned int) Payload_Size;
  if (DataByte < _42)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _43 = cs->msgIdType;
  if (_43 == 1)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _44 = *Flexcan_Mb_Id;
  _45 = _44 & 3758096384;
  *Flexcan_Mb_Id = _45;
  # DEBUG BEGIN_STMT
  _46 = *Flexcan_Mb_Id;
  _47 = msgId & 536870911;
  _48 = _46 | _47;
  *Flexcan_Mb_Id = _48;
  # DEBUG BEGIN_STMT
  Flexcan_Mb_Config = Flexcan_Mb_Config | 6291456;

  <bb 13> :
  # DEBUG BEGIN_STMT
  _49 = cs->msgIdType;
  if (_49 == 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _50 = *Flexcan_Mb_Id;
  _51 = _50 & 3758358527;
  *Flexcan_Mb_Id = _51;
  # DEBUG BEGIN_STMT
  _52 = *Flexcan_Mb_Id;
  _53 = msgId << 18;
  _54 = _53 & 536608768;
  _55 = _52 | _54;
  *Flexcan_Mb_Id = _55;
  # DEBUG BEGIN_STMT
  Flexcan_Mb_Config = Flexcan_Mb_Config & 4288675839;

  <bb 15> :
  # DEBUG BEGIN_STMT
  Flexcan_Mb_Config = Flexcan_Mb_Config & 4293984255;
  # DEBUG BEGIN_STMT
  _56 = (long unsigned int) Dlc_Value;
  _57 = _56 << 16;
  _58 = _57 & 983040;
  Flexcan_Mb_Config = Flexcan_Mb_Config | _58;
  # DEBUG BEGIN_STMT
  _59 = cs->code;
  if (_59 != 15)
    goto <bb 16>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _60 = cs->code;
  if (_60 == 28)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  Flexcan_Mb_Config = Flexcan_Mb_Config | 1048576;
  goto <bb 20>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  if (isRemote != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  Flexcan_Mb_Config = Flexcan_Mb_Config | 1048576;

  <bb 20> :
  # DEBUG BEGIN_STMT
  Flexcan_Mb_Config = Flexcan_Mb_Config & 4043309055;
  # DEBUG BEGIN_STMT
  _61 = cs->fd_enable;
  if (_61 != 0)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  _62 = cs->code;
  _63 = _62 << 24;
  _64 = _63 & 251658240;
  _65 = Flexcan_Mb_Config | _64;
  Flexcan_Mb_Config = _65 | 2147483648;
  # DEBUG BEGIN_STMT
  Flexcan_Mb_Config = Flexcan_Mb_Config & 4293918719;
  goto <bb 23>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  _66 = cs->code;
  _67 = _66 << 24;
  _68 = _67 & 251658240;
  Flexcan_Mb_Config = Flexcan_Mb_Config | _68;

  <bb 23> :
  # DEBUG BEGIN_STMT
  _69 = cs->enable_brs;
  if (_69 != 0)
    goto <bb 24>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 24> :
  # DEBUG BEGIN_STMT
  Flexcan_Mb_Config = Flexcan_Mb_Config | 1073741824;

  <bb 25> :
  # DEBUG BEGIN_STMT
  _70 = *Flexcan_Mb;
  _71 = Flexcan_Mb_Config | _70;
  *Flexcan_Mb = _71;

  <bb 26> :
  return;

}


FlexCAN_GetMsgBuff (const struct FLEXCAN_Type * base, uint32 msgBuffIdx, struct Flexcan_Ip_MsgBuffType * msgBuff)
{
  uint8 Payload_Size;
  uint8 Flexcan_Mb_Dlc_Value;
  uint32 MbWord;
  uint32 * MsgBuff_Data_32;
  const uint32 * Flexcan_Mb_Data_32;
  const uint8 * Flexcan_Mb_Data;
  const uint32 * Flexcan_Mb_Id;
  const uint32 * Flexcan_Mb;
  uint8 i;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Flexcan_Mb = FlexCAN_GetMsgBuffRegion (base, msgBuffIdx);
  # DEBUG BEGIN_STMT
  Flexcan_Mb_Id = Flexcan_Mb + 4;
  # DEBUG BEGIN_STMT
  Flexcan_Mb_Data = Flexcan_Mb + 8;
  # DEBUG BEGIN_STMT
  Flexcan_Mb_Data_32 = Flexcan_Mb + 8;
  # DEBUG BEGIN_STMT
  MsgBuff_Data_32 = &msgBuff->data;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = *Flexcan_Mb;
  _2 = _1 >> 16;
  _3 = (unsigned char) _2;
  Flexcan_Mb_Dlc_Value = _3 & 15;
  # DEBUG BEGIN_STMT
  Payload_Size = FlexCAN_ComputePayloadSize (Flexcan_Mb_Dlc_Value);
  # DEBUG BEGIN_STMT
  _4 = msgBuff != 0B;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = FlexCAN_GetMbPayloadSize (base, msgBuffIdx);
  if (Payload_Size > _5)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Payload_Size = FlexCAN_GetMbPayloadSize (base, msgBuffIdx);

  <bb 4> :
  # DEBUG BEGIN_STMT
  msgBuff->dataLen = Payload_Size;
  # DEBUG BEGIN_STMT
  _6 = *Flexcan_Mb;
  msgBuff->cs = _6;
  # DEBUG BEGIN_STMT
  _7 = msgBuff->cs;
  _8 = _7 & 2097152;
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _9 = *Flexcan_Mb_Id;
  msgBuff->msgId = _9;
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _10 = *Flexcan_Mb_Id;
  _11 = _10 >> 18;
  msgBuff->msgId = _11;

  <bb 7> :
  # DEBUG BEGIN_STMT
  _12 = msgBuff->cs;
  _13 = _12 & 65535;
  msgBuff->time_stamp = _13;
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _14 = i >> 2;
  _15 = (unsigned int) _14;
  _16 = _15 * 4;
  _17 = Flexcan_Mb_Data_32 + _16;
  MbWord = *_17;
  # DEBUG BEGIN_STMT
  _18 = MbWord >> 24;
  _19 = MbWord >> 8;
  _20 = _19 & 65280;
  _21 = _18 | _20;
  _22 = MbWord << 8;
  _23 = _22 & 16711680;
  _24 = _21 | _23;
  _25 = MbWord << 24;
  _26 = i >> 2;
  _27 = (unsigned int) _26;
  _28 = _27 * 4;
  _29 = MsgBuff_Data_32 + _28;
  _30 = _24 | _25;
  *_29 = _30;
  # DEBUG BEGIN_STMT
  i = i + 4;

  <bb 9> :
  # DEBUG BEGIN_STMT
  _31 = (unsigned int) i;
  _32 = (unsigned int) Payload_Size;
  _33 = _32 & 4294967292;
  if (_31 < _33)
    goto <bb 8>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _34 = i ^ 3;
  _35 = (sizetype) _34;
  _36 = Flexcan_Mb_Data + _35;
  _37 = (int) i;
  _38 = *_36;
  msgBuff->data[_37] = _38;
  # DEBUG BEGIN_STMT
  i.7_39 = i;
  i = i.7_39 + 1;

  <bb 11> :
  # DEBUG BEGIN_STMT
  if (i < Payload_Size)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  return;

}


FlexCAN_GetMsgBuffTimestamp (const struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  const uint32 * Flexcan_Mb;
  uint32 TimeStamp;
  uint32 D.7382;

  <bb 2> :
  # DEBUG BEGIN_STMT
  TimeStamp = 0;
  # DEBUG BEGIN_STMT
  Flexcan_Mb = FlexCAN_GetMsgBuffRegion (base, msgBuffIdx);
  # DEBUG BEGIN_STMT
  _1 = *Flexcan_Mb;
  TimeStamp = _1 & 65535;
  # DEBUG BEGIN_STMT
  D.7382 = TimeStamp;
  return D.7382;

}


FlexCAN_SetRxMsgBuff (const struct FLEXCAN_Type * base, uint32 msgBuffIdx, const struct Flexcan_Ip_MsbuffCodeStatusType * cs, uint32 msgId)
{
  volatile uint32 * flexcan_mb_id;
  volatile uint32 * flexcan_mb;

  <bb 2> :
  # DEBUG BEGIN_STMT
  flexcan_mb = FlexCAN_GetMsgBuffRegion (base, msgBuffIdx);
  # DEBUG BEGIN_STMT
  flexcan_mb_id = flexcan_mb + 4;
  # DEBUG BEGIN_STMT
  _1 = cs != 0B;
  DevAssert (_1);
  # DEBUG BEGIN_STMT
  *flexcan_mb = 0;
  # DEBUG BEGIN_STMT
  *flexcan_mb_id = 0;
  # DEBUG BEGIN_STMT
  _2 = cs->msgIdType;
  if (_2 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _3 = *flexcan_mb;
  _4 = _3 | 2097152;
  *flexcan_mb = _4;
  # DEBUG BEGIN_STMT
  _5 = *flexcan_mb;
  _6 = _5 & 4290772991;
  *flexcan_mb = _6;
  # DEBUG BEGIN_STMT
  _7 = *flexcan_mb_id;
  _8 = _7 & 3758096384;
  *flexcan_mb_id = _8;
  # DEBUG BEGIN_STMT
  _9 = *flexcan_mb_id;
  _10 = msgId & 536870911;
  _11 = _9 | _10;
  *flexcan_mb_id = _11;

  <bb 4> :
  # DEBUG BEGIN_STMT
  _12 = cs->msgIdType;
  if (_12 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _13 = *flexcan_mb;
  _14 = _13 & 4288675839;
  *flexcan_mb = _14;
  # DEBUG BEGIN_STMT
  _15 = *flexcan_mb_id;
  _16 = _15 & 3758358527;
  *flexcan_mb_id = _16;
  # DEBUG BEGIN_STMT
  _17 = *flexcan_mb_id;
  _18 = msgId << 18;
  _19 = _18 & 536608768;
  _20 = _17 | _19;
  *flexcan_mb_id = _20;

  <bb 6> :
  # DEBUG BEGIN_STMT
  _21 = cs->code;
  if (_21 != 15)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _22 = *flexcan_mb;
  _23 = _22 & 4043309055;
  *flexcan_mb = _23;
  # DEBUG BEGIN_STMT
  _24 = *flexcan_mb;
  _25 = cs->code;
  _26 = _25 << 24;
  _27 = _26 & 251658240;
  _28 = _24 | _27;
  *flexcan_mb = _28;

  <bb 8> :
  return;

}


FlexCAN_EnableInterrupts (struct FLEXCAN_Type * pBase, uint8 u8Instance)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) u8Instance;
  _2 = FlexCAN_Ip_au32ImaskBuff[_1][0];
  pBase->IMASK1 = _2;
  return;

}


FlexCAN_DisableInterrupts (struct FLEXCAN_Type * pBase)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  pBase->IMASK1 = 0;
  return;

}


FLEXCAN_ClearMsgBuffIntCmd (struct FLEXCAN_Type * pBase, uint8 u8Instance, uint32 mb_idx, boolean bIsIntActive)
{
  uint32 temp;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = mb_idx & 31;
  temp = 1 << _1;
  # DEBUG BEGIN_STMT
  if (mb_idx <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_11 ();
  # DEBUG BEGIN_STMT
  _2 = pBase->IMASK1;
  _3 = ~temp;
  _4 = (int) u8Instance;
  _5 = _2 & _3;
  FlexCAN_Ip_au32ImaskBuff[_4][0] = _5;
  # DEBUG BEGIN_STMT
  if (bIsIntActive != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _6 = (int) u8Instance;
  _7 = FlexCAN_Ip_au32ImaskBuff[_6][0];
  pBase->IMASK1 = _7;

  <bb 5> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_11 ();

  <bb 6> :
  return;

}


FlexCAN_SetMsgBuffIntCmd (struct FLEXCAN_Type * base, uint8 u8Instance, uint32 msgBuffIdx, boolean enable, boolean bIsIntActive)
{
  Flexcan_Ip_StatusType stat;
  uint32 temp;
  Flexcan_Ip_StatusType D.7370;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  stat = 0;
  # DEBUG BEGIN_STMT
  _1 = msgBuffIdx & 31;
  temp = 1 << _1;
  # DEBUG BEGIN_STMT
  if (msgBuffIdx <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  if (enable != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18 ();
  # DEBUG BEGIN_STMT
  _2 = (int) u8Instance;
  _3 = FlexCAN_Ip_au32ImaskBuff[_2][0];
  _4 = (int) u8Instance;
  _5 = temp | _3;
  FlexCAN_Ip_au32ImaskBuff[_4][0] = _5;
  # DEBUG BEGIN_STMT
  if (bIsIntActive != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _6 = (int) u8Instance;
  _7 = FlexCAN_Ip_au32ImaskBuff[_6][0];
  base->IMASK1 = _7;

  <bb 6> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18 ();
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18 ();
  # DEBUG BEGIN_STMT
  _8 = (int) u8Instance;
  _9 = FlexCAN_Ip_au32ImaskBuff[_8][0];
  _10 = ~temp;
  _11 = (int) u8Instance;
  _12 = _9 & _10;
  FlexCAN_Ip_au32ImaskBuff[_11][0] = _12;
  # DEBUG BEGIN_STMT
  _13 = (int) u8Instance;
  _14 = FlexCAN_Ip_au32ImaskBuff[_13][0];
  base->IMASK1 = _14;
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18 ();

  <bb 8> :
  # DEBUG BEGIN_STMT
  D.7370 = stat;
  return D.7370;

}


FlexCAN_LockRxMsgBuff (const struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  const uint32 * flexcan_mb;
  long unsigned int vol.6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  flexcan_mb = FlexCAN_GetMsgBuffRegion (base, msgBuffIdx);
  # DEBUG BEGIN_STMT
  vol.6 = *flexcan_mb;
  return;

}


FlexCAN_GetMbPayloadSize (const struct FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
  uint8 mb_size;
  uint8 i;
  uint8 maxMbBlockNum;
  uint8 can_real_payload;
  uint32 ramBlockSize;
  uint8 arbitration_field_size;
  uint8 D.7360;

  <bb 2> :
  # DEBUG BEGIN_STMT
  arbitration_field_size = 8;
  # DEBUG BEGIN_STMT
  ramBlockSize = 512;
  # DEBUG BEGIN_STMT
  can_real_payload = 8;
  # DEBUG BEGIN_STMT
  maxMbBlockNum = 0;
  # DEBUG BEGIN_STMT
  i = 0;
  # DEBUG BEGIN_STMT
  mb_size = 0;
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  can_real_payload = FlexCAN_GetPayloadSize (base, i);
  # DEBUG BEGIN_STMT
  mb_size = can_real_payload + arbitration_field_size;
  # DEBUG BEGIN_STMT
  _1 = (long unsigned int) mb_size;
  _2 = ramBlockSize / _1;
  _3 = (unsigned char) _2;
  maxMbBlockNum = maxMbBlockNum + _3;
  # DEBUG BEGIN_STMT
  _4 = (long unsigned int) maxMbBlockNum;
  if (maxMsgBuffNum < _4)
    goto <bb 6>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  i.5_5 = i;
  i = i.5_5 + 1;

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (i == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  D.7360 = can_real_payload;
  return D.7360;

}


FlexCAN_GetPayloadSize (const struct FLEXCAN_Type * base, uint8 mbdsrIdx)
{
  uint32 payloadSize;
  uint8 D.7279;

  <bb 2> :
  # DEBUG BEGIN_STMT
  payloadSize = 8;
  # DEBUG BEGIN_STMT
  _1 = FlexCAN_IsFDAvailable (base);
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = (int) mbdsrIdx;
  if (_2 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  _3 = base->FDCTRL;
  _4 = _3 >> 16;
  _5 = _4 & 3;
  payloadSize = 8 << _5;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  _6 = base->FDCTRL;
  _7 = _6 >> 16;
  _8 = _7 & 3;
  payloadSize = 8 << _8;
  # DEBUG BEGIN_STMT

  <bb 6> :
  # DEBUG BEGIN_STMT
  D.7279 = (uint8) payloadSize;
  return D.7279;

}


FlexCAN_SetPayloadSize (struct FLEXCAN_Type * base, const struct Flexcan_Ip_PayloadSizeType * payloadSize)
{
  uint32 tmp;
  int iftmp.3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = FlexCAN_IsFDEnabled (base);
  if (_1 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _2 = payloadSize->payloadBlock0;
  if (_2 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.3 = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.3 = 0;

  <bb 6> :
  _3 = (_Bool) iftmp.3;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsFDEnabled (base);
  if (_4 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  tmp = base->FDCTRL;
  # DEBUG BEGIN_STMT
  tmp = tmp & 4294770687;
  # DEBUG BEGIN_STMT
  _5 = payloadSize->payloadBlock0;
  _6 = _5 << 16;
  tmp = tmp | _6;
  # DEBUG BEGIN_STMT
  base->FDCTRL = tmp;

  <bb 8> :
  return;

}


FlexCAN_IsFDAvailable (const struct FLEXCAN_Type * base)
{
  boolean returnValue;
  static struct FLEXCAN_Type * const flexcanBase[1] = {1073889280B};
  uint32 i;
  boolean D.7345;

  <bb 2> :
  # DEBUG BEGIN_STMT
  i = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  returnValue = 0;
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = flexcanBase[i];
  if (base == _1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  returnValue = 1;
  # DEBUG BEGIN_STMT
  goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  i = i + 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (i == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  D.7345 = returnValue;
  return D.7345;

}


FlexCAN_EnableRxFifo (struct FLEXCAN_Type * base, uint32 numOfFilters)
{
  Flexcan_Ip_StatusType stat;
  uint16 noOfMbx;
  uint32 i;
  Flexcan_Ip_StatusType D.7341;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = FlexCAN_GetMaxMbNum (base);
  noOfMbx = (uint16) _1;
  # DEBUG BEGIN_STMT
  stat = 0;
  # DEBUG BEGIN_STMT
  _2 = base->MCR;
  _3 = _2 & 2048;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  stat = 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (stat == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _4 = base->MCR;
  _5 = _4 | 536870912;
  base->MCR = _5;
  # DEBUG BEGIN_STMT
  _6 = base->CTRL2;
  _7 = _6 & 4043309055;
  _8 = numOfFilters << 24;
  _9 = _8 & 251658240;
  _10 = _7 | _9;
  base->CTRL2 = _10;
  # DEBUG BEGIN_STMT
  base->RXFGMASK = 4294967295;
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  base->RXIMR[i] = 536870911;
  # DEBUG BEGIN_STMT
  i = i + 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  _11 = (long unsigned int) noOfMbx;
  if (i < _11)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  D.7341 = stat;
  return D.7341;

}


FlexCAN_Init (struct FLEXCAN_Type * base)
{
  Flexcan_Ip_StatusType returnResult;
  uint32 uS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  Flexcan_Ip_StatusType D.7334;
  long unsigned int D.7327;

  <bb 2> :
  # DEBUG BEGIN_STMT
  timeStart = 0;
  # DEBUG BEGIN_STMT
  timeElapsed = 0;
  # DEBUG BEGIN_STMT
  uS2Ticks = OsIf_MicrosToTicks (10000, 0);
  # DEBUG BEGIN_STMT
  returnResult = 0;
  # DEBUG BEGIN_STMT
  _1 = base->MCR;
  _2 = _1 | 33554432;
  base->MCR = _2;
  # DEBUG BEGIN_STMT
  _3 = OsIf_GetCounter (0);
  timeStart = _3;
  # DEBUG BEGIN_STMT
  goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  D.7327 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed = D.7327 + timeElapsed;
  # DEBUG BEGIN_STMT
  if (timeElapsed >= uS2Ticks)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  returnResult = 3;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _4 = base->MCR;
  _5 = _4 & 33554432;
  if (_5 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (returnResult == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _6 = base->MCR;
  _7 = _6 | 4096;
  base->MCR = _7;
  # DEBUG BEGIN_STMT
  FlexCAN_ClearRAM (base);
  # DEBUG BEGIN_STMT
  base->RXMGMASK = 4294967295;
  # DEBUG BEGIN_STMT
  base->RX14MASK = 4294967295;
  # DEBUG BEGIN_STMT
  base->RX15MASK = 4294967295;
  # DEBUG BEGIN_STMT
  base->IMASK1 = 0;
  # DEBUG BEGIN_STMT
  base->IFLAG1 = 4294967295;
  # DEBUG BEGIN_STMT
  base->ESR1 = 3866630;
  # DEBUG BEGIN_STMT
  base->CTRL1 = 0;
  # DEBUG BEGIN_STMT
  base->CTRL2 = 1048576;
  # DEBUG BEGIN_STMT
  base->CBT = 0;
  # DEBUG BEGIN_STMT
  _8 = FlexCAN_IsFDAvailable (base);
  if (_8 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  base->FDCBT = 0;
  # DEBUG BEGIN_STMT
  base->FDCTRL = 2147500288;

  <bb 9> :
  # DEBUG BEGIN_STMT
  D.7334 = returnResult;
  timeStart = {CLOBBER};
  return D.7334;

}


FlexCAN_SetErrIntCmd (struct FLEXCAN_Type * base, flexcan_int_type_t errType, boolean enable)
{
  uint32 temp;

  <bb 2> :
  # DEBUG BEGIN_STMT
  temp = errType;
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_06 ();
  # DEBUG BEGIN_STMT
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  if (errType == 16385)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _1 = base->CTRL2;
  _2 = _1 | 2147483648;
  base->CTRL2 = _2;
  # DEBUG BEGIN_STMT
  goto <bb 13>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (errType == 1024)
    goto <bb 7>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  if (errType == 2048)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _3 = base->MCR;
  _4 = _3 | 2097152;
  base->MCR = _4;

  <bb 8> :
  # DEBUG BEGIN_STMT
  _5 = base->CTRL1;
  _6 = temp | _5;
  base->CTRL1 = _6;
  goto <bb 13>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (errType == 16385)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _7 = base->CTRL2;
  _8 = _7 & 2147483647;
  base->CTRL2 = _8;
  # DEBUG BEGIN_STMT
  goto <bb 13>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _9 = base->CTRL1;
  _10 = ~temp;
  _11 = _9 & _10;
  base->CTRL1 = _11;
  # DEBUG BEGIN_STMT
  temp = base->CTRL1;
  # DEBUG BEGIN_STMT
  _12 = temp & 3072;
  if (_12 == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  _13 = base->MCR;
  _14 = _13 & 4292870143;
  base->MCR = _14;

  <bb 13> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_06 ();
  return;

}


FlexCAN_Disable (struct FLEXCAN_Type * base)
{
  Flexcan_Ip_StatusType returnResult;
  uint32 uS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  Flexcan_Ip_StatusType D.7310;
  long unsigned int D.7307;

  <bb 2> :
  # DEBUG BEGIN_STMT
  timeStart = 0;
  # DEBUG BEGIN_STMT
  timeElapsed = 0;
  # DEBUG BEGIN_STMT
  uS2Ticks = OsIf_MicrosToTicks (10000, 0);
  # DEBUG BEGIN_STMT
  returnResult = 0;
  # DEBUG BEGIN_STMT
  _1 = base->MCR;
  _2 = (signed int) _1;
  if (_2 >= 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_05 ();
  # DEBUG BEGIN_STMT
  _3 = base->MCR;
  _4 = _3 | 2147483648;
  base->MCR = _4;
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_05 ();
  # DEBUG BEGIN_STMT
  _5 = OsIf_GetCounter (0);
  timeStart = _5;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  D.7307 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed = D.7307 + timeElapsed;
  # DEBUG BEGIN_STMT
  if (timeElapsed >= uS2Ticks)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  returnResult = 3;
  # DEBUG BEGIN_STMT
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _6 = base->MCR;
  _7 = _6 & 1048576;
  if (_7 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  D.7310 = returnResult;
  timeStart = {CLOBBER};
  return D.7310;

}


FlexCAN_ExitFreezeMode (struct FLEXCAN_Type * base)
{
  Flexcan_Ip_StatusType returnValue;
  uint32 uS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  Flexcan_Ip_StatusType D.7302;
  long unsigned int D.7299;

  <bb 2> :
  # DEBUG BEGIN_STMT
  timeStart = 0;
  # DEBUG BEGIN_STMT
  timeElapsed = 0;
  # DEBUG BEGIN_STMT
  uS2Ticks = OsIf_MicrosToTicks (10000, 0);
  # DEBUG BEGIN_STMT
  returnValue = 0;
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_04 ();
  # DEBUG BEGIN_STMT
  _1 = base->MCR;
  _2 = _1 & 4026531839;
  base->MCR = _2;
  # DEBUG BEGIN_STMT
  _3 = base->MCR;
  _4 = _3 & 3221225471;
  base->MCR = _4;
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_04 ();
  # DEBUG BEGIN_STMT
  _5 = OsIf_GetCounter (0);
  timeStart = _5;
  # DEBUG BEGIN_STMT
  goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  D.7299 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed = D.7299 + timeElapsed;
  # DEBUG BEGIN_STMT
  if (timeElapsed >= uS2Ticks)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  returnValue = 3;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _6 = base->MCR;
  _7 = _6 & 16777216;
  if (_7 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  D.7302 = returnValue;
  timeStart = {CLOBBER};
  return D.7302;

}


FlexCAN_Enable (struct FLEXCAN_Type * base)
{
  Flexcan_Ip_StatusType returnValue;
  uint32 uS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  Flexcan_Ip_StatusType D.7296;
  long unsigned int D.7293;

  <bb 2> :
  # DEBUG BEGIN_STMT
  timeStart = 0;
  # DEBUG BEGIN_STMT
  timeElapsed = 0;
  # DEBUG BEGIN_STMT
  uS2Ticks = OsIf_MicrosToTicks (10000, 0);
  # DEBUG BEGIN_STMT
  returnValue = 0;
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_03 ();
  # DEBUG BEGIN_STMT
  _1 = base->MCR;
  _2 = _1 & 2147483647;
  base->MCR = _2;
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_03 ();
  # DEBUG BEGIN_STMT
  _3 = OsIf_GetCounter (0);
  timeStart = _3;
  # DEBUG BEGIN_STMT
  goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  D.7293 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed = D.7293 + timeElapsed;
  # DEBUG BEGIN_STMT
  if (timeElapsed >= uS2Ticks)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  returnValue = 3;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _4 = base->MCR;
  _5 = _4 & 16777216;
  if (_5 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  D.7296 = returnValue;
  timeStart = {CLOBBER};
  return D.7296;

}


FlexCAN_EnterFreezeMode (struct FLEXCAN_Type * base)
{
  Flexcan_Ip_StatusType returnResult;
  uint32 uS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  Flexcan_Ip_StatusType D.7290;
  long unsigned int D.7287;

  <bb 2> :
  # DEBUG BEGIN_STMT
  timeStart = 0;
  # DEBUG BEGIN_STMT
  timeElapsed = 0;
  # DEBUG BEGIN_STMT
  uS2Ticks = OsIf_MicrosToTicks (10000, 0);
  # DEBUG BEGIN_STMT
  returnResult = 0;
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_02 ();
  # DEBUG BEGIN_STMT
  _1 = base->MCR;
  _2 = _1 | 1073741824;
  base->MCR = _2;
  # DEBUG BEGIN_STMT
  _3 = base->MCR;
  _4 = _3 | 268435456;
  base->MCR = _4;
  # DEBUG BEGIN_STMT
  _5 = base->MCR;
  _6 = (signed int) _5;
  if (_6 < 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _7 = base->MCR;
  _8 = _7 & 2147483647;
  base->MCR = _8;

  <bb 4> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_02 ();
  # DEBUG BEGIN_STMT
  _9 = OsIf_GetCounter (0);
  timeStart = _9;
  # DEBUG BEGIN_STMT
  goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  D.7287 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed = D.7287 + timeElapsed;
  # DEBUG BEGIN_STMT
  if (timeElapsed >= uS2Ticks)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  returnResult = 3;
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _10 = base->MCR;
  _11 = _10 & 16777216;
  if (_11 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  D.7290 = returnResult;
  timeStart = {CLOBBER};
  return D.7290;

}


FlexCAN_GetMaxMbNum (const struct FLEXCAN_Type * base)
{
  static const uint32 maxMbNum[3] = {32, 16, 16};
  static struct FLEXCAN_Type * const flexcanBase[3] = {1073889280B, 1073893376B, 1073917952B};
  uint32 ret;
  uint32 i;
  uint32 D.7283;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ret = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = flexcanBase[i];
  if (base == _1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  ret = maxMbNum[i];

  <bb 5> :
  # DEBUG BEGIN_STMT
  i = i + 1;

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (i <= 2)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  D.7283 = ret;
  return D.7283;

}


FlexCAN_GetMsgBuffRegion (const struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  volatile uint32 * pAddressRet;
  volatile uint32 * RAM;
  uint8 payload_size;
  uint32 mb_index;
  uint8 maxMbNum;
  uint8 i;
  uint32 msgBuffIdxBackup;
  uint32 ramBlockOffset;
  uint32 ramBlockSize;
  uint8 mb_size;
  uint8 arbitration_field_size;
  volatile uint32 * D.7275;

  <bb 2> :
  # DEBUG BEGIN_STMT
  arbitration_field_size = 8;
  # DEBUG BEGIN_STMT
  mb_size = 0;
  # DEBUG BEGIN_STMT
  ramBlockSize = 512;
  # DEBUG BEGIN_STMT
  ramBlockOffset = 0;
  # DEBUG BEGIN_STMT
  msgBuffIdxBackup = msgBuffIdx;
  # DEBUG BEGIN_STMT
  i = 0;
  # DEBUG BEGIN_STMT
  maxMbNum = 0;
  # DEBUG BEGIN_STMT
  mb_index = 0;
  # DEBUG BEGIN_STMT
  payload_size = 0;
  # DEBUG BEGIN_STMT
  base.0_1 = (long unsigned int) base;
  _2 = base.0_1 + 128;
  RAM = (volatile uint32 *) _2;
  # DEBUG BEGIN_STMT
  pAddressRet = 0B;
  # DEBUG BEGIN_STMT
  i = 0;
  goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  payload_size = FlexCAN_GetPayloadSize (base, i);
  # DEBUG BEGIN_STMT
  mb_size = payload_size + arbitration_field_size;
  # DEBUG BEGIN_STMT
  _3 = (long unsigned int) mb_size;
  _4 = ramBlockSize / _3;
  maxMbNum = (uint8) _4;
  # DEBUG BEGIN_STMT
  _5 = (long unsigned int) maxMbNum;
  if (msgBuffIdxBackup < _5)
    goto <bb 6>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  ramBlockOffset = ramBlockOffset + 128;
  # DEBUG BEGIN_STMT
  _6 = (long unsigned int) maxMbNum;
  msgBuffIdxBackup = msgBuffIdxBackup - _6;
  # DEBUG BEGIN_STMT
  i.1_7 = i;
  i = i.1_7 + 1;

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (i == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _8 = (long unsigned int) maxMbNum;
  _9 = msgBuffIdxBackup % _8;
  _10 = mb_size >> 2;
  _11 = (long unsigned int) _10;
  _12 = _9 * _11;
  mb_index = ramBlockOffset + _12;
  # DEBUG BEGIN_STMT
  _13 = mb_index * 4;
  pAddressRet = RAM + _13;
  # DEBUG BEGIN_STMT
  D.7275 = pAddressRet;
  return D.7275;

}


FlexCAN_ComputePayloadSize (uint8 dlcValue)
{
  uint8 ret;
  uint8 D.7392;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ret = 8;
  # DEBUG BEGIN_STMT
  if (dlcValue <= 8)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  ret = dlcValue;
  goto <bb 12>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _1 = (int) dlcValue;
  switch (_1) <default: <L13> [INV], case 9: <L2> [INV], case 10: <L3> [INV], case 11: <L4> [INV], case 12: <L5> [INV], case 13: <L6> [INV], case 14: <L7> [INV], case 15: <L8> [INV]>

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  ret = 12;
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  ret = 16;
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  ret = 20;
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 8> :
<L5>:
  # DEBUG BEGIN_STMT
  ret = 24;
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 9> :
<L6>:
  # DEBUG BEGIN_STMT
  ret = 32;
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 10> :
<L7>:
  # DEBUG BEGIN_STMT
  ret = 48;
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 11> :
<L8>:
  # DEBUG BEGIN_STMT
  ret = 64;
  # DEBUG BEGIN_STMT

  <bb 12> :
<L13>:
  # DEBUG BEGIN_STMT
  D.7392 = ret;
  return D.7392;

}


FlexCAN_ClearRAM (struct FLEXCAN_Type * base)
{
  volatile uint32 * RAM;
  uint32 RXIMR_size;
  uint32 RAM_size;
  uint32 databyte;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = FlexCAN_GetMaxMbNum (base);
  RAM_size = _1 * 4;
  # DEBUG BEGIN_STMT
  RXIMR_size = FlexCAN_GetMaxMbNum (base);
  # DEBUG BEGIN_STMT
  base.2_2 = (long unsigned int) base;
  _3 = base.2_2 + 128;
  RAM = (volatile uint32 *) _3;
  # DEBUG BEGIN_STMT
  databyte = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _4 = databyte * 4;
  _5 = RAM + _4;
  *_5 = 0;
  # DEBUG BEGIN_STMT
  databyte = databyte + 1;

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (databyte < RAM_size)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  RAM = &base->RXIMR;
  # DEBUG BEGIN_STMT
  databyte = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _6 = databyte * 4;
  _7 = RAM + _6;
  *_7 = 0;
  # DEBUG BEGIN_STMT
  databyte = databyte + 1;

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (databyte < RXIMR_size)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  return;

}


FlexCAN_ComputeDLCValue (uint8 payloadSize)
{
  static const uint8 payload_code[65] = "\x00\x01\x02\x03\x04\x05\x06\x07\b\t\t\t\t\n\n\n\n\v\v\v\v\f\f\f\f\r\r\r\r\r\r\r\r\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f";
  uint32 ret;
  uint8 D.7416;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ret = 255;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (payloadSize <= 64)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = (int) payloadSize;
  _2 = payload_code[_1];
  ret = (uint32) _2;

  <bb 4> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  D.7416 = (uint8) ret;
  return D.7416;

}


FlexCAN_CanBitSampling (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.18;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = base->CTRL1;
  _2 = _1 & 4294967167;
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.18 = 128;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.18 = 0;

  <bb 5> :
  _3 = iftmp.18 | _2;
  base->CTRL1 = _3;
  return;

}


FlexCAN_SetEdgeFilter (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.21;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = base->CTRL2;
  _2 = _1 & 4294965247;
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.21 = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.21 = 2048;

  <bb 5> :
  _3 = iftmp.21 | _2;
  base->CTRL2 = _3;
  return;

}


FlexCAN_SetBusOffAutorecovery (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.19;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = base->CTRL1;
  _2 = _1 & 4294967231;
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.19 = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.19 = 64;

  <bb 5> :
  _3 = iftmp.19 | _2;
  base->CTRL1 = _3;
  return;

}


FlexCAN_SetRemoteReqStore (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.20;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = base->CTRL2;
  _2 = _1 & 4294836223;
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.20 = 131072;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.20 = 0;

  <bb 5> :
  _3 = iftmp.20 | _2;
  base->CTRL2 = _3;
  return;

}


FlexCAN_SetProtocolException (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.17;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = base->CTRL2;
  _2 = _1 & 4294950911;
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.17 = 16384;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.17 = 0;

  <bb 5> :
  _3 = iftmp.17 | _2;
  base->CTRL2 = _3;
  return;

}


FlexCAN_SetEntireFrameArbitrationFieldComparison (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.16;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = base->CTRL2;
  _2 = _1 & 4294901759;
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.16 = 65536;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.16 = 0;

  <bb 5> :
  _3 = iftmp.16 | _2;
  base->CTRL2 = _3;
  return;

}


FlexCAN_SetIsoCan (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.15;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = base->CTRL2;
  _2 = _1 & 4294963199;
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.15 = 4096;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.15 = 0;

  <bb 5> :
  _3 = iftmp.15 | _2;
  base->CTRL2 = _3;
  return;

}


FlexCAN_IsFDEnabled (const struct FLEXCAN_Type * base)
{
  boolean D.7357;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = base->MCR;
  _2 = _1 & 2048;
  D.7357 = _2 != 0;
  return D.7357;

}


FlexCAN_SetSelfReception (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.11;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = base->MCR;
  _2 = _1 & 4294836223;
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.11 = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.11 = 131072;

  <bb 5> :
  _3 = iftmp.11 | _2;
  base->MCR = _3;
  return;

}


DevAssert (volatile boolean x)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  x.4_1 = x;
  if (x.4_1 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 3>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  return;

}


