FlexCAN_Ip_ManualBusOffRecovery (uint8 Instance)
{
  Flexcan_Ip_StatusType RetVal;
  uint32 uS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  struct FLEXCAN_Type * Base;
  int _1;
  _Bool _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _35;
  Flexcan_Ip_StatusType _38;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) Instance_18(D);
  Base_20 = Flexcan_Ip_apxBase[_1];
  # DEBUG Base => Base_20
  # DEBUG BEGIN_STMT
  timeStart = 0;
  # DEBUG BEGIN_STMT
  timeElapsed_22 = 0;
  # DEBUG timeElapsed => timeElapsed_22
  # DEBUG BEGIN_STMT
  uS2Ticks_24 = OsIf_MicrosToTicks (10000, 0);
  # DEBUG uS2Ticks => uS2Ticks_24
  # DEBUG BEGIN_STMT
  RetVal_25 = 1;
  # DEBUG RetVal => RetVal_25
  # DEBUG BEGIN_STMT
  _2 = Instance_18(D) <= 2;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 ={v} Base_20->CTRL1;
  _4 = _3 & 64;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  RetVal_27 = 0;
  # DEBUG RetVal => RetVal_27
  # DEBUG BEGIN_STMT
  _5 ={v} Base_20->ESR1;
  _6 = _5 & 32;
  if (_6 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_20 ();
  # DEBUG BEGIN_STMT
  _7 ={v} Base_20->CTRL1;
  _8 = _7 & 4294967231;
  Base_20->CTRL1 ={v} _8;
  # DEBUG BEGIN_STMT
  _9 ={v} Base_20->CTRL1;
  _10 = _9 | 64;
  Base_20->CTRL1 ={v} _10;
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_20 ();
  # DEBUG BEGIN_STMT
  _11 = OsIf_GetCounter (0);
  timeStart = _11;
  # DEBUG BEGIN_STMT
  goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _35 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_36 = _35 + timeElapsed_14;
  # DEBUG timeElapsed => timeElapsed_36
  # DEBUG BEGIN_STMT
  if (timeElapsed_36 >= uS2Ticks_24)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  RetVal_37 = 3;
  # DEBUG RetVal => RetVal_37
  # DEBUG BEGIN_STMT
  goto <bb 8>; [INV]

  <bb 7> :
  # timeElapsed_14 = PHI <timeElapsed_22(4), timeElapsed_36(5)>
  # DEBUG timeElapsed => timeElapsed_14
  # DEBUG BEGIN_STMT
  _12 ={v} Base_20->ESR1;
  _13 = _12 & 32;
  if (_13 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # RetVal_15 = PHI <RetVal_25(2), RetVal_27(3), RetVal_37(6), RetVal_27(7)>
  # DEBUG RetVal => RetVal_15
  # DEBUG BEGIN_STMT
  _38 = RetVal_15;
  timeStart ={v} {CLOBBER};
  return _38;

}


FlexCAN_Ip_GetListenOnlyMode (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  int _1;
  boolean _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_2(D);
  base_4 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_4
  # DEBUG BEGIN_STMT
  _6 = FlexCAN_IsListenOnlyModeEnabled (base_4);
  return _6;

}


FlexCAN_Ip_SetListenOnlyMode_Privileged (uint8 instance, const boolean enable)
{
  boolean freeze;
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  int _2;
  _Bool _3;
  int _4;
  _Bool _5;
  _Bool _6;
  int _7;
  _Bool _8;
  Flexcan_Ip_StatusType _35;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance_15(D) <= 2;
  DevAssert (_1);
  # DEBUG BEGIN_STMT
  result_18 = 0;
  # DEBUG result => result_18
  # DEBUG BEGIN_STMT
  status_19 = 0;
  # DEBUG status => status_19
  # DEBUG BEGIN_STMT
  _2 = (int) instance_15(D);
  pBase_20 = Flexcan_Ip_apxBase[_2];
  # DEBUG pBase => pBase_20
  # DEBUG BEGIN_STMT
  _3 = FlexCAN_IsEnabled (pBase_20);
  _4 = (int) _3;
  _5 = _4 != 0;
  _6 = ~_5;
  _7 = (int) _6;
  disabled_22 = (boolean) _7;
  # DEBUG disabled => disabled_22
  # DEBUG BEGIN_STMT
  if (disabled_22 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result_24 = FlexCAN_Enable (pBase_20);
  # DEBUG result => result_24

  <bb 4> :
  # result_9 = PHI <result_18(2), result_24(3)>
  # DEBUG result => result_9
  # DEBUG BEGIN_STMT
  freeze_26 = FlexCAN_IsFreezeMode (pBase_20);
  # DEBUG freeze => freeze_26
  # DEBUG BEGIN_STMT
  _8 = ~freeze_26;
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result_9 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result_27 = 1;
  # DEBUG result => result_27

  <bb 7> :
  # result_10 = PHI <result_9(4), result_9(5), result_27(6)>
  # DEBUG result => result_10
  # DEBUG BEGIN_STMT
  if (result_10 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_10 ();
  # DEBUG BEGIN_STMT
  FlexCAN_SetListenOnlyMode (pBase_20, enable_29(D));
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_10 ();

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (disabled_22 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  status_33 = FlexCAN_Disable (pBase_20);
  # DEBUG status => status_33
  # DEBUG BEGIN_STMT
  if (status_33 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  result_34 = status_33;
  # DEBUG result => result_34

  <bb 12> :
  # result_11 = PHI <result_10(9), result_10(10), result_34(11)>
  # DEBUG result => result_11
  # DEBUG BEGIN_STMT
  _35 = result_11;
  return _35;

}


FlexCAN_Ip_SetRxMb15Mask_Privileged (uint8 instance, uint32 mask)
{
  boolean disabled;
  boolean freeze;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  int _2;
  _Bool _3;
  int _4;
  _Bool _5;
  _Bool _6;
  int _7;
  _Bool _8;
  Flexcan_Ip_StatusType _34;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance_15(D) <= 2;
  DevAssert (_1);
  # DEBUG BEGIN_STMT
  result_18 = 0;
  # DEBUG result => result_18
  # DEBUG BEGIN_STMT
  status_19 = 0;
  # DEBUG status => status_19
  # DEBUG BEGIN_STMT
  _2 = (int) instance_15(D);
  pBase_20 = Flexcan_Ip_apxBase[_2];
  # DEBUG pBase => pBase_20
  # DEBUG BEGIN_STMT
  freeze_21 = 0;
  # DEBUG freeze => freeze_21
  # DEBUG BEGIN_STMT
  _3 = FlexCAN_IsEnabled (pBase_20);
  _4 = (int) _3;
  _5 = _4 != 0;
  _6 = ~_5;
  _7 = (int) _6;
  disabled_23 = (boolean) _7;
  # DEBUG disabled => disabled_23
  # DEBUG BEGIN_STMT
  if (disabled_23 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result_25 = FlexCAN_Enable (pBase_20);
  # DEBUG result => result_25

  <bb 4> :
  # result_9 = PHI <result_18(2), result_25(3)>
  # DEBUG result => result_9
  # DEBUG BEGIN_STMT
  freeze_27 = FlexCAN_IsFreezeMode (pBase_20);
  # DEBUG freeze => freeze_27
  # DEBUG BEGIN_STMT
  _8 = ~freeze_27;
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result_9 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result_28 = 1;
  # DEBUG result => result_28

  <bb 7> :
  # result_10 = PHI <result_9(4), result_9(5), result_28(6)>
  # DEBUG result => result_10
  # DEBUG BEGIN_STMT
  if (result_10 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  pBase_20->RX15MASK ={v} mask_29(D);

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (disabled_23 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  status_32 = FlexCAN_Disable (pBase_20);
  # DEBUG status => status_32
  # DEBUG BEGIN_STMT
  if (status_32 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  result_33 = status_32;
  # DEBUG result => result_33

  <bb 12> :
  # result_11 = PHI <result_10(9), result_10(10), result_33(11)>
  # DEBUG result => result_11
  # DEBUG BEGIN_STMT
  _34 = result_11;
  return _34;

}


FlexCAN_Ip_SetRxMb14Mask_Privileged (uint8 instance, uint32 mask)
{
  boolean disabled;
  boolean freeze;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  int _2;
  _Bool _3;
  int _4;
  _Bool _5;
  _Bool _6;
  int _7;
  _Bool _8;
  Flexcan_Ip_StatusType _34;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance_15(D) <= 2;
  DevAssert (_1);
  # DEBUG BEGIN_STMT
  result_18 = 0;
  # DEBUG result => result_18
  # DEBUG BEGIN_STMT
  status_19 = 0;
  # DEBUG status => status_19
  # DEBUG BEGIN_STMT
  _2 = (int) instance_15(D);
  pBase_20 = Flexcan_Ip_apxBase[_2];
  # DEBUG pBase => pBase_20
  # DEBUG BEGIN_STMT
  freeze_21 = 0;
  # DEBUG freeze => freeze_21
  # DEBUG BEGIN_STMT
  _3 = FlexCAN_IsEnabled (pBase_20);
  _4 = (int) _3;
  _5 = _4 != 0;
  _6 = ~_5;
  _7 = (int) _6;
  disabled_23 = (boolean) _7;
  # DEBUG disabled => disabled_23
  # DEBUG BEGIN_STMT
  if (disabled_23 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result_25 = FlexCAN_Enable (pBase_20);
  # DEBUG result => result_25

  <bb 4> :
  # result_9 = PHI <result_18(2), result_25(3)>
  # DEBUG result => result_9
  # DEBUG BEGIN_STMT
  freeze_27 = FlexCAN_IsFreezeMode (pBase_20);
  # DEBUG freeze => freeze_27
  # DEBUG BEGIN_STMT
  _8 = ~freeze_27;
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result_9 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result_28 = 1;
  # DEBUG result => result_28

  <bb 7> :
  # result_10 = PHI <result_9(4), result_9(5), result_28(6)>
  # DEBUG result => result_10
  # DEBUG BEGIN_STMT
  if (result_10 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  pBase_20->RX14MASK ={v} mask_29(D);

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (disabled_23 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  status_32 = FlexCAN_Disable (pBase_20);
  # DEBUG status => status_32
  # DEBUG BEGIN_STMT
  if (status_32 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  result_33 = status_32;
  # DEBUG result => result_33

  <bb 12> :
  # result_11 = PHI <result_10(9), result_10(10), result_33(11)>
  # DEBUG result => result_11
  # DEBUG BEGIN_STMT
  _34 = result_11;
  return _34;

}


FlexCAN_Ip_AbortTransfer (uint8 u8Instance, uint8 mb_idx)
{
  Flexcan_Ip_StatusType result;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * pBase;
  _Bool _1;
  unsigned char _2;
  _Bool _3;
  int _4;
  int _5;
  int _6;
  <unnamed type> _7;
  long unsigned int _8;
  _Bool _9;
  int _10;
  <unnamed type> _11;
  int _12;
  <unnamed type> _13;
  Flexcan_Ip_StatusType _31;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = u8Instance_18(D) <= 2;
  DevAssert (_1);
  # DEBUG BEGIN_STMT
  _2 = mb_idx_21(D) + 224;
  _3 = _2 > 222;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  _4 = (int) u8Instance_18(D);
  pBase_23 = Flexcan_Ip_apxBase[_4];
  # DEBUG pBase => pBase_23
  # DEBUG BEGIN_STMT
  _5 = (int) u8Instance_18(D);
  state_24 = Flexcan_Ip_apxState[_5];
  # DEBUG state => state_24
  # DEBUG BEGIN_STMT
  result_25 = 0;
  # DEBUG result => result_25
  # DEBUG BEGIN_STMT
  if (mb_idx_21(D) <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _6 = (int) mb_idx_21(D);
  _7 ={v} state_24->mbs[_6].state;
  if (_7 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  result_30 = 5;
  # DEBUG result => result_30
  goto <bb 9>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _8 = (long unsigned int) mb_idx_21(D);
  _9 = state_24->isIntActive;
  FLEXCAN_ClearMsgBuffIntCmd (pBase_23, u8Instance_18(D), _8, _9);
  # DEBUG BEGIN_STMT
  _10 = (int) mb_idx_21(D);
  _11 ={v} state_24->mbs[_10].state;
  if (_11 == 2)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result_28 = FlexCAN_AbortTxTransfer (u8Instance_18(D), mb_idx_21(D));
  # DEBUG result => result_28

  <bb 7> :
  # result_14 = PHI <result_25(5), result_28(6)>
  # DEBUG result => result_14
  # DEBUG BEGIN_STMT
  _12 = (int) mb_idx_21(D);
  _13 ={v} state_24->mbs[_12].state;
  if (_13 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  FlexCAN_AbortRxTransfer (u8Instance_18(D), mb_idx_21(D));

  <bb 9> :
  # result_15 = PHI <result_25(2), result_30(4), result_14(7), result_14(8)>
  # DEBUG result => result_15
  # DEBUG BEGIN_STMT
  _31 = result_15;
  return _31;

}


FlexCAN_Ip_SetErrorInt_Privileged (uint8 u8Instance, Flexcan_Ip_ErrorIntType type, boolean enable)
{
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  int _2;
  _Bool _3;
  int _4;
  _Bool _5;
  _Bool _6;
  int _7;
  _Bool _8;
  _Bool _9;
  _Bool _10;
  _Bool _11;
  Flexcan_Ip_StatusType _43;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = u8Instance_18(D) <= 2;
  DevAssert (_1);
  # DEBUG BEGIN_STMT
  result_21 = 0;
  # DEBUG result => result_21
  # DEBUG BEGIN_STMT
  status_22 = 0;
  # DEBUG status => status_22
  # DEBUG BEGIN_STMT
  _2 = (int) u8Instance_18(D);
  pBase_23 = Flexcan_Ip_apxBase[_2];
  # DEBUG pBase => pBase_23
  # DEBUG BEGIN_STMT
  _3 = FlexCAN_IsEnabled (pBase_23);
  _4 = (int) _3;
  _5 = _4 != 0;
  _6 = ~_5;
  _7 = (int) _6;
  disabled_25 = (boolean) _7;
  # DEBUG disabled => disabled_25
  # DEBUG BEGIN_STMT
  if (disabled_25 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result_27 = FlexCAN_Enable (pBase_23);
  # DEBUG result => result_27

  <bb 4> :
  # result_12 = PHI <result_21(2), result_27(3)>
  # DEBUG result => result_12
  # DEBUG BEGIN_STMT
  if (result_12 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  switch (type_28(D)) <default: <L14> [INV], case 0: <L6> [INV], case 1: <L10> [INV], case 2: <L4> [INV], case 3: <L5> [INV], case 4: <L3> [INV]>

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  FlexCAN_SetErrIntCmd (pBase_23, 32768, enable_29(D));
  # DEBUG BEGIN_STMT
  goto <bb 16>; [INV]

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  FlexCAN_SetErrIntCmd (pBase_23, 16384, enable_29(D));
  # DEBUG BEGIN_STMT
  goto <bb 16>; [INV]

  <bb 8> :
<L5>:
  # DEBUG BEGIN_STMT
  FlexCAN_SetErrIntCmd (pBase_23, 16385, enable_29(D));
  # DEBUG BEGIN_STMT
  goto <bb 16>; [INV]

  <bb 9> :
<L6>:
  # DEBUG BEGIN_STMT
  _8 = FlexCAN_IsFreezeMode (pBase_23);
  _9 = ~_8;
  if (_9 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  result_38 = 1;
  # DEBUG result => result_38
  goto <bb 16>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetErrIntCmd (pBase_23, 1024, enable_29(D));
  goto <bb 16>; [INV]

  <bb 12> :
<L10>:
  # DEBUG BEGIN_STMT
  _10 = FlexCAN_IsFreezeMode (pBase_23);
  _11 = ~_10;
  if (_11 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  result_35 = 1;
  # DEBUG result => result_35
  goto <bb 16>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetErrIntCmd (pBase_23, 2048, enable_29(D));
  goto <bb 16>; [INV]

  <bb 15> :
<L14>:
  # DEBUG BEGIN_STMT
  DevAssert (0);
  # DEBUG BEGIN_STMT

  <bb 16> :
  # result_13 = PHI <result_12(4), result_12(6), result_12(7), result_12(8), result_12(11), result_12(14), result_12(15), result_38(10), result_35(13)>
  # DEBUG result => result_13
  # DEBUG BEGIN_STMT
  if (disabled_25 != 0)
    goto <bb 17>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  status_41 = FlexCAN_Disable (pBase_23);
  # DEBUG status => status_41
  # DEBUG BEGIN_STMT
  if (status_41 != 0)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  result_42 = status_41;
  # DEBUG result => result_42

  <bb 19> :
  # result_14 = PHI <result_13(16), result_13(17), result_42(18)>
  # DEBUG result => result_14
  # DEBUG BEGIN_STMT
  _43 = result_14;
  return _43;

}


FlexCAN_Ip_DisableInterrupts_Privileged (uint8 u8Instance)
{
  struct Flexcan_Ip_StateType * state;
  Flexcan_Ip_StatusType result;
  struct FLEXCAN_Type * pBase;
  int _1;
  int _2;
  _Bool _3;
  _Bool _4;
  Flexcan_Ip_StatusType _17;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) u8Instance_7(D);
  pBase_9 = Flexcan_Ip_apxBase[_1];
  # DEBUG pBase => pBase_9
  # DEBUG BEGIN_STMT
  result_10 = 1;
  # DEBUG result => result_10
  # DEBUG BEGIN_STMT
  _2 = (int) u8Instance_7(D);
  state_11 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_11
  # DEBUG BEGIN_STMT
  _3 = u8Instance_7(D) <= 2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsEnabled (pBase_9);
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  FlexCAN_DisableInterrupts (pBase_9);
  # DEBUG BEGIN_STMT
  state_11->isIntActive = 0;
  # DEBUG BEGIN_STMT
  result_16 = 0;
  # DEBUG result => result_16

  <bb 4> :
  # result_5 = PHI <result_10(2), result_16(3)>
  # DEBUG result => result_5
  # DEBUG BEGIN_STMT
  _17 = result_5;
  return _17;

}


FlexCAN_Ip_EnableInterrupts_Privileged (uint8 u8Instance)
{
  struct Flexcan_Ip_StateType * state;
  Flexcan_Ip_StatusType result;
  struct FLEXCAN_Type * pBase;
  int _1;
  int _2;
  _Bool _3;
  _Bool _4;
  Flexcan_Ip_StatusType _17;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) u8Instance_7(D);
  pBase_9 = Flexcan_Ip_apxBase[_1];
  # DEBUG pBase => pBase_9
  # DEBUG BEGIN_STMT
  result_10 = 1;
  # DEBUG result => result_10
  # DEBUG BEGIN_STMT
  _2 = (int) u8Instance_7(D);
  state_11 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_11
  # DEBUG BEGIN_STMT
  _3 = u8Instance_7(D) <= 2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsEnabled (pBase_9);
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  FlexCAN_EnableInterrupts (pBase_9, u8Instance_7(D));
  # DEBUG BEGIN_STMT
  state_11->isIntActive = 1;
  # DEBUG BEGIN_STMT
  result_16 = 0;
  # DEBUG result => result_16

  <bb 4> :
  # result_5 = PHI <result_10(2), result_16(3)>
  # DEBUG result => result_5
  # DEBUG BEGIN_STMT
  _17 = result_5;
  return _17;

}


FlexCAN_Ip_ClearBuffStatusFlag (uint8 instance, uint8 msgBuffIdx)
{
  struct FLEXCAN_Type * pBase;
  _Bool _1;
  int _2;
  long unsigned int _3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance_4(D) <= 2;
  DevAssert (_1);
  # DEBUG BEGIN_STMT
  _2 = (int) instance_4(D);
  pBase_7 = Flexcan_Ip_apxBase[_2];
  # DEBUG pBase => pBase_7
  # DEBUG BEGIN_STMT
  _3 = (long unsigned int) msgBuffIdx_8(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase_7, _3);
  return;

}


FlexCAN_Ip_GetBuffStatusFlag (uint8 instance, uint8 msgBuffIdx)
{
  const struct FLEXCAN_Type * pBase;
  boolean returnResult;
  _Bool _1;
  int _2;
  long unsigned int _3;
  unsigned char _4;
  boolean _13;

  <bb 2> :
  # DEBUG BEGIN_STMT
  returnResult_5 = 1;
  # DEBUG returnResult => returnResult_5
  # DEBUG BEGIN_STMT
  _1 = instance_6(D) <= 2;
  DevAssert (_1);
  # DEBUG BEGIN_STMT
  _2 = (int) instance_6(D);
  pBase_9 = Flexcan_Ip_apxBase[_2];
  # DEBUG pBase => pBase_9
  # DEBUG BEGIN_STMT
  _3 = (long unsigned int) msgBuffIdx_10(D);
  _4 = FlexCAN_GetBuffStatusFlag (pBase_9, _3);
  returnResult_12 = _4 == 1;
  # DEBUG returnResult => returnResult_12
  # DEBUG BEGIN_STMT
  _13 = returnResult_12;
  return _13;

}


FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged (uint8 instance, uint8 value)
{
  boolean freeze;
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  int _2;
  _Bool _3;
  int _4;
  _Bool _5;
  _Bool _6;
  int _7;
  _Bool _8;
  Flexcan_Ip_StatusType _35;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance_15(D) <= 2;
  DevAssert (_1);
  # DEBUG BEGIN_STMT
  result_18 = 0;
  # DEBUG result => result_18
  # DEBUG BEGIN_STMT
  status_19 = 0;
  # DEBUG status => status_19
  # DEBUG BEGIN_STMT
  _2 = (int) instance_15(D);
  pBase_20 = Flexcan_Ip_apxBase[_2];
  # DEBUG pBase => pBase_20
  # DEBUG BEGIN_STMT
  _3 = FlexCAN_IsEnabled (pBase_20);
  _4 = (int) _3;
  _5 = _4 != 0;
  _6 = ~_5;
  _7 = (int) _6;
  disabled_22 = (boolean) _7;
  # DEBUG disabled => disabled_22
  # DEBUG BEGIN_STMT
  if (disabled_22 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result_24 = FlexCAN_Enable (pBase_20);
  # DEBUG result => result_24

  <bb 4> :
  # result_9 = PHI <result_18(2), result_24(3)>
  # DEBUG result => result_9
  # DEBUG BEGIN_STMT
  freeze_26 = FlexCAN_IsFreezeMode (pBase_20);
  # DEBUG freeze => freeze_26
  # DEBUG BEGIN_STMT
  _8 = ~freeze_26;
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result_9 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result_27 = 1;
  # DEBUG result => result_27

  <bb 7> :
  # result_10 = PHI <result_9(4), result_9(5), result_27(6)>
  # DEBUG result => result_10
  # DEBUG BEGIN_STMT
  if (result_10 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_17 ();
  # DEBUG BEGIN_STMT
  FlexCAN_SetTxArbitrationStartDelay (pBase_20, value_29(D));
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_17 ();

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (disabled_22 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  status_33 = FlexCAN_Disable (pBase_20);
  # DEBUG status => status_33
  # DEBUG BEGIN_STMT
  if (status_33 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  result_34 = status_33;
  # DEBUG result => result_34

  <bb 12> :
  # result_11 = PHI <result_10(9), result_10(10), result_34(11)>
  # DEBUG result => result_11
  # DEBUG BEGIN_STMT
  _35 = result_11;
  return _35;

}


FlexCAN_Ip_SetTDCOffset_Privileged (uint8 instance, boolean enable, uint8 offset)
{
  boolean freeze;
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  int _2;
  _Bool _3;
  int _4;
  _Bool _5;
  _Bool _6;
  int _7;
  _Bool _8;
  _Bool _9;
  _Bool _10;
  Flexcan_Ip_StatusType _40;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance_17(D) <= 2;
  DevAssert (_1);
  # DEBUG BEGIN_STMT
  result_20 = 0;
  # DEBUG result => result_20
  # DEBUG BEGIN_STMT
  status_21 = 0;
  # DEBUG status => status_21
  # DEBUG BEGIN_STMT
  _2 = (int) instance_17(D);
  pBase_22 = Flexcan_Ip_apxBase[_2];
  # DEBUG pBase => pBase_22
  # DEBUG BEGIN_STMT
  _3 = FlexCAN_IsEnabled (pBase_22);
  _4 = (int) _3;
  _5 = _4 != 0;
  _6 = ~_5;
  _7 = (int) _6;
  disabled_24 = (boolean) _7;
  # DEBUG disabled => disabled_24
  # DEBUG BEGIN_STMT
  if (disabled_24 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result_26 = FlexCAN_Enable (pBase_22);
  # DEBUG result => result_26

  <bb 4> :
  # result_11 = PHI <result_20(2), result_26(3)>
  # DEBUG result => result_11
  # DEBUG BEGIN_STMT
  _8 = FlexCAN_IsFDAvailable (pBase_22);
  _9 = _8;
  DevAssert (_9);
  # DEBUG BEGIN_STMT
  freeze_30 = FlexCAN_IsFreezeMode (pBase_22);
  # DEBUG freeze => freeze_30
  # DEBUG BEGIN_STMT
  _10 = ~freeze_30;
  if (_10 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result_11 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result_31 = 1;
  # DEBUG result => result_31

  <bb 7> :
  # result_12 = PHI <result_11(4), result_11(5), result_31(6)>
  # DEBUG result => result_12
  # DEBUG BEGIN_STMT
  if (result_12 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_16 ();
  # DEBUG BEGIN_STMT
  FlexCAN_SetTDCOffset (pBase_22, enable_33(D), offset_34(D));
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_16 ();

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (disabled_24 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  status_38 = FlexCAN_Disable (pBase_22);
  # DEBUG status => status_38
  # DEBUG BEGIN_STMT
  if (status_38 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  result_39 = status_38;
  # DEBUG result => result_39

  <bb 12> :
  # result_13 = PHI <result_12(9), result_12(10), result_39(11)>
  # DEBUG result => result_13
  # DEBUG BEGIN_STMT
  _40 = result_13;
  return _40;

}


FlexCAN_Ip_GetBitrateFD (uint8 instance, struct Flexcan_Ip_TimeSegmentType * bitrate)
{
  boolean enhCbt;
  const struct FLEXCAN_Type * pBase;
  _Bool _1;
  _Bool _2;
  int _3;
  boolean _12;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance_4(D) <= 2;
  DevAssert (_1);
  # DEBUG BEGIN_STMT
  _2 = bitrate_7(D) != 0B;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = (int) instance_4(D);
  pBase_9 = Flexcan_Ip_apxBase[_3];
  # DEBUG pBase => pBase_9
  # DEBUG BEGIN_STMT
  enhCbt_10 = 0;
  # DEBUG enhCbt => enhCbt_10
  # DEBUG BEGIN_STMT
  FlexCAN_GetFDTimeSegments (pBase_9, bitrate_7(D));
  # DEBUG BEGIN_STMT
  _12 = enhCbt_10;
  return _12;

}


FlexCAN_Ip_SetBitrateCbt_Privileged (uint8 instance, const struct Flexcan_Ip_TimeSegmentType * bitrate, boolean bitRateSwitch)
{
  boolean freeze;
  boolean fd_enable;
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  _Bool _2;
  int _3;
  _Bool _4;
  int _5;
  _Bool _6;
  _Bool _7;
  int _8;
  _Bool _9;
  _Bool _10;
  Flexcan_Ip_StatusType _42;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance_17(D) <= 2;
  DevAssert (_1);
  # DEBUG BEGIN_STMT
  _2 = bitrate_20(D) != 0B;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  result_22 = 0;
  # DEBUG result => result_22
  # DEBUG BEGIN_STMT
  status_23 = 0;
  # DEBUG status => status_23
  # DEBUG BEGIN_STMT
  _3 = (int) instance_17(D);
  pBase_24 = Flexcan_Ip_apxBase[_3];
  # DEBUG pBase => pBase_24
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsEnabled (pBase_24);
  _5 = (int) _4;
  _6 = _5 != 0;
  _7 = ~_6;
  _8 = (int) _7;
  disabled_26 = (boolean) _8;
  # DEBUG disabled => disabled_26
  # DEBUG BEGIN_STMT
  fd_enable_28 = FlexCAN_IsFDEnabled (pBase_24);
  # DEBUG fd_enable => fd_enable_28
  # DEBUG BEGIN_STMT
  if (disabled_26 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result_30 = FlexCAN_Enable (pBase_24);
  # DEBUG result => result_30

  <bb 4> :
  # result_11 = PHI <result_22(2), result_30(3)>
  # DEBUG result => result_11
  # DEBUG BEGIN_STMT
  freeze_32 = FlexCAN_IsFreezeMode (pBase_24);
  # DEBUG freeze => freeze_32
  # DEBUG BEGIN_STMT
  _9 = ~fd_enable_28;
  if (_9 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _10 = ~freeze_32;
  if (_10 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  if (result_11 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  result_33 = 1;
  # DEBUG result => result_33

  <bb 8> :
  # result_12 = PHI <result_11(5), result_11(6), result_33(7)>
  # DEBUG result => result_12
  # DEBUG BEGIN_STMT
  if (result_12 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_15 ();
  # DEBUG BEGIN_STMT
  FlexCAN_SetFDEnabled (pBase_24, fd_enable_28, bitRateSwitch_35(D));
  # DEBUG BEGIN_STMT
  FlexCAN_SetFDTimeSegments (pBase_24, bitrate_20(D));
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_15 ();

  <bb 10> :
  # DEBUG BEGIN_STMT
  if (disabled_26 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  status_40 = FlexCAN_Disable (pBase_24);
  # DEBUG status => status_40
  # DEBUG BEGIN_STMT
  if (status_40 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  result_41 = status_40;
  # DEBUG result => result_41

  <bb 13> :
  # result_13 = PHI <result_12(10), result_12(11), result_41(12)>
  # DEBUG result => result_13
  # DEBUG BEGIN_STMT
  _42 = result_13;
  return _42;

}


FlexCAN_Ip_GetTDCValue (uint8 u8Instance)
{
  const struct FLEXCAN_Type * pBase;
  uint8 value;
  _Bool _1;
  int _2;
  long unsigned int _3;
  unsigned char _4;
  uint8 _11;

  <bb 2> :
  # DEBUG BEGIN_STMT
  value_5 = 0;
  # DEBUG value => value_5
  # DEBUG BEGIN_STMT
  _1 = u8Instance_6(D) <= 2;
  DevAssert (_1);
  # DEBUG BEGIN_STMT
  _2 = (int) u8Instance_6(D);
  pBase_9 = Flexcan_Ip_apxBase[_2];
  # DEBUG pBase => pBase_9
  # DEBUG BEGIN_STMT
  _3 ={v} pBase_9->FDCTRL;
  _4 = (unsigned char) _3;
  value_10 = _4 & 63;
  # DEBUG value => value_10
  # DEBUG BEGIN_STMT
  _11 = value_10;
  return _11;

}


FlexCAN_Ip_GetTDCFail (uint8 u8Instance)
{
  const struct FLEXCAN_Type * pBase;
  boolean value;
  _Bool _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  boolean _11;

  <bb 2> :
  # DEBUG BEGIN_STMT
  value_5 = 0;
  # DEBUG value => value_5
  # DEBUG BEGIN_STMT
  _1 = u8Instance_6(D) <= 2;
  DevAssert (_1);
  # DEBUG BEGIN_STMT
  _2 = (int) u8Instance_6(D);
  pBase_9 = Flexcan_Ip_apxBase[_2];
  # DEBUG pBase => pBase_9
  # DEBUG BEGIN_STMT
  _3 ={v} pBase_9->FDCTRL;
  _4 = _3 & 16384;
  value_10 = _4 == 16384;
  # DEBUG value => value_10
  # DEBUG BEGIN_STMT
  _11 = value_10;
  return _11;

}


FlexCAN_Ip_ClearTDCFail (uint8 u8Instance)
{
  struct FLEXCAN_Type * pBase;
  _Bool _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = u8Instance_5(D) <= 2;
  DevAssert (_1);
  # DEBUG BEGIN_STMT
  _2 = (int) u8Instance_5(D);
  pBase_8 = Flexcan_Ip_apxBase[_2];
  # DEBUG pBase => pBase_8
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_09 ();
  # DEBUG BEGIN_STMT
  _3 ={v} pBase_8->FDCTRL;
  _4 = _3 | 16384;
  pBase_8->FDCTRL ={v} _4;
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_09 ();
  return;

}


FlexCAN_Ip_GetBitrate (uint8 instance, struct Flexcan_Ip_TimeSegmentType * bitrate)
{
  boolean enhCbt;
  const struct FLEXCAN_Type * pBase;
  _Bool _1;
  _Bool _2;
  int _3;
  _Bool _4;
  boolean _16;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance_6(D) <= 2;
  DevAssert (_1);
  # DEBUG BEGIN_STMT
  _2 = bitrate_9(D) != 0B;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = (int) instance_6(D);
  pBase_11 = Flexcan_Ip_apxBase[_3];
  # DEBUG pBase => pBase_11
  # DEBUG BEGIN_STMT
  enhCbt_12 = 0;
  # DEBUG enhCbt => enhCbt_12
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsExCbtEnabled (pBase_11);
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  FlexCAN_GetExtendedTimeSegments (pBase_11, bitrate_9(D));
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  FlexCAN_GetTimeSegments (pBase_11, bitrate_9(D));

  <bb 5> :
  # DEBUG BEGIN_STMT
  _16 = enhCbt_12;
  return _16;

}


FlexCAN_Ip_SetBitrate_Privileged (uint8 instance, const struct Flexcan_Ip_TimeSegmentType * bitrate, boolean enhExt)
{
  boolean freeze;
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  _Bool _2;
  int _3;
  _Bool _4;
  int _5;
  _Bool _6;
  _Bool _7;
  int _8;
  _Bool _9;
  _Bool _10;
  Flexcan_Ip_StatusType _41;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance_18(D) <= 2;
  DevAssert (_1);
  # DEBUG BEGIN_STMT
  _2 = bitrate_21(D) != 0B;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  result_23 = 0;
  # DEBUG result => result_23
  # DEBUG BEGIN_STMT
  status_24 = 0;
  # DEBUG status => status_24
  # DEBUG BEGIN_STMT
  _3 = (int) instance_18(D);
  pBase_25 = Flexcan_Ip_apxBase[_3];
  # DEBUG pBase => pBase_25
  # DEBUG BEGIN_STMT
  _4 = FlexCAN_IsEnabled (pBase_25);
  _5 = (int) _4;
  _6 = _5 != 0;
  _7 = ~_6;
  _8 = (int) _7;
  disabled_27 = (boolean) _8;
  # DEBUG disabled => disabled_27
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (disabled_27 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result_29 = FlexCAN_Enable (pBase_25);
  # DEBUG result => result_29

  <bb 4> :
  # result_11 = PHI <result_23(2), result_29(3)>
  # DEBUG result => result_11
  # DEBUG BEGIN_STMT
  freeze_31 = FlexCAN_IsFreezeMode (pBase_25);
  # DEBUG freeze => freeze_31
  # DEBUG BEGIN_STMT
  _9 = ~freeze_31;
  if (_9 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result_11 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result_32 = 1;
  # DEBUG result => result_32

  <bb 7> :
  # result_12 = PHI <result_11(4), result_11(5), result_32(6)>
  # DEBUG result => result_12
  # DEBUG BEGIN_STMT
  if (result_12 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_14 ();
  # DEBUG BEGIN_STMT
  _10 = FlexCAN_IsExCbtEnabled (pBase_25);
  if (_10 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetExtendedTimeSegments (pBase_25, bitrate_21(D));
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetTimeSegments (pBase_25, bitrate_21(D));

  <bb 11> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_14 ();

  <bb 12> :
  # DEBUG BEGIN_STMT
  if (disabled_27 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  status_39 = FlexCAN_Disable (pBase_25);
  # DEBUG status => status_39
  # DEBUG BEGIN_STMT
  if (status_39 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  result_40 = status_39;
  # DEBUG result => result_40

  <bb 15> :
  # result_13 = PHI <result_12(12), result_12(13), result_40(14)>
  # DEBUG result => result_13
  # DEBUG BEGIN_STMT
  _41 = result_13;
  return _41;

}


FlexCAN_Ip_SetRxMaskType_Privileged (uint8 instance, Flexcan_Ip_RxMaskType type)
{
  boolean freeze;
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  int _2;
  _Bool _3;
  int _4;
  _Bool _5;
  _Bool _6;
  int _7;
  _Bool _8;
  Flexcan_Ip_StatusType _35;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance_15(D) <= 2;
  DevAssert (_1);
  # DEBUG BEGIN_STMT
  result_18 = 0;
  # DEBUG result => result_18
  # DEBUG BEGIN_STMT
  status_19 = 0;
  # DEBUG status => status_19
  # DEBUG BEGIN_STMT
  _2 = (int) instance_15(D);
  pBase_20 = Flexcan_Ip_apxBase[_2];
  # DEBUG pBase => pBase_20
  # DEBUG BEGIN_STMT
  _3 = FlexCAN_IsEnabled (pBase_20);
  _4 = (int) _3;
  _5 = _4 != 0;
  _6 = ~_5;
  _7 = (int) _6;
  disabled_22 = (boolean) _7;
  # DEBUG disabled => disabled_22
  # DEBUG BEGIN_STMT
  if (disabled_22 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result_24 = FlexCAN_Enable (pBase_20);
  # DEBUG result => result_24

  <bb 4> :
  # result_9 = PHI <result_18(2), result_24(3)>
  # DEBUG result => result_9
  # DEBUG BEGIN_STMT
  freeze_26 = FlexCAN_IsFreezeMode (pBase_20);
  # DEBUG freeze => freeze_26
  # DEBUG BEGIN_STMT
  _8 = ~freeze_26;
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result_9 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result_27 = 1;
  # DEBUG result => result_27

  <bb 7> :
  # result_10 = PHI <result_9(4), result_9(5), result_27(6)>
  # DEBUG result => result_10
  # DEBUG BEGIN_STMT
  if (result_10 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_08 ();
  # DEBUG BEGIN_STMT
  FlexCAN_SetRxMaskType (pBase_20, type_29(D));
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_08 ();

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (disabled_22 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  status_33 = FlexCAN_Disable (pBase_20);
  # DEBUG status => status_33
  # DEBUG BEGIN_STMT
  if (status_33 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  result_34 = status_33;
  # DEBUG result => result_34

  <bb 12> :
  # result_11 = PHI <result_10(9), result_10(10), result_34(11)>
  # DEBUG result => result_11
  # DEBUG BEGIN_STMT
  _35 = result_11;
  return _35;

}


FlexCAN_Ip_SetStopMode_Privileged (uint8 instance)
{
  Flexcan_Ip_StatusType status;
  struct FLEXCAN_Type * pBase;
  _Bool _1;
  int _2;
  Flexcan_Ip_StatusType _13;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance_5(D) <= 2;
  DevAssert (_1);
  # DEBUG BEGIN_STMT
  _2 = (int) instance_5(D);
  pBase_8 = Flexcan_Ip_apxBase[_2];
  # DEBUG pBase => pBase_8
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  status_10 = FlexCAN_EnterFreezeMode (pBase_8);
  # DEBUG status => status_10
  # DEBUG BEGIN_STMT
  if (status_10 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  status_12 = FlexCAN_Disable (pBase_8);
  # DEBUG status => status_12

  <bb 4> :
  # status_3 = PHI <status_10(2), status_12(3)>
  # DEBUG status => status_3
  # DEBUG BEGIN_STMT
  _13 = status_3;
  return _13;

}


FlexCAN_Ip_SetStartMode_Privileged (uint8 instance)
{
  struct FLEXCAN_Type * pBase;
  _Bool _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  Flexcan_Ip_StatusType _13;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance_5(D) <= 2;
  DevAssert (_1);
  # DEBUG BEGIN_STMT
  _2 = (int) instance_5(D);
  pBase_8 = Flexcan_Ip_apxBase[_2];
  # DEBUG pBase => pBase_8
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_07 ();
  # DEBUG BEGIN_STMT
  _3 ={v} pBase_8->MCR;
  _4 = _3 & 2147483647;
  pBase_8->MCR ={v} _4;
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_07 ();
  # DEBUG BEGIN_STMT
  _13 = FlexCAN_ExitFreezeMode (pBase_8);
  return _13;

}


FlexCAN_Ip_GetStartMode_Privileged (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  boolean _7;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_4(D);
  base_6 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_6
  # DEBUG BEGIN_STMT
  _2 ={v} base_6->MCR;
  _3 = _2 & 17825792;
  _7 = _3 == 0;
  return _7;

}


FlexCAN_Ip_GetStopMode_Privileged (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  boolean _7;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_4(D);
  base_6 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_6
  # DEBUG BEGIN_STMT
  _2 ={v} base_6->MCR;
  _3 = _2 & 1048576;
  _7 = _3 == 1048576;
  return _7;

}


FlexCAN_Ip_MainFunctionWrite (uint8 instance, uint8 mb_idx)
{
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  int _1;
  int _2;
  _Bool _3;
  long unsigned int _4;
  unsigned char _5;
  long unsigned int _6;
  int _7;
  long unsigned int _8;
  long unsigned int _9;
  int _10;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_12(D);
  base_14 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_14
  # DEBUG BEGIN_STMT
  _2 = (int) instance_12(D);
  state_15 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_15
  # DEBUG BEGIN_STMT
  _3 = instance_12(D) <= 2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  _4 = (long unsigned int) mb_idx_17(D);
  _5 = FlexCAN_GetBuffStatusFlag (base_14, _4);
  if (_5 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _6 = (long unsigned int) mb_idx_17(D);
  _7 = (int) mb_idx_17(D);
  _8 = FlexCAN_GetMsgBuffTimestamp (base_14, _6);
  state_15->mbs[_7].time_stamp = _8;
  # DEBUG BEGIN_STMT
  FlexCAN_UnlockRxMsgBuff (base_14);
  # DEBUG BEGIN_STMT
  _9 = (long unsigned int) mb_idx_17(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (base_14, _9);
  # DEBUG BEGIN_STMT
  _10 = (int) mb_idx_17(D);
  state_15->mbs[_10].state ={v} 0;

  <bb 4> :
  return;

}


FlexCAN_Ip_MainFunctionBusOff_Privileged (uint8 instance)
{
  uint32 u32ErrStatus;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType eRetVal;
  int _1;
  int _2;
  _Bool _3;
  long unsigned int _4;
  void (*<T620>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _5;
  void (*<T620>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _6;
  Flexcan_Ip_StatusType _21;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eRetVal_10 = 1;
  # DEBUG eRetVal => eRetVal_10
  # DEBUG BEGIN_STMT
  _1 = (int) instance_11(D);
  base_13 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_13
  # DEBUG BEGIN_STMT
  _2 = (int) instance_11(D);
  state_14 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_14
  # DEBUG BEGIN_STMT
  u32ErrStatus_15 = 0;
  # DEBUG u32ErrStatus => u32ErrStatus_15
  # DEBUG BEGIN_STMT
  _3 = instance_11(D) <= 2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  u32ErrStatus_17 ={v} base_13->ESR1;
  # DEBUG u32ErrStatus => u32ErrStatus_17
  # DEBUG BEGIN_STMT
  _4 = u32ErrStatus_17 & 4;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _5 = state_14->error_callback;
  if (_5 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _6 = state_14->error_callback;
  _6 (instance_11(D), 7, u32ErrStatus_17, state_14);

  <bb 5> :
  # DEBUG BEGIN_STMT
  base_13->ESR1 ={v} 4;
  # DEBUG BEGIN_STMT
  eRetVal_20 = 0;
  # DEBUG eRetVal => eRetVal_20

  <bb 6> :
  # eRetVal_7 = PHI <eRetVal_10(2), eRetVal_20(5)>
  # DEBUG eRetVal => eRetVal_7
  # DEBUG BEGIN_STMT
  _21 = eRetVal_7;
  return _21;

}


FlexCAN_Ip_MainFunctionRead (uint8 instance, uint8 mb_idx)
{
  const struct Flexcan_Ip_StateType * state;
  const struct FLEXCAN_Type * base;
  int _1;
  int _2;
  _Bool _3;
  _Bool _4;
  _Bool _5;
  unsigned char _6;
  long unsigned int _7;
  unsigned char _8;
  int _9;
  <unnamed type> _10;
  long unsigned int _11;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_13(D);
  base_15 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_15
  # DEBUG BEGIN_STMT
  _2 = (int) instance_13(D);
  state_16 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_16
  # DEBUG BEGIN_STMT
  _3 = instance_13(D) <= 2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  _4 = mb_idx_18(D) <= 31;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = state_16->bIsLegacyFifoEn;
  if (_5 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  if (mb_idx_18(D) <= 7)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  if (mb_idx_18(D) == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _6 = FlexCAN_GetBuffStatusFlag (base_15, 5);
  if (_6 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  FlexCAN_IRQHandlerRxFIFO (instance_13(D), 5);
  goto <bb 10>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _7 = (long unsigned int) mb_idx_18(D);
  _8 = FlexCAN_GetBuffStatusFlag (base_15, _7);
  if (_8 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _9 = (int) mb_idx_18(D);
  _10 ={v} state_16->mbs[_9].state;
  if (_10 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _11 = (long unsigned int) mb_idx_18(D);
  FlexCAN_IRQHandlerRxMB (instance_13(D), _11);

  <bb 10> :
  return;

}


FlexCAN_Ip_Deinit_Privileged (uint8 instance)
{
  Flexcan_Ip_StatusType result;
  struct FLEXCAN_Type * base;
  int _1;
  _Bool _2;
  int _3;
  Flexcan_Ip_StatusType _15;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_5(D);
  base_7 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_7
  # DEBUG BEGIN_STMT
  result_8 = 1;
  # DEBUG result => result_8
  # DEBUG BEGIN_STMT
  _2 = instance_5(D) <= 2;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  result_11 = FlexCAN_EnterFreezeMode (base_7);
  # DEBUG result => result_11
  # DEBUG BEGIN_STMT
  if (result_11 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetRegDefaultVal (base_7);
  # DEBUG BEGIN_STMT
  FlexCAN_Disable (base_7);
  # DEBUG BEGIN_STMT
  _3 = (int) instance_5(D);
  Flexcan_Ip_apxState[_3] = 0B;

  <bb 4> :
  # DEBUG BEGIN_STMT
  _15 = result_11;
  return _15;

}


FlexCAN_Ip_SetRxFifoGlobalMask_Privileged (uint8 instance, uint32 mask)
{
  boolean freeze;
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  int _2;
  _Bool _3;
  int _4;
  _Bool _5;
  _Bool _6;
  int _7;
  _Bool _8;
  Flexcan_Ip_StatusType _33;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance_15(D) <= 2;
  DevAssert (_1);
  # DEBUG BEGIN_STMT
  result_18 = 0;
  # DEBUG result => result_18
  # DEBUG BEGIN_STMT
  status_19 = 0;
  # DEBUG status => status_19
  # DEBUG BEGIN_STMT
  _2 = (int) instance_15(D);
  pBase_20 = Flexcan_Ip_apxBase[_2];
  # DEBUG pBase => pBase_20
  # DEBUG BEGIN_STMT
  _3 = FlexCAN_IsEnabled (pBase_20);
  _4 = (int) _3;
  _5 = _4 != 0;
  _6 = ~_5;
  _7 = (int) _6;
  disabled_22 = (boolean) _7;
  # DEBUG disabled => disabled_22
  # DEBUG BEGIN_STMT
  if (disabled_22 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result_24 = FlexCAN_Enable (pBase_20);
  # DEBUG result => result_24

  <bb 4> :
  # result_9 = PHI <result_18(2), result_24(3)>
  # DEBUG result => result_9
  # DEBUG BEGIN_STMT
  freeze_26 = FlexCAN_IsFreezeMode (pBase_20);
  # DEBUG freeze => freeze_26
  # DEBUG BEGIN_STMT
  _8 = ~freeze_26;
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result_9 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result_27 = 1;
  # DEBUG result => result_27

  <bb 7> :
  # result_10 = PHI <result_9(4), result_9(5), result_27(6)>
  # DEBUG result => result_10
  # DEBUG BEGIN_STMT
  if (result_10 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetRxFifoGlobalMask (pBase_20, mask_28(D));

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (disabled_22 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  status_31 = FlexCAN_Disable (pBase_20);
  # DEBUG status => status_31
  # DEBUG BEGIN_STMT
  if (status_31 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  result_32 = status_31;
  # DEBUG result => result_32

  <bb 12> :
  # result_11 = PHI <result_10(9), result_10(10), result_32(11)>
  # DEBUG result => result_11
  # DEBUG BEGIN_STMT
  _33 = result_11;
  return _33;

}


FlexCAN_Ip_SetRxIndividualMask_Privileged (uint8 instance, uint8 mb_idx, uint32 mask)
{
  boolean disabled;
  boolean freeze;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  int _1;
  _Bool _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  _Bool _6;
  int _7;
  _Bool _8;
  _Bool _9;
  int _10;
  _Bool _11;
  long unsigned int _12;
  Flexcan_Ip_StatusType _40;

  <bb 2> :
  # DEBUG BEGIN_STMT
  result_19 = 0;
  # DEBUG result => result_19
  # DEBUG BEGIN_STMT
  status_20 = 0;
  # DEBUG status => status_20
  # DEBUG BEGIN_STMT
  _1 = (int) instance_21(D);
  pBase_23 = Flexcan_Ip_apxBase[_1];
  # DEBUG pBase => pBase_23
  # DEBUG BEGIN_STMT
  freeze_24 = 0;
  # DEBUG freeze => freeze_24
  # DEBUG BEGIN_STMT
  _2 = instance_21(D) <= 2;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = (long unsigned int) mb_idx_26(D);
  _4 ={v} pBase_23->MCR;
  _5 = _4 & 127;
  if (_3 > _5)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (mb_idx_26(D) > 31)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  result_39 = 4;
  # DEBUG result => result_39
  goto <bb 15>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _6 = FlexCAN_IsEnabled (pBase_23);
  _7 = (int) _6;
  _8 = _7 != 0;
  _9 = ~_8;
  _10 = (int) _9;
  disabled_28 = (boolean) _10;
  # DEBUG disabled => disabled_28
  # DEBUG BEGIN_STMT
  if (disabled_28 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result_30 = FlexCAN_Enable (pBase_23);
  # DEBUG result => result_30

  <bb 7> :
  # result_13 = PHI <result_19(5), result_30(6)>
  # DEBUG result => result_13
  # DEBUG BEGIN_STMT
  freeze_32 = FlexCAN_IsFreezeMode (pBase_23);
  # DEBUG freeze => freeze_32
  # DEBUG BEGIN_STMT
  _11 = ~freeze_32;
  if (_11 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  if (result_13 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  result_33 = 1;
  # DEBUG result => result_33

  <bb 10> :
  # result_14 = PHI <result_13(7), result_13(8), result_33(9)>
  # DEBUG result => result_14
  # DEBUG BEGIN_STMT
  if (result_14 == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _12 = (long unsigned int) mb_idx_26(D);
  FlexCAN_SetRxIndividualMask (pBase_23, _12, mask_34(D));

  <bb 12> :
  # DEBUG BEGIN_STMT
  if (disabled_28 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  status_37 = FlexCAN_Disable (pBase_23);
  # DEBUG status => status_37
  # DEBUG BEGIN_STMT
  if (status_37 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  result_38 = status_37;
  # DEBUG result => result_38

  <bb 15> :
  # result_15 = PHI <result_39(4), result_14(12), result_14(13), result_38(14)>
  # DEBUG result => result_15
  # DEBUG BEGIN_STMT
  _40 = result_15;
  return _40;

}


FlexCAN_Ip_ExitFreezeMode_Privileged (uint8 instance)
{
  struct FLEXCAN_Type * base;
  int _1;
  Flexcan_Ip_StatusType _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_2(D);
  base_4 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_4
  # DEBUG BEGIN_STMT
  _6 = FlexCAN_ExitFreezeMode (base_4);
  return _6;

}


FlexCAN_Ip_EnterFreezeMode_Privileged (uint8 instance)
{
  struct FLEXCAN_Type * base;
  int _1;
  Flexcan_Ip_StatusType _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_2(D);
  base_4 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_4
  # DEBUG BEGIN_STMT
  _6 = FlexCAN_EnterFreezeMode (base_4);
  return _6;

}


FlexCAN_Ip_SetRxMbGlobalMask_Privileged (uint8 instance, uint32 mask)
{
  boolean disabled;
  boolean freeze;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  int _1;
  _Bool _2;
  _Bool _3;
  int _4;
  _Bool _5;
  _Bool _6;
  int _7;
  _Bool _8;
  Flexcan_Ip_StatusType _34;

  <bb 2> :
  # DEBUG BEGIN_STMT
  result_15 = 0;
  # DEBUG result => result_15
  # DEBUG BEGIN_STMT
  status_16 = 0;
  # DEBUG status => status_16
  # DEBUG BEGIN_STMT
  _1 = (int) instance_17(D);
  pBase_19 = Flexcan_Ip_apxBase[_1];
  # DEBUG pBase => pBase_19
  # DEBUG BEGIN_STMT
  freeze_20 = 0;
  # DEBUG freeze => freeze_20
  # DEBUG BEGIN_STMT
  _2 = instance_17(D) <= 2;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = FlexCAN_IsEnabled (pBase_19);
  _4 = (int) _3;
  _5 = _4 != 0;
  _6 = ~_5;
  _7 = (int) _6;
  disabled_23 = (boolean) _7;
  # DEBUG disabled => disabled_23
  # DEBUG BEGIN_STMT
  if (disabled_23 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result_25 = FlexCAN_Enable (pBase_19);
  # DEBUG result => result_25

  <bb 4> :
  # result_9 = PHI <result_15(2), result_25(3)>
  # DEBUG result => result_9
  # DEBUG BEGIN_STMT
  freeze_27 = FlexCAN_IsFreezeMode (pBase_19);
  # DEBUG freeze => freeze_27
  # DEBUG BEGIN_STMT
  _8 = ~freeze_27;
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result_9 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result_28 = 1;
  # DEBUG result => result_28

  <bb 7> :
  # result_10 = PHI <result_9(4), result_9(5), result_28(6)>
  # DEBUG result => result_10
  # DEBUG BEGIN_STMT
  if (result_10 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetRxMsgBuffGlobalMask (pBase_19, mask_29(D));

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (disabled_23 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  status_32 = FlexCAN_Disable (pBase_19);
  # DEBUG status => status_32
  # DEBUG BEGIN_STMT
  if (status_32 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  result_33 = status_32;
  # DEBUG result => result_33

  <bb 12> :
  # result_11 = PHI <result_10(9), result_10(10), result_33(11)>
  # DEBUG result => result_11
  # DEBUG BEGIN_STMT
  _34 = result_11;
  return _34;

}


FlexCAN_Ip_SendBlocking (uint8 instance, uint8 mb_idx, const struct Flexcan_Ip_DataInfoType * tx_info, uint32 msg_id, const uint8 * mb_data, uint32 timeout_ms)
{
  volatile uint32 * flexcan_mb;
  uint32 flexcan_mb_config;
  uint32 uS2Ticks;
  uint32 mS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType result;
  int _1;
  int _2;
  long unsigned int _3;
  _Bool _4;
  _Bool _5;
  long unsigned int _6;
  long unsigned int _7;
  unsigned char _8;
  int _9;
  <unnamed type> _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  unsigned char _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  int _21;
  long unsigned int _59;
  long unsigned int _76;
  Flexcan_Ip_StatusType _84;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) instance_35(D);
  base_37 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_37
  # DEBUG BEGIN_STMT
  _2 = (int) instance_35(D);
  state_38 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_38
  # DEBUG BEGIN_STMT
  timeStart = 0;
  # DEBUG BEGIN_STMT
  timeElapsed_40 = 0;
  # DEBUG timeElapsed => timeElapsed_40
  # DEBUG BEGIN_STMT
  _3 = timeout_ms_41(D) * 1000;
  mS2Ticks_43 = OsIf_MicrosToTicks (_3, 0);
  # DEBUG mS2Ticks => mS2Ticks_43
  # DEBUG BEGIN_STMT
  uS2Ticks_44 = 0;
  # DEBUG uS2Ticks => uS2Ticks_44
  # DEBUG BEGIN_STMT
  flexcan_mb_config_45 = 0;
  # DEBUG flexcan_mb_config => flexcan_mb_config_45
  # DEBUG BEGIN_STMT
  flexcan_mb_46 = 0B;
  # DEBUG flexcan_mb => flexcan_mb_46
  # DEBUG BEGIN_STMT
  _4 = instance_35(D) <= 2;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = tx_info_48(D) != 0B;
  DevAssert (_5);
  # DEBUG BEGIN_STMT
  result_54 = FlexCAN_StartSendData (instance_35(D), mb_idx_50(D), tx_info_48(D), msg_id_51(D), mb_data_52(D));
  # DEBUG result => result_54
  # DEBUG BEGIN_STMT
  if (result_54 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _6 = OsIf_GetCounter (0);
  timeStart = _6;
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _59 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_60 = _59 + timeElapsed_27;
  # DEBUG timeElapsed => timeElapsed_60
  # DEBUG BEGIN_STMT
  if (timeElapsed_60 >= mS2Ticks_43)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  result_61 = 3;
  # DEBUG result => result_61
  # DEBUG BEGIN_STMT
  goto <bb 7>; [INV]

  <bb 6> :
  # timeElapsed_27 = PHI <timeElapsed_40(3), timeElapsed_60(4)>
  # DEBUG timeElapsed => timeElapsed_27
  # DEBUG BEGIN_STMT
  _7 = (long unsigned int) mb_idx_50(D);
  _8 = FlexCAN_GetBuffStatusFlag (base_37, _7);
  if (_8 != 1)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # result_22 = PHI <result_61(5), result_54(6)>
  # DEBUG result => result_22
  # DEBUG BEGIN_STMT
  if (result_22 == 3)
    goto <bb 8>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 8> :
  _9 = (int) mb_idx_50(D);
  _10 ={v} state_38->mbs[_9].state;
  if (_10 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _11 = (long unsigned int) mb_idx_50(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (base_37, _11);
  # DEBUG BEGIN_STMT
  _12 = (long unsigned int) mb_idx_50(D);
  flexcan_mb_64 = FlexCAN_GetMsgBuffRegion (base_37, _12);
  # DEBUG flexcan_mb => flexcan_mb_64
  # DEBUG BEGIN_STMT
  flexcan_mb_config_65 ={v} *flexcan_mb_64;
  # DEBUG flexcan_mb_config => flexcan_mb_config_65
  # DEBUG BEGIN_STMT
  flexcan_mb_config_66 = flexcan_mb_config_65 & 4043309055;
  # DEBUG flexcan_mb_config => flexcan_mb_config_66
  # DEBUG BEGIN_STMT
  flexcan_mb_config_67 = flexcan_mb_config_66 | 150994944;
  # DEBUG flexcan_mb_config => flexcan_mb_config_67
  # DEBUG BEGIN_STMT
  *flexcan_mb_64 ={v} flexcan_mb_config_67;
  # DEBUG BEGIN_STMT
  uS2Ticks_70 = OsIf_MicrosToTicks (10000, 0);
  # DEBUG uS2Ticks => uS2Ticks_70
  # DEBUG BEGIN_STMT
  _13 = OsIf_GetCounter (0);
  timeStart = _13;
  # DEBUG BEGIN_STMT
  timeElapsed_73 = 0;
  # DEBUG timeElapsed => timeElapsed_73
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  _76 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_77 = _76 + timeElapsed_28;
  # DEBUG timeElapsed => timeElapsed_77
  # DEBUG BEGIN_STMT
  if (timeElapsed_77 >= uS2Ticks_70)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  result_78 = 3;
  # DEBUG result => result_78
  # DEBUG BEGIN_STMT
  goto <bb 13>; [INV]

  <bb 12> :
  # timeElapsed_28 = PHI <timeElapsed_73(9), timeElapsed_77(10)>
  # DEBUG timeElapsed => timeElapsed_28
  # DEBUG BEGIN_STMT
  _14 = (long unsigned int) mb_idx_50(D);
  _15 = FlexCAN_GetBuffStatusFlag (base_37, _14);
  if (_15 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # result_23 = PHI <result_78(11), result_22(12)>
  # DEBUG result => result_23
  # DEBUG BEGIN_STMT
  flexcan_mb_config_79 ={v} *flexcan_mb_64;
  # DEBUG flexcan_mb_config => flexcan_mb_config_79
  # DEBUG BEGIN_STMT
  _16 = flexcan_mb_config_79 >> 24;
  _17 = _16 & 15;
  if (_17 == 8)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  result_80 = 0;
  # DEBUG result => result_80

  <bb 15> :
  # result_24 = PHI <result_23(13), result_80(14)>
  # DEBUG result => result_24
  # DEBUG BEGIN_STMT
  _18 = flexcan_mb_config_79 >> 24;
  _19 = _18 & 15;
  if (_19 == 9)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  result_81 = 3;
  # DEBUG result => result_81

  <bb 17> :
  # result_25 = PHI <result_22(7), result_22(8), result_24(15), result_81(16)>
  # DEBUG result => result_25
  # DEBUG BEGIN_STMT
  _20 = (long unsigned int) mb_idx_50(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (base_37, _20);
  # DEBUG BEGIN_STMT
  _21 = (int) mb_idx_50(D);
  state_38->mbs[_21].state ={v} 0;

  <bb 18> :
  # result_26 = PHI <result_54(2), result_25(17)>
  # DEBUG result => result_26
  # DEBUG BEGIN_STMT
  _84 = result_26;
  timeStart ={v} {CLOBBER};
  return _84;

}


FlexCAN_BusOff_IRQHandler (uint8 instance)
{
  boolean isSpuriousInt;
  uint32 u32ErrStatus;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  int _1;
  int _2;
  _Bool _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  void (*<T620>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _7;
  void (*<T620>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  void (*<T620>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _12;
  void (*<T620>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  void (*<T620>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _17;
  void (*<T620>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _18;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_33(D);
  base_35 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_35
  # DEBUG BEGIN_STMT
  _2 = (int) instance_33(D);
  state_36 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_36
  # DEBUG BEGIN_STMT
  u32ErrStatus_37 = 0;
  # DEBUG u32ErrStatus => u32ErrStatus_37
  # DEBUG BEGIN_STMT
  isSpuriousInt_38 = 1;
  # DEBUG isSpuriousInt => isSpuriousInt_38
  # DEBUG BEGIN_STMT
  _3 = instance_33(D) <= 2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  if (state_36 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  u32ErrStatus_40 ={v} base_35->ESR1;
  # DEBUG u32ErrStatus => u32ErrStatus_40
  # DEBUG BEGIN_STMT
  _4 = u32ErrStatus_40 & 131072;
  if (_4 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  _5 ={v} base_35->CTRL1;
  _6 = _5 & 2048;
  if (_6 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  base_35->ESR1 ={v} 131072;
  # DEBUG BEGIN_STMT
  _7 = state_36->error_callback;
  if (_7 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _8 = state_36->error_callback;
  _8 (instance_33(D), 9, u32ErrStatus_40, state_36);
  # DEBUG BEGIN_STMT
  u32ErrStatus_43 ={v} base_35->ESR1;
  # DEBUG u32ErrStatus => u32ErrStatus_43

  <bb 7> :
  # u32ErrStatus_19 = PHI <u32ErrStatus_40(5), u32ErrStatus_43(6)>
  # DEBUG u32ErrStatus => u32ErrStatus_19
  # DEBUG BEGIN_STMT
  isSpuriousInt_44 = 0;
  # DEBUG isSpuriousInt => isSpuriousInt_44

  <bb 8> :
  # u32ErrStatus_20 = PHI <u32ErrStatus_40(3), u32ErrStatus_40(4), u32ErrStatus_19(7)>
  # isSpuriousInt_23 = PHI <isSpuriousInt_38(3), isSpuriousInt_38(4), isSpuriousInt_44(7)>
  # DEBUG isSpuriousInt => isSpuriousInt_23
  # DEBUG u32ErrStatus => u32ErrStatus_20
  # DEBUG BEGIN_STMT
  _9 = u32ErrStatus_20 & 65536;
  if (_9 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 9> :
  _10 ={v} base_35->CTRL1;
  _11 = _10 & 1024;
  if (_11 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  base_35->ESR1 ={v} 65536;
  # DEBUG BEGIN_STMT
  _12 = state_36->error_callback;
  if (_12 != 0B)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _13 = state_36->error_callback;
  _13 (instance_33(D), 8, u32ErrStatus_20, state_36);
  # DEBUG BEGIN_STMT
  u32ErrStatus_47 ={v} base_35->ESR1;
  # DEBUG u32ErrStatus => u32ErrStatus_47

  <bb 12> :
  # u32ErrStatus_21 = PHI <u32ErrStatus_20(10), u32ErrStatus_47(11)>
  # DEBUG u32ErrStatus => u32ErrStatus_21
  # DEBUG BEGIN_STMT
  isSpuriousInt_48 = 0;
  # DEBUG isSpuriousInt => isSpuriousInt_48

  <bb 13> :
  # u32ErrStatus_22 = PHI <u32ErrStatus_20(8), u32ErrStatus_20(9), u32ErrStatus_21(12)>
  # isSpuriousInt_24 = PHI <isSpuriousInt_23(8), isSpuriousInt_23(9), isSpuriousInt_48(12)>
  # DEBUG isSpuriousInt => isSpuriousInt_24
  # DEBUG u32ErrStatus => u32ErrStatus_22
  # DEBUG BEGIN_STMT
  _14 = u32ErrStatus_22 & 4;
  if (_14 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 14> :
  _15 ={v} base_35->CTRL1;
  _16 = _15 & 32768;
  if (_16 != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  base_35->ESR1 ={v} 4;
  # DEBUG BEGIN_STMT
  _17 = state_36->error_callback;
  if (_17 != 0B)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _18 = state_36->error_callback;
  _18 (instance_33(D), 7, u32ErrStatus_22, state_36);

  <bb 17> :
  # DEBUG BEGIN_STMT
  isSpuriousInt_51 = 0;
  # DEBUG isSpuriousInt => isSpuriousInt_51

  <bb 18> :
  # isSpuriousInt_25 = PHI <isSpuriousInt_38(2), isSpuriousInt_24(13), isSpuriousInt_24(14), isSpuriousInt_51(17)>
  # DEBUG isSpuriousInt => isSpuriousInt_25
  # DEBUG BEGIN_STMT
  if (isSpuriousInt_25 != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  base_35->ESR1 ={v} 720900;

  <bb 20> :
  return;

}


FlexCAN_Error_IRQHandler (uint8 instance)
{
  boolean isSpuriousInt;
  uint32 u32ErrStatus;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * pBase;
  int _1;
  int _2;
  _Bool _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  void (*<T620>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _7;
  void (*<T620>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _8;
  long unsigned int _9;
  long unsigned int _10;
  signed int _11;
  void (*<T620>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _12;
  void (*<T620>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _13;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_23(D);
  pBase_25 = Flexcan_Ip_apxBase[_1];
  # DEBUG pBase => pBase_25
  # DEBUG BEGIN_STMT
  _2 = (int) instance_23(D);
  state_26 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_26
  # DEBUG BEGIN_STMT
  u32ErrStatus_27 = 0;
  # DEBUG u32ErrStatus => u32ErrStatus_27
  # DEBUG BEGIN_STMT
  isSpuriousInt_28 = 1;
  # DEBUG isSpuriousInt => isSpuriousInt_28
  # DEBUG BEGIN_STMT
  _3 = instance_23(D) <= 2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  if (state_26 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  u32ErrStatus_30 ={v} pBase_25->ESR1;
  # DEBUG u32ErrStatus => u32ErrStatus_30
  # DEBUG BEGIN_STMT
  _4 = u32ErrStatus_30 & 2;
  if (_4 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  _5 ={v} pBase_25->CTRL1;
  _6 = _5 & 16384;
  if (_6 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  pBase_25->ESR1 ={v} 2;
  # DEBUG BEGIN_STMT
  _7 = state_26->error_callback;
  if (_7 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _8 = state_26->error_callback;
  _8 (instance_23(D), 5, u32ErrStatus_30, state_26);
  # DEBUG BEGIN_STMT
  u32ErrStatus_33 ={v} pBase_25->ESR1;
  # DEBUG u32ErrStatus => u32ErrStatus_33

  <bb 7> :
  # u32ErrStatus_14 = PHI <u32ErrStatus_30(5), u32ErrStatus_33(6)>
  # DEBUG u32ErrStatus => u32ErrStatus_14
  # DEBUG BEGIN_STMT
  isSpuriousInt_34 = 0;
  # DEBUG isSpuriousInt => isSpuriousInt_34

  <bb 8> :
  # u32ErrStatus_15 = PHI <u32ErrStatus_30(3), u32ErrStatus_30(4), u32ErrStatus_14(7)>
  # isSpuriousInt_16 = PHI <isSpuriousInt_28(3), isSpuriousInt_28(4), isSpuriousInt_34(7)>
  # DEBUG isSpuriousInt => isSpuriousInt_16
  # DEBUG u32ErrStatus => u32ErrStatus_15
  # DEBUG BEGIN_STMT
  _9 = u32ErrStatus_15 & 1048576;
  if (_9 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 9> :
  _10 ={v} pBase_25->CTRL2;
  _11 = (signed int) _10;
  if (_11 < 0)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  pBase_25->ESR1 ={v} 1048576;
  # DEBUG BEGIN_STMT
  _12 = state_26->error_callback;
  if (_12 != 0B)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _13 = state_26->error_callback;
  _13 (instance_23(D), 6, u32ErrStatus_15, state_26);

  <bb 12> :
  # DEBUG BEGIN_STMT
  isSpuriousInt_37 = 0;
  # DEBUG isSpuriousInt => isSpuriousInt_37

  <bb 13> :
  # isSpuriousInt_17 = PHI <isSpuriousInt_28(2), isSpuriousInt_16(8), isSpuriousInt_16(9), isSpuriousInt_37(12)>
  # DEBUG isSpuriousInt => isSpuriousInt_17
  # DEBUG BEGIN_STMT
  if (isSpuriousInt_17 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  pBase_25->ESR1 ={v} 3145730;

  <bb 15> :
  return;

}


FlexCAN_Ip_GetControllerRxErrorCounter (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  int _1;
  _Bool _2;
  long unsigned int _3;
  long unsigned int _4;
  uint8 _9;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_5(D);
  base_7 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_7
  # DEBUG BEGIN_STMT
  _2 = instance_5(D) <= 2;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 ={v} base_7->ECR;
  _4 = _3 >> 8;
  _9 = (uint8) _4;
  return _9;

}


FlexCAN_Ip_GetControllerTxErrorCounter (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  int _1;
  _Bool _2;
  long unsigned int _3;
  uint8 _8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_4(D);
  base_6 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_6
  # DEBUG BEGIN_STMT
  _2 = instance_4(D) <= 2;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 ={v} base_6->ECR;
  _8 = (uint8) _3;
  return _8;

}


FlexCAN_Ip_GetErrorStatus (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  int _1;
  _Bool _2;
  uint32 _7;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_3(D);
  base_5 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_5
  # DEBUG BEGIN_STMT
  _2 = instance_3(D) <= 2;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _7 ={v} base_5->ESR1;
  return _7;

}


FlexCAN_Ip_ClearErrorStatus (uint8 instance, uint32 error)
{
  struct FLEXCAN_Type * base;
  int _1;
  _Bool _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_3(D);
  base_5 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_5
  # DEBUG BEGIN_STMT
  _2 = instance_3(D) <= 2;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  base_5->ESR1 ={v} error_7(D);
  return;

}


FlexCAN_IRQHandler (uint8 instance, uint32 startMbIdx, uint32 endMbIdx)
{
  uint32 mb_idx;
  boolean bIsSpuriousInt;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  uint32 flag_reg;
  uint32 u32MbHandle;
  int _1;
  int _2;
  _Bool _3;
  _Bool _4;
  unsigned char _5;
  unsigned char _6;
  _Bool _7;
  <unnamed type> _8;
  <unnamed type> _9;
  unsigned char _10;
  <unnamed type> _11;

  <bb 2> :
  # DEBUG BEGIN_STMT
  u32MbHandle_23 = 0;
  # DEBUG u32MbHandle => u32MbHandle_23
  # DEBUG BEGIN_STMT
  flag_reg_24 = 0;
  # DEBUG flag_reg => flag_reg_24
  # DEBUG BEGIN_STMT
  _1 = (int) instance_25(D);
  base_27 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_27
  # DEBUG BEGIN_STMT
  _2 = (int) instance_25(D);
  state_28 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_28
  # DEBUG BEGIN_STMT
  bIsSpuriousInt_29 = 1;
  # DEBUG bIsSpuriousInt => bIsSpuriousInt_29
  # DEBUG BEGIN_STMT
  mb_idx_31 = endMbIdx_30(D);
  # DEBUG mb_idx => mb_idx_31
  # DEBUG BEGIN_STMT
  _3 = instance_25(D) <= 2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  _4 = endMbIdx_30(D) <= 31;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  if (state_28 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _5 = FlexCAN_GetMsgBuffIntStatusFlag (base_27, mb_idx_31);
  flag_reg_39 = (uint32) _5;
  # DEBUG flag_reg => flag_reg_39
  # DEBUG BEGIN_STMT
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  mb_idx_40 = mb_idx_15 + 4294967295;
  # DEBUG mb_idx => mb_idx_40
  # DEBUG BEGIN_STMT
  _6 = FlexCAN_GetMsgBuffIntStatusFlag (base_27, mb_idx_40);
  flag_reg_42 = (uint32) _6;
  # DEBUG flag_reg => flag_reg_42

  <bb 5> :
  # flag_reg_13 = PHI <flag_reg_39(3), flag_reg_42(4)>
  # mb_idx_15 = PHI <mb_idx_31(3), mb_idx_40(4)>
  # DEBUG mb_idx => mb_idx_15
  # DEBUG flag_reg => flag_reg_13
  # DEBUG BEGIN_STMT
  if (flag_reg_13 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  if (mb_idx_15 > startMbIdx_34(D))
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (flag_reg_13 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  bIsSpuriousInt_43 = 0;
  # DEBUG bIsSpuriousInt => bIsSpuriousInt_43
  # DEBUG BEGIN_STMT
  u32MbHandle_44 = mb_idx_15;
  # DEBUG u32MbHandle => u32MbHandle_44
  # DEBUG BEGIN_STMT
  _7 = state_28->bIsLegacyFifoEn;
  if (_7 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  if (mb_idx_15 <= 7)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  FlexCAN_IRQHandlerRxFIFO (instance_25(D), mb_idx_15);
  # DEBUG BEGIN_STMT
  u32MbHandle_46 = 0;
  # DEBUG u32MbHandle => u32MbHandle_46
  goto <bb 13>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _8 ={v} state_28->mbs[u32MbHandle_44].state;
  if (_8 == 1)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  FlexCAN_IRQHandlerRxMB (instance_25(D), mb_idx_15);

  <bb 13> :
  # u32MbHandle_12 = PHI <u32MbHandle_46(10), u32MbHandle_44(11), u32MbHandle_44(12)>
  # DEBUG u32MbHandle => u32MbHandle_12
  # DEBUG BEGIN_STMT
  _9 ={v} state_28->mbs[u32MbHandle_12].state;
  if (_9 == 2)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  FlexCAN_IRQHandlerTxMB (instance_25(D), mb_idx_15);

  <bb 15> :
  # DEBUG BEGIN_STMT
  _10 = FlexCAN_GetMsgBuffIntStatusFlag (base_27, mb_idx_15);
  if (_10 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _11 ={v} state_28->mbs[u32MbHandle_12].state;
  if (_11 == 0)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (base_27, mb_idx_15);

  <bb 18> :
  # bIsSpuriousInt_14 = PHI <bIsSpuriousInt_29(7), bIsSpuriousInt_43(15), bIsSpuriousInt_43(16), bIsSpuriousInt_43(17)>
  # DEBUG bIsSpuriousInt => bIsSpuriousInt_14
  # DEBUG BEGIN_STMT
  if (bIsSpuriousInt_14 != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  FlexCAN_ProcessSpuriousInterruptMB (instance_25(D), startMbIdx_34(D), endMbIdx_30(D));
  goto <bb 23>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  mb_idx_35 = startMbIdx_34(D);
  # DEBUG mb_idx => mb_idx_35
  goto <bb 22>; [INV]

  <bb 21> :
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (base_27, mb_idx_16);
  # DEBUG BEGIN_STMT
  mb_idx_37 = mb_idx_16 + 1;
  # DEBUG mb_idx => mb_idx_37

  <bb 22> :
  # mb_idx_16 = PHI <mb_idx_35(20), mb_idx_37(21)>
  # DEBUG mb_idx => mb_idx_16
  # DEBUG BEGIN_STMT
  if (mb_idx_16 <= endMbIdx_30(D))
    goto <bb 21>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 23> :
  return;

}


FlexCAN_CompleteRxMessageFifoData (uint8 instance)
{
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  int _1;
  int _2;
  _Bool _3;
  <unnamed type> _4;
  _Bool _5;
  _Bool _6;
  _Bool _7;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_9(D);
  base_11 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_11
  # DEBUG BEGIN_STMT
  _2 = (int) instance_9(D);
  state_12 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_12
  # DEBUG BEGIN_STMT
  _3 = instance_9(D) <= 2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  _4 = state_12->transferType;
  if (_4 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _5 = state_12->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_11, instance_9(D), 5, 0, _5);
  # DEBUG BEGIN_STMT
  _6 = state_12->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_11, instance_9(D), 6, 0, _6);
  # DEBUG BEGIN_STMT
  _7 = state_12->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_11, instance_9(D), 7, 0, _7);

  <bb 4> :
  # DEBUG BEGIN_STMT
  state_12->mbs[0].pMBmessage = 0B;
  # DEBUG BEGIN_STMT
  state_12->mbs[0].state ={v} 0;
  return;

}


FlexCAN_Ip_GetTransferStatus (uint8 instance, uint8 mb_idx)
{
  Flexcan_Ip_StatusType status;
  const struct Flexcan_Ip_StateType * state;
  int _1;
  _Bool _2;
  unsigned char _3;
  _Bool _4;
  int _5;
  <unnamed type> _6;
  Flexcan_Ip_StatusType _17;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_8(D);
  state_10 = Flexcan_Ip_apxState[_1];
  # DEBUG state => state_10
  # DEBUG BEGIN_STMT
  status_11 = 1;
  # DEBUG status => status_11
  # DEBUG BEGIN_STMT
  _2 = instance_8(D) <= 2;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = mb_idx_13(D) + 224;
  _4 = _3 > 222;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  if (mb_idx_13(D) <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _5 = (int) mb_idx_13(D);
  _6 ={v} state_10->mbs[_5].state;
  if (_6 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  status_16 = 0;
  # DEBUG status => status_16
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  status_15 = 2;
  # DEBUG status => status_15

  <bb 6> :
  # status_7 = PHI <status_11(2), status_16(4), status_15(5)>
  # DEBUG status => status_7
  # DEBUG BEGIN_STMT
  _17 = status_7;
  return _17;

}


FlexCAN_Ip_ConfigRemoteResponseMb (uint8 instance, uint8 mb_idx, const struct Flexcan_Ip_DataInfoType * tx_info, uint32 msg_id, const uint8 * mb_data)
{
  volatile uint32 * pMbAddr;
  const struct Flexcan_Ip_StateType * const state;
  struct FLEXCAN_Type * pBase;
  struct Flexcan_Ip_MsbuffCodeStatusType cs;
  Flexcan_Ip_StatusType result;
  int _1;
  int _2;
  _Bool _3;
  _Bool _4;
  long unsigned int _5;
  long unsigned int _6;
  _Bool _7;
  long unsigned int _8;
  unsigned char _9;
  long unsigned int _10;
  unsigned char _11;
  _Bool _12;
  _Bool _13;
  long unsigned int _14;
  _Bool _15;
  long unsigned int _16;
  <unnamed type> _17;
  long unsigned int _18;
  long unsigned int _19;
  _Bool _20;
  _Bool _21;
  _Bool _22;
  long unsigned int _23;
  _Bool _24;
  Flexcan_Ip_StatusType _57;

  <bb 2> :
  # DEBUG BEGIN_STMT
  result_28 = 0;
  # DEBUG result => result_28
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) instance_29(D);
  pBase_31 = Flexcan_Ip_apxBase[_1];
  # DEBUG pBase => pBase_31
  # DEBUG BEGIN_STMT
  _2 = (int) instance_29(D);
  state_32 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_32
  # DEBUG BEGIN_STMT
  pMbAddr_33 = 0B;
  # DEBUG pMbAddr => pMbAddr_33
  # DEBUG BEGIN_STMT
  _3 = instance_29(D) <= 2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  _4 = tx_info_35(D) != 0B;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 ={v} pBase_31->CTRL2;
  _6 = _5 & 131072;
  _7 = _6 == 0;
  DevAssert (_7);
  # DEBUG BEGIN_STMT
  _8 = tx_info_35(D)->data_length;
  _9 = (unsigned char) _8;
  _10 = (long unsigned int) mb_idx_38(D);
  _11 = FlexCAN_GetMbPayloadSize (pBase_31, _10);
  _12 = _9 <= _11;
  DevAssert (_12);
  # DEBUG BEGIN_STMT
  _13 = state_32->bIsLegacyFifoEn;
  _14 = state_32->u32MaxMbNum;
  _15 = FlexCAN_IsMbOutOfRange (pBase_31, mb_idx_38(D), _13, _14);
  if (_15 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result_42 = 4;
  # DEBUG result => result_42

  <bb 4> :
  # result_25 = PHI <result_28(2), result_42(3)>
  # DEBUG result => result_25
  # DEBUG BEGIN_STMT
  if (result_25 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _16 = tx_info_35(D)->data_length;
  cs.dataLen = _16;
  # DEBUG BEGIN_STMT
  _17 = tx_info_35(D)->msg_id_type;
  cs.msgIdType = _17;
  # DEBUG BEGIN_STMT
  cs.code = 10;
  # DEBUG BEGIN_STMT
  cs.fd_enable = 0;
  # DEBUG BEGIN_STMT
  cs.enable_brs = 0;
  # DEBUG BEGIN_STMT
  cs.fd_padding = 0;
  # DEBUG BEGIN_STMT
  _18 = (long unsigned int) mb_idx_38(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase_31, _18);
  # DEBUG BEGIN_STMT
  _19 = (long unsigned int) mb_idx_38(D);
  pMbAddr_51 = FlexCAN_GetMsgBuffRegion (pBase_31, _19);
  # DEBUG pMbAddr => pMbAddr_51
  # DEBUG BEGIN_STMT
  _20 = tx_info_35(D)->is_remote;
  FlexCAN_SetTxMsgBuff (pMbAddr_51, &cs, msg_id_52(D), mb_data_53(D), _20);
  # DEBUG BEGIN_STMT
  _21 = tx_info_35(D)->is_polling;
  _22 = ~_21;
  if (_22 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _23 = (long unsigned int) mb_idx_38(D);
  _24 = state_32->isIntActive;
  result_56 = FlexCAN_SetMsgBuffIntCmd (pBase_31, instance_29(D), _23, 1, _24);
  # DEBUG result => result_56

  <bb 7> :
  # result_26 = PHI <result_25(4), result_25(5), result_56(6)>
  # DEBUG result => result_26
  # DEBUG BEGIN_STMT
  _57 = result_26;
  cs ={v} {CLOBBER};
  return _57;

}


FlexCAN_Ip_ConfigRxFifo_Privileged (uint8 instance, Flexcan_Ip_RxFifoIdElementFormatType id_format, const struct Flexcan_Ip_IdTableType * id_filter_table)
{
  boolean freeze;
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  int _2;
  _Bool _3;
  int _4;
  _Bool _5;
  _Bool _6;
  int _7;
  _Bool _8;
  Flexcan_Ip_StatusType _34;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = instance_15(D) <= 2;
  DevAssert (_1);
  # DEBUG BEGIN_STMT
  result_18 = 0;
  # DEBUG result => result_18
  # DEBUG BEGIN_STMT
  status_19 = 0;
  # DEBUG status => status_19
  # DEBUG BEGIN_STMT
  _2 = (int) instance_15(D);
  pBase_20 = Flexcan_Ip_apxBase[_2];
  # DEBUG pBase => pBase_20
  # DEBUG BEGIN_STMT
  _3 = FlexCAN_IsEnabled (pBase_20);
  _4 = (int) _3;
  _5 = _4 != 0;
  _6 = ~_5;
  _7 = (int) _6;
  disabled_22 = (boolean) _7;
  # DEBUG disabled => disabled_22
  # DEBUG BEGIN_STMT
  if (disabled_22 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result_24 = FlexCAN_Enable (pBase_20);
  # DEBUG result => result_24

  <bb 4> :
  # result_9 = PHI <result_18(2), result_24(3)>
  # DEBUG result => result_9
  # DEBUG BEGIN_STMT
  freeze_26 = FlexCAN_IsFreezeMode (pBase_20);
  # DEBUG freeze => freeze_26
  # DEBUG BEGIN_STMT
  _8 = ~freeze_26;
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (result_9 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  result_27 = 1;
  # DEBUG result => result_27

  <bb 7> :
  # result_10 = PHI <result_9(4), result_9(5), result_27(6)>
  # DEBUG result => result_10
  # DEBUG BEGIN_STMT
  if (result_10 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetRxFifoFilter (pBase_20, id_format_28(D), id_filter_table_29(D));

  <bb 9> :
  # DEBUG BEGIN_STMT
  if (disabled_22 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  status_32 = FlexCAN_Disable (pBase_20);
  # DEBUG status => status_32
  # DEBUG BEGIN_STMT
  if (status_32 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  result_33 = status_32;
  # DEBUG result => result_33

  <bb 12> :
  # result_11 = PHI <result_10(9), result_10(10), result_33(11)>
  # DEBUG result => result_11
  # DEBUG BEGIN_STMT
  _34 = result_11;
  return _34;

}


FlexCAN_Ip_RxFifoBlocking (uint8 instance, struct Flexcan_Ip_MsgBuffType * data, uint32 timeout)
{
  Flexcan_Ip_StatusType result;
  _Bool _1;
  Flexcan_Ip_StatusType _14;

  <bb 2> :
  # DEBUG BEGIN_STMT
  result_4 = 0;
  # DEBUG result => result_4
  # DEBUG BEGIN_STMT
  _1 = instance_5(D) <= 2;
  DevAssert (_1);
  # DEBUG BEGIN_STMT
  result_10 = FlexCAN_StartRxMessageFifoData (instance_5(D), data_8(D));
  # DEBUG result => result_10
  # DEBUG BEGIN_STMT
  if (result_10 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result_13 = FlexCAN_ProccessLegacyRxFIFO (instance_5(D), timeout_11(D));
  # DEBUG result => result_13

  <bb 4> :
  # result_2 = PHI <result_10(2), result_13(3)>
  # DEBUG result => result_2
  # DEBUG BEGIN_STMT
  _14 = result_2;
  return _14;

}


FlexCAN_Ip_RxFifo (uint8 instance, struct Flexcan_Ip_MsgBuffType * data)
{
  Flexcan_Ip_StatusType result;
  _Bool _1;
  Flexcan_Ip_StatusType _9;

  <bb 2> :
  # DEBUG BEGIN_STMT
  result_2 = 0;
  # DEBUG result => result_2
  # DEBUG BEGIN_STMT
  _1 = instance_3(D) <= 2;
  DevAssert (_1);
  # DEBUG BEGIN_STMT
  result_8 = FlexCAN_StartRxMessageFifoData (instance_3(D), data_6(D));
  # DEBUG result => result_8
  # DEBUG BEGIN_STMT
  _9 = result_8;
  return _9;

}


FlexCAN_Ip_ReceiveBlocking (uint8 instance, uint8 mb_idx, struct Flexcan_Ip_MsgBuffType * data, boolean isPolling, uint32 u32TimeoutMs)
{
  struct FLEXCAN_Type * base;
  struct Flexcan_Ip_StateType * state;
  uint32 mS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  Flexcan_Ip_StatusType result;
  long unsigned int _1;
  _Bool _2;
  int _3;
  int _4;
  _Bool _5;
  long unsigned int _6;
  _Bool _7;
  long unsigned int _8;
  long unsigned int _9;
  unsigned char _10;
  long unsigned int _11;
  int _12;
  <unnamed type> _13;
  _Bool _14;
  long unsigned int _15;
  _Bool _16;
  int _17;
  <unnamed type> _18;
  int _19;
  long unsigned int _52;
  Flexcan_Ip_StatusType _59;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  timeStart = 0;
  # DEBUG BEGIN_STMT
  timeElapsed_32 = 0;
  # DEBUG timeElapsed => timeElapsed_32
  # DEBUG BEGIN_STMT
  _1 = u32TimeoutMs_33(D) * 1000;
  mS2Ticks_35 = OsIf_MicrosToTicks (_1, 0);
  # DEBUG mS2Ticks => mS2Ticks_35
  # DEBUG BEGIN_STMT
  _2 = instance_36(D) <= 2;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = (int) instance_36(D);
  state_38 = Flexcan_Ip_apxState[_3];
  # DEBUG state => state_38
  # DEBUG BEGIN_STMT
  _4 = (int) instance_36(D);
  base_39 = Flexcan_Ip_apxBase[_4];
  # DEBUG base => base_39
  # DEBUG BEGIN_STMT
  result_44 = FlexCAN_StartRxMessageBufferData (instance_36(D), mb_idx_40(D), data_41(D), isPolling_42(D));
  # DEBUG result => result_44
  # DEBUG BEGIN_STMT
  if (result_44 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _5 = ~isPolling_42(D);
  if (_5 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _6 = (long unsigned int) mb_idx_40(D);
  _7 = state_38->isIntActive;
  result_46 = FlexCAN_SetMsgBuffIntCmd (base_39, instance_36(D), _6, 1, _7);
  # DEBUG result => result_46

  <bb 5> :
  # result_20 = PHI <result_44(2), result_44(3), result_46(4)>
  # DEBUG result => result_20
  # DEBUG BEGIN_STMT
  if (result_20 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _8 = OsIf_GetCounter (0);
  timeStart = _8;
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  if (isPolling_42(D) != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _9 = (long unsigned int) mb_idx_40(D);
  _10 = FlexCAN_GetBuffStatusFlag (base_39, _9);
  if (_10 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _11 = (long unsigned int) mb_idx_40(D);
  FlexCAN_IRQHandlerRxMB (instance_36(D), _11);

  <bb 10> :
  # DEBUG BEGIN_STMT
  _52 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_53 = _52 + timeElapsed_23;
  # DEBUG timeElapsed => timeElapsed_53
  # DEBUG BEGIN_STMT
  if (timeElapsed_53 >= mS2Ticks_35)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  result_54 = 3;
  # DEBUG result => result_54
  # DEBUG BEGIN_STMT
  goto <bb 13>; [INV]

  <bb 12> :
  # timeElapsed_23 = PHI <timeElapsed_32(6), timeElapsed_53(10)>
  # DEBUG timeElapsed => timeElapsed_23
  # DEBUG BEGIN_STMT
  _12 = (int) mb_idx_40(D);
  _13 ={v} state_38->mbs[_12].state;
  if (_13 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # result_21 = PHI <result_20(5), result_54(11), result_20(12)>
  # DEBUG result => result_21
  # DEBUG BEGIN_STMT
  if (result_21 == 3)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 14> :
  _14 = ~isPolling_42(D);
  if (_14 != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  _15 = (long unsigned int) mb_idx_40(D);
  _16 = state_38->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_39, instance_36(D), _15, 0, _16);

  <bb 16> :
  # DEBUG BEGIN_STMT
  if (result_21 != 4)
    goto <bb 17>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 17> :
  if (result_21 != 2)
    goto <bb 18>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  _17 = (int) mb_idx_40(D);
  _18 ={v} state_38->mbs[_17].state;
  if (_18 == 0)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  # DEBUG BEGIN_STMT
  result_58 = 0;
  # DEBUG result => result_58
  goto <bb 21>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  _19 = (int) mb_idx_40(D);
  state_38->mbs[_19].state ={v} 0;
  # DEBUG BEGIN_STMT
  result_57 = 3;
  # DEBUG result => result_57

  <bb 21> :
  # result_22 = PHI <result_21(16), result_21(17), result_58(19), result_57(20)>
  # DEBUG result => result_22
  # DEBUG BEGIN_STMT
  _59 = result_22;
  timeStart ={v} {CLOBBER};
  return _59;

}


FlexCAN_Ip_Receive (uint8 instance, uint8 mb_idx, struct Flexcan_Ip_MsgBuffType * data, boolean isPolling)
{
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType result;
  int _1;
  int _2;
  _Bool _3;
  _Bool _4;
  long unsigned int _5;
  _Bool _6;
  Flexcan_Ip_StatusType _21;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) instance_9(D);
  base_11 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_11
  # DEBUG BEGIN_STMT
  _2 = (int) instance_9(D);
  state_12 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_12
  # DEBUG BEGIN_STMT
  _3 = instance_9(D) <= 2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  result_18 = FlexCAN_StartRxMessageBufferData (instance_9(D), mb_idx_14(D), data_15(D), isPolling_16(D));
  # DEBUG result => result_18
  # DEBUG BEGIN_STMT
  if (result_18 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _4 = ~isPolling_16(D);
  if (_4 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _5 = (long unsigned int) mb_idx_14(D);
  _6 = state_12->isIntActive;
  result_20 = FlexCAN_SetMsgBuffIntCmd (base_11, instance_9(D), _5, 1, _6);
  # DEBUG result => result_20

  <bb 5> :
  # result_7 = PHI <result_18(2), result_18(3), result_20(4)>
  # DEBUG result => result_7
  # DEBUG BEGIN_STMT
  _21 = result_7;
  return _21;

}


FlexCAN_Ip_ConfigRxMb (uint8 instance, uint8 mb_idx, const struct Flexcan_Ip_DataInfoType * rx_info, uint32 msg_id)
{
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  struct Flexcan_Ip_MsbuffCodeStatusType cs;
  Flexcan_Ip_StatusType eResult;
  int _1;
  int _2;
  _Bool _3;
  _Bool _4;
  _Bool _5;
  long unsigned int _6;
  _Bool _7;
  long unsigned int _8;
  long unsigned int _9;
  <unnamed type> _10;
  _Bool _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  Flexcan_Ip_StatusType _39;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eResult_17 = 0;
  # DEBUG eResult => eResult_17
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) instance_18(D);
  base_20 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_20
  # DEBUG BEGIN_STMT
  _2 = (int) instance_18(D);
  state_21 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_21
  # DEBUG BEGIN_STMT
  _3 = instance_18(D) <= 2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  _4 = rx_info_23(D) != 0B;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = state_21->bIsLegacyFifoEn;
  _6 = state_21->u32MaxMbNum;
  _7 = FlexCAN_IsMbOutOfRange (base_20, mb_idx_25(D), _5, _6);
  if (_7 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  eResult_38 = 4;
  # DEBUG eResult => eResult_38
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _8 = (long unsigned int) mb_idx_25(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (base_20, _8);
  # DEBUG BEGIN_STMT
  _9 = rx_info_23(D)->data_length;
  cs.dataLen = _9;
  # DEBUG BEGIN_STMT
  _10 = rx_info_23(D)->msg_id_type;
  cs.msgIdType = _10;
  # DEBUG BEGIN_STMT
  _11 = rx_info_23(D)->fd_enable;
  cs.fd_enable = _11;
  # DEBUG BEGIN_STMT
  cs.code = 15;
  # DEBUG BEGIN_STMT
  _12 = (long unsigned int) mb_idx_25(D);
  FlexCAN_SetRxMsgBuff (base_20, _12, &cs, msg_id_32(D));
  # DEBUG BEGIN_STMT
  cs.code = 0;
  # DEBUG BEGIN_STMT
  _13 = (long unsigned int) mb_idx_25(D);
  FlexCAN_SetRxMsgBuff (base_20, _13, &cs, msg_id_32(D));
  # DEBUG BEGIN_STMT
  cs.code = 4;
  # DEBUG BEGIN_STMT
  _14 = (long unsigned int) mb_idx_25(D);
  FlexCAN_SetRxMsgBuff (base_20, _14, &cs, msg_id_32(D));

  <bb 5> :
  # eResult_15 = PHI <eResult_38(3), eResult_17(4)>
  # DEBUG eResult => eResult_15
  # DEBUG BEGIN_STMT
  _39 = eResult_15;
  cs ={v} {CLOBBER};
  return _39;

}


FlexCAN_Ip_Send (uint8 instance, uint8 mb_idx, const struct Flexcan_Ip_DataInfoType * tx_info, uint32 msg_id, const uint8 * mb_data)
{
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType result;
  int _1;
  int _2;
  _Bool _3;
  _Bool _4;
  _Bool _5;
  _Bool _6;
  _Bool _7;
  _Bool _8;
  long unsigned int _9;
  _Bool _10;
  Flexcan_Ip_StatusType _29;

  <bb 2> :
  # DEBUG BEGIN_STMT
  result_13 = 1;
  # DEBUG result => result_13
  # DEBUG BEGIN_STMT
  _1 = (int) instance_14(D);
  base_16 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_16
  # DEBUG BEGIN_STMT
  _2 = (int) instance_14(D);
  state_17 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_17
  # DEBUG BEGIN_STMT
  _3 = instance_14(D) <= 2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  _4 = tx_info_19(D) != 0B;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = FlexCAN_IsListenOnlyModeEnabled (base_16);
  _6 = ~_5;
  if (_6 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result_26 = FlexCAN_StartSendData (instance_14(D), mb_idx_22(D), tx_info_19(D), msg_id_23(D), mb_data_24(D));
  # DEBUG result => result_26
  # DEBUG BEGIN_STMT
  if (result_26 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _7 = tx_info_19(D)->is_polling;
  _8 = ~_7;
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _9 = (long unsigned int) mb_idx_22(D);
  _10 = state_17->isIntActive;
  result_28 = FlexCAN_SetMsgBuffIntCmd (base_16, instance_14(D), _9, 1, _10);
  # DEBUG result => result_28

  <bb 6> :
  # result_11 = PHI <result_13(2), result_26(3), result_26(4), result_28(5)>
  # DEBUG result => result_11
  # DEBUG BEGIN_STMT
  _29 = result_11;
  return _29;

}


FlexCAN_Ip_Init_Privileged (uint8 Flexcan_Ip_u8Instance, struct Flexcan_Ip_StateType * Flexcan_Ip_pState, const struct Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
  uint32 i;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType eResult;
  int _1;
  _Bool _2;
  _Bool _3;
  _Bool _4;
  _Bool _5;
  _Bool _6;
  _Bool _7;
  _Bool _8;
  _Bool _9;
  const struct Flexcan_Ip_TimeSegmentType * _10;
  const struct Flexcan_Ip_TimeSegmentType * _11;
  const struct Flexcan_Ip_TimeSegmentType * _12;
  <unnamed type> _13;
  <unnamed type> _14;
  void (*<T626>) (uint8, Flexcan_Ip_EventType, uint32, const struct Flexcan_Ip_StateType *) _15;
  void (*<T626>) (uint8, Flexcan_Ip_EventType, uint32, const struct Flexcan_Ip_StateType *) _16;
  _Bool _17;
  long unsigned int _18;
  int _19;
  Flexcan_Ip_StatusType _57;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eResult_25 = 0;
  # DEBUG eResult => eResult_25
  # DEBUG BEGIN_STMT
  _1 = (int) Flexcan_Ip_u8Instance_26(D);
  pBase_28 = Flexcan_Ip_apxBase[_1];
  # DEBUG pBase => pBase_28
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = Flexcan_Ip_u8Instance_26(D) <= 2;
  DevAssert (_2);
  # DEBUG BEGIN_STMT
  _3 = Flexcan_Ip_pData_30(D) != 0B;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  _4 = Flexcan_Ip_pData_30(D)->fd_enable;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _5 = FlexCAN_IsFDAvailable (pBase_28);
  _6 = Flexcan_Ip_pData_30(D)->fd_enable;
  _7 = _5 == _6;
  DevAssert (_7);

  <bb 4> :
  # DEBUG BEGIN_STMT
  eResult_35 = FlexCAN_InitController (pBase_28, Flexcan_Ip_pData_30(D));
  # DEBUG eResult => eResult_35
  # DEBUG BEGIN_STMT
  if (eResult_35 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _8 = Flexcan_Ip_pData_30(D)->fd_enable;
  FlexCAN_EnableExtCbt (pBase_28, _8);
  # DEBUG BEGIN_STMT
  _9 = Flexcan_Ip_pData_30(D)->fd_enable;
  if (_9 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _10 = &Flexcan_Ip_pData_30(D)->bitrate;
  FlexCAN_SetExtendedTimeSegments (pBase_28, _10);
  # DEBUG BEGIN_STMT
  _11 = &Flexcan_Ip_pData_30(D)->bitrate_cbt;
  FlexCAN_SetFDTimeSegments (pBase_28, _11);
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _12 = &Flexcan_Ip_pData_30(D)->bitrate;
  FlexCAN_SetTimeSegments (pBase_28, _12);

  <bb 8> :
  # DEBUG BEGIN_STMT
  _13 = Flexcan_Ip_pData_30(D)->flexcanMode;
  FlexCAN_SetOperationMode (pBase_28, _13);
  # DEBUG BEGIN_STMT
  i_41 = 0;
  # DEBUG i => i_41
  goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Flexcan_Ip_pState_42(D)->mbs[i_20].isPolling = 1;
  # DEBUG BEGIN_STMT
  Flexcan_Ip_pState_42(D)->mbs[i_20].pMBmessage = 0B;
  # DEBUG BEGIN_STMT
  Flexcan_Ip_pState_42(D)->mbs[i_20].state ={v} 0;
  # DEBUG BEGIN_STMT
  Flexcan_Ip_pState_42(D)->mbs[i_20].time_stamp = 0;
  # DEBUG BEGIN_STMT
  i_56 = i_20 + 1;
  # DEBUG i => i_56

  <bb 10> :
  # i_20 = PHI <i_41(8), i_56(9)>
  # DEBUG i => i_20
  # DEBUG BEGIN_STMT
  if (i_20 <= 31)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _14 = Flexcan_Ip_pData_30(D)->transfer_type;
  Flexcan_Ip_pState_42(D)->transferType = _14;
  # DEBUG BEGIN_STMT
  _15 = Flexcan_Ip_pData_30(D)->Callback;
  Flexcan_Ip_pState_42(D)->callback = _15;
  # DEBUG BEGIN_STMT
  Flexcan_Ip_pState_42(D)->callbackParam = 0B;
  # DEBUG BEGIN_STMT
  _16 = Flexcan_Ip_pData_30(D)->ErrorCallback;
  Flexcan_Ip_pState_42(D)->error_callback = _16;
  # DEBUG BEGIN_STMT
  Flexcan_Ip_pState_42(D)->errorCallbackParam = 0B;
  # DEBUG BEGIN_STMT
  _17 = Flexcan_Ip_pData_30(D)->is_rx_fifo_needed;
  Flexcan_Ip_pState_42(D)->bIsLegacyFifoEn = _17;
  # DEBUG BEGIN_STMT
  _18 = Flexcan_Ip_pData_30(D)->max_num_mb;
  Flexcan_Ip_pState_42(D)->u32MaxMbNum = _18;
  # DEBUG BEGIN_STMT
  Flexcan_Ip_pState_42(D)->isIntActive = 1;
  # DEBUG BEGIN_STMT
  _19 = (int) Flexcan_Ip_u8Instance_26(D);
  Flexcan_Ip_apxState[_19] = Flexcan_Ip_pState_42(D);

  <bb 12> :
  # DEBUG BEGIN_STMT
  _57 = eResult_35;
  return _57;

}


FlexCAN_AbortRxTransfer (uint8 u8Instance, uint8 mb_idx)
{
  volatile uint32 * flexcan_mb;
  uint32 flexcan_mb_config;
  uint32 val2;
  uint32 val1;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * pBase;
  int _1;
  int _2;
  int _3;
  _Bool _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  _Bool _9;
  long unsigned int _10;
  long unsigned int _11;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) u8Instance_14(D);
  pBase_16 = Flexcan_Ip_apxBase[_1];
  # DEBUG pBase => pBase_16
  # DEBUG BEGIN_STMT
  _2 = (int) u8Instance_14(D);
  state_17 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_17
  # DEBUG BEGIN_STMT
  val1_18 = 0;
  # DEBUG val1 => val1_18
  # DEBUG BEGIN_STMT
  val2_19 = 0;
  # DEBUG val2 => val2_19
  # DEBUG BEGIN_STMT
  flexcan_mb_config_20 = 0;
  # DEBUG flexcan_mb_config => flexcan_mb_config_20
  # DEBUG BEGIN_STMT
  flexcan_mb_21 = 0B;
  # DEBUG flexcan_mb => flexcan_mb_21
  # DEBUG BEGIN_STMT
  _3 = (int) mb_idx_22(D);
  state_17->mbs[_3].state ={v} 0;
  # DEBUG BEGIN_STMT
  _4 = state_17->bIsLegacyFifoEn;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _5 ={v} pBase_16->CTRL2;
  _6 = _5 >> 24;
  val1_33 = _6 & 15;
  # DEBUG val1 => val1_33
  # DEBUG BEGIN_STMT
  val2_35 = RxFifoOcuppiedLastMsgBuff (val1_33);
  # DEBUG val2 => val2_35
  # DEBUG BEGIN_STMT
  _7 = (long unsigned int) mb_idx_22(D);
  if (val2_35 < _7)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _8 = (long unsigned int) mb_idx_22(D);
  flexcan_mb_37 = FlexCAN_GetMsgBuffRegion (pBase_16, _8);
  # DEBUG flexcan_mb => flexcan_mb_37
  # DEBUG BEGIN_STMT
  flexcan_mb_config_38 ={v} *flexcan_mb_37;
  # DEBUG flexcan_mb_config => flexcan_mb_config_38
  # DEBUG BEGIN_STMT
  flexcan_mb_config_39 = flexcan_mb_config_38 & 4043309055;
  # DEBUG flexcan_mb_config => flexcan_mb_config_39
  # DEBUG BEGIN_STMT
  flexcan_mb_config_40 = flexcan_mb_config_39;
  # DEBUG flexcan_mb_config => flexcan_mb_config_40
  # DEBUG BEGIN_STMT
  *flexcan_mb_37 ={v} flexcan_mb_config_40;
  # DEBUG BEGIN_STMT
  flexcan_mb_config_42 = flexcan_mb_config_40 & 4043309055;
  # DEBUG flexcan_mb_config => flexcan_mb_config_42
  # DEBUG BEGIN_STMT
  flexcan_mb_config_43 = flexcan_mb_config_42 | 67108864;
  # DEBUG flexcan_mb_config => flexcan_mb_config_43
  # DEBUG BEGIN_STMT
  *flexcan_mb_37 ={v} flexcan_mb_config_43;

  <bb 5> :
  # DEBUG BEGIN_STMT
  if (mb_idx_22(D) == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _9 = state_17->isIntActive;
  FLEXCAN_ClearMsgBuffIntCmd (pBase_16, u8Instance_14(D), 5, _9);
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _10 = (long unsigned int) mb_idx_22(D);
  flexcan_mb_25 = FlexCAN_GetMsgBuffRegion (pBase_16, _10);
  # DEBUG flexcan_mb => flexcan_mb_25
  # DEBUG BEGIN_STMT
  flexcan_mb_config_26 ={v} *flexcan_mb_25;
  # DEBUG flexcan_mb_config => flexcan_mb_config_26
  # DEBUG BEGIN_STMT
  flexcan_mb_config_27 = flexcan_mb_config_26 & 4043309055;
  # DEBUG flexcan_mb_config => flexcan_mb_config_27
  # DEBUG BEGIN_STMT
  flexcan_mb_config_28 = flexcan_mb_config_27;
  # DEBUG flexcan_mb_config => flexcan_mb_config_28
  # DEBUG BEGIN_STMT
  *flexcan_mb_25 ={v} flexcan_mb_config_28;
  # DEBUG BEGIN_STMT
  flexcan_mb_config_30 = flexcan_mb_config_28 & 4043309055;
  # DEBUG flexcan_mb_config => flexcan_mb_config_30
  # DEBUG BEGIN_STMT
  flexcan_mb_config_31 = flexcan_mb_config_30 | 67108864;
  # DEBUG flexcan_mb_config => flexcan_mb_config_31
  # DEBUG BEGIN_STMT
  *flexcan_mb_25 ={v} flexcan_mb_config_31;

  <bb 8> :
  # DEBUG BEGIN_STMT
  _11 = (long unsigned int) mb_idx_22(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase_16, _11);
  return;

}


FlexCAN_AbortTxTransfer (uint8 u8Instance, uint8 mb_idx)
{
  volatile uint32 * flexcan_mb;
  uint32 uS2Ticks;
  uint32 flexcan_mb_config;
  uint32 timeElapsed;
  uint32 timeStart;
  Flexcan_Ip_StatusType result;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * pBase;
  int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  unsigned char _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  int _12;
  long unsigned int _42;
  Flexcan_Ip_StatusType _50;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) u8Instance_19(D);
  pBase_21 = Flexcan_Ip_apxBase[_1];
  # DEBUG pBase => pBase_21
  # DEBUG BEGIN_STMT
  _2 = (int) u8Instance_19(D);
  state_22 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_22
  # DEBUG BEGIN_STMT
  result_23 = 0;
  # DEBUG result => result_23
  # DEBUG BEGIN_STMT
  timeStart = 0;
  # DEBUG BEGIN_STMT
  timeElapsed_25 = 0;
  # DEBUG timeElapsed => timeElapsed_25
  # DEBUG BEGIN_STMT
  flexcan_mb_config_26 = 0;
  # DEBUG flexcan_mb_config => flexcan_mb_config_26
  # DEBUG BEGIN_STMT
  uS2Ticks_27 = 0;
  # DEBUG uS2Ticks => uS2Ticks_27
  # DEBUG BEGIN_STMT
  flexcan_mb_28 = 0B;
  # DEBUG flexcan_mb => flexcan_mb_28
  # DEBUG BEGIN_STMT
  _3 = (long unsigned int) mb_idx_29(D);
  flexcan_mb_31 = FlexCAN_GetMsgBuffRegion (pBase_21, _3);
  # DEBUG flexcan_mb => flexcan_mb_31
  # DEBUG BEGIN_STMT
  flexcan_mb_config_32 ={v} *flexcan_mb_31;
  # DEBUG flexcan_mb_config => flexcan_mb_config_32
  # DEBUG BEGIN_STMT
  flexcan_mb_config_33 = flexcan_mb_config_32 & 4043309055;
  # DEBUG flexcan_mb_config => flexcan_mb_config_33
  # DEBUG BEGIN_STMT
  flexcan_mb_config_34 = flexcan_mb_config_33 | 150994944;
  # DEBUG flexcan_mb_config => flexcan_mb_config_34
  # DEBUG BEGIN_STMT
  *flexcan_mb_31 ={v} flexcan_mb_config_34;
  # DEBUG BEGIN_STMT
  uS2Ticks_37 = OsIf_MicrosToTicks (10000, 0);
  # DEBUG uS2Ticks => uS2Ticks_37
  # DEBUG BEGIN_STMT
  _4 = OsIf_GetCounter (0);
  timeStart = _4;
  # DEBUG BEGIN_STMT
  goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _42 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_43 = _42 + timeElapsed_16;
  # DEBUG timeElapsed => timeElapsed_43
  # DEBUG BEGIN_STMT
  if (timeElapsed_43 >= uS2Ticks_37)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  result_44 = 3;
  # DEBUG result => result_44
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 5> :
  # timeElapsed_16 = PHI <timeElapsed_25(2), timeElapsed_43(3)>
  # DEBUG timeElapsed => timeElapsed_16
  # DEBUG BEGIN_STMT
  _5 = (long unsigned int) mb_idx_29(D);
  _6 = FlexCAN_GetBuffStatusFlag (pBase_21, _5);
  if (_6 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # result_13 = PHI <result_44(4), result_23(5)>
  # DEBUG result => result_13
  # DEBUG BEGIN_STMT
  if (result_13 != 3)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  flexcan_mb_config_45 ={v} *flexcan_mb_31;
  # DEBUG flexcan_mb_config => flexcan_mb_config_45
  # DEBUG BEGIN_STMT
  _7 = flexcan_mb_config_45 >> 24;
  _8 = _7 & 15;
  if (_8 == 8)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  result_46 = 5;
  # DEBUG result => result_46

  <bb 9> :
  # result_14 = PHI <result_13(7), result_46(8)>
  # DEBUG result => result_14
  # DEBUG BEGIN_STMT
  _9 = flexcan_mb_config_45 >> 24;
  _10 = _9 & 15;
  if (_10 == 9)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  result_47 = 0;
  # DEBUG result => result_47

  <bb 11> :
  # result_15 = PHI <result_13(6), result_14(9), result_47(10)>
  # DEBUG result => result_15
  # DEBUG BEGIN_STMT
  _11 = (long unsigned int) mb_idx_29(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase_21, _11);
  # DEBUG BEGIN_STMT
  _12 = (int) mb_idx_29(D);
  state_22->mbs[_12].state ={v} 0;
  # DEBUG BEGIN_STMT
  _50 = result_15;
  timeStart ={v} {CLOBBER};
  return _50;

}


FlexCAN_ProcessSpuriousInterruptMB (uint8 instance, uint32 startMbIdx, uint32 endMbIdx)
{
  uint32 u32MbHandle;
  uint32 mb_idx;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  int _1;
  int _2;
  unsigned char _3;
  unsigned char _4;
  _Bool _5;
  _Bool _6;
  _Bool _7;
  <unnamed type> _8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_13(D);
  base_15 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_15
  # DEBUG BEGIN_STMT
  _2 = (int) instance_13(D);
  state_16 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_16
  # DEBUG BEGIN_STMT
  mb_idx_17 = 0;
  # DEBUG mb_idx => mb_idx_17
  # DEBUG BEGIN_STMT
  u32MbHandle_18 = 0;
  # DEBUG u32MbHandle => u32MbHandle_18
  # DEBUG BEGIN_STMT
  mb_idx_20 = startMbIdx_19(D);
  # DEBUG mb_idx => mb_idx_20
  goto <bb 12>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _3 = FlexCAN_GetBuffStatusFlag (base_15, mb_idx_9);
  if (_3 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 4> :
  _4 = FlexCAN_GetBuffStatusImask (base_15, mb_idx_9);
  if (_4 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  u32MbHandle_24 = mb_idx_9;
  # DEBUG u32MbHandle => u32MbHandle_24
  # DEBUG BEGIN_STMT
  _5 = state_16->bIsLegacyFifoEn;
  if (_5 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  if (mb_idx_9 <= 7)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  u32MbHandle_25 = 0;
  # DEBUG u32MbHandle => u32MbHandle_25

  <bb 8> :
  # u32MbHandle_10 = PHI <u32MbHandle_24(5), u32MbHandle_24(6), u32MbHandle_25(7)>
  # DEBUG u32MbHandle => u32MbHandle_10
  # DEBUG BEGIN_STMT
  _6 = state_16->mbs[u32MbHandle_10].isPolling;
  _7 = ~_6;
  if (_7 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (base_15, mb_idx_9);
  # DEBUG BEGIN_STMT
  _8 ={v} state_16->mbs[u32MbHandle_10].state;
  if (_8 == 2)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  state_16->mbs[u32MbHandle_10].state ={v} 0;
  # DEBUG BEGIN_STMT
  state_16->mbs[u32MbHandle_10].isPolling = 1;

  <bb 11> :
  # DEBUG BEGIN_STMT
  mb_idx_29 = mb_idx_9 + 1;
  # DEBUG mb_idx => mb_idx_29

  <bb 12> :
  # mb_idx_9 = PHI <mb_idx_20(2), mb_idx_29(11)>
  # DEBUG mb_idx => mb_idx_9
  # DEBUG BEGIN_STMT
  if (mb_idx_9 <= endMbIdx_21(D))
    goto <bb 3>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  return;

}


FlexCAN_IRQHandlerRxFIFO (uint8 instance, uint32 mb_idx)
{
  struct Flexcan_Ip_MsgBuffType data;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  int _1;
  int _2;
  struct Flexcan_Ip_MsgBuffType * _3;
  <unnamed type> _4;
  struct Flexcan_Ip_MsgBuffType * _5;
  void (*<T620>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _6;
  void (*<T620>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _7;
  <unnamed type> _8;
  void (*<T620>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _9;
  void (*<T620>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _10;
  void (*<T620>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _11;
  void (*<T620>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _12;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_16(D);
  base_18 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_18
  # DEBUG BEGIN_STMT
  _2 = (int) instance_16(D);
  state_19 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_19
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _3 = state_19->mbs[0].pMBmessage;
  if (_3 == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  state_19->mbs[0].pMBmessage = &data;

  <bb 4> :
  # DEBUG BEGIN_STMT
  switch (mb_idx_21(D)) <default: <L17> [INV], case 5: <L2> [INV], case 6: <L9> [INV], case 7: <L12> [INV]>

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  _4 ={v} state_19->mbs[0].state;
  if (_4 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _5 = state_19->mbs[0].pMBmessage;
  FlexCAN_ReadRxFifo (base_18, _5);
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (base_18, mb_idx_21(D));
  # DEBUG BEGIN_STMT
  state_19->mbs[0].state ={v} 0;
  # DEBUG BEGIN_STMT
  _6 = state_19->callback;
  if (_6 != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _7 = state_19->callback;
  _7 (instance_16(D), 1, 0, state_19);

  <bb 8> :
  # DEBUG BEGIN_STMT
  _8 ={v} state_19->mbs[0].state;
  if (_8 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  state_19->mbs[0].isPolling = 1;
  # DEBUG BEGIN_STMT
  FlexCAN_CompleteRxMessageFifoData (instance_16(D));
  goto <bb 14>; [INV]

  <bb 10> :
<L9>:
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (base_18, mb_idx_21(D));
  # DEBUG BEGIN_STMT
  _9 = state_19->callback;
  if (_9 != 0B)
    goto <bb 11>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _10 = state_19->callback;
  _10 (instance_16(D), 2, 0, state_19);
  goto <bb 14>; [INV]

  <bb 12> :
<L12>:
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (base_18, mb_idx_21(D));
  # DEBUG BEGIN_STMT
  _11 = state_19->callback;
  if (_11 != 0B)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _12 = state_19->callback;
  _12 (instance_16(D), 3, 0, state_19);

  <bb 14> :
<L17>:
  data ={v} {CLOBBER};
  return;

}


FlexCAN_IRQHandlerTxMB (uint8 u8Instance, uint32 u32MbIdx)
{
  boolean bCurrentIntStat;
  struct Flexcan_Ip_MsgBuffType mb;
  struct Flexcan_Ip_StateType * pState;
  struct FLEXCAN_Type * pBase;
  int _1;
  int _2;
  _Bool _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  void (*<T620>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _9;
  void (*<T620>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _10;
  <unnamed type> _11;
  _Bool _12;
  _Bool _13;
  _Bool _14;
  _Bool _15;
  _Bool _16;
  _Bool _17;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) u8Instance_21(D);
  pBase_23 = Flexcan_Ip_apxBase[_1];
  # DEBUG pBase => pBase_23
  # DEBUG BEGIN_STMT
  _2 = (int) u8Instance_21(D);
  pState_24 = Flexcan_Ip_apxState[_2];
  # DEBUG pState => pState_24
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  bCurrentIntStat_25 = 0;
  # DEBUG bCurrentIntStat => bCurrentIntStat_25
  # DEBUG BEGIN_STMT
  _3 = pState_24->mbs[u32MbIdx_26(D)].isRemote;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  FlexCAN_LockRxMsgBuff (pBase_23, u32MbIdx_26(D));
  # DEBUG BEGIN_STMT
  FlexCAN_GetMsgBuff (pBase_23, u32MbIdx_26(D), &mb);
  # DEBUG BEGIN_STMT
  FlexCAN_UnlockRxMsgBuff (pBase_23);
  # DEBUG BEGIN_STMT
  _4 = mb.time_stamp;
  pState_24->mbs[u32MbIdx_26(D)].time_stamp = _4;
  # DEBUG BEGIN_STMT
  _5 = mb.cs;
  _6 = _5 >> 24;
  _7 = _6 & 15;
  if (_7 == 4)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase_23, u32MbIdx_26(D));
  goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _8 = FlexCAN_GetMsgBuffTimestamp (pBase_23, u32MbIdx_26(D));
  pState_24->mbs[u32MbIdx_26(D)].time_stamp = _8;
  # DEBUG BEGIN_STMT
  FlexCAN_UnlockRxMsgBuff (pBase_23);
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase_23, u32MbIdx_26(D));

  <bb 6> :
  # DEBUG BEGIN_STMT
  pState_24->mbs[u32MbIdx_26(D)].state ={v} 0;
  # DEBUG BEGIN_STMT
  bCurrentIntStat_37 = pState_24->mbs[u32MbIdx_26(D)].isPolling;
  # DEBUG bCurrentIntStat => bCurrentIntStat_37
  # DEBUG BEGIN_STMT
  _9 = pState_24->callback;
  if (_9 != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _10 = pState_24->callback;
  _10 (u8Instance_21(D), 4, u32MbIdx_26(D), pState_24);

  <bb 8> :
  # DEBUG BEGIN_STMT
  _11 ={v} pState_24->mbs[u32MbIdx_26(D)].state;
  if (_11 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  _12 = pState_24->mbs[u32MbIdx_26(D)].isPolling;
  _13 = ~_12;
  if (_13 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  pState_24->mbs[u32MbIdx_26(D)].isPolling = 1;
  # DEBUG BEGIN_STMT
  _14 = pState_24->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (pBase_23, u8Instance_21(D), u32MbIdx_26(D), 0, _14);
  goto <bb 14>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  _15 = ~bCurrentIntStat_37;
  if (_15 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  _16 = pState_24->mbs[u32MbIdx_26(D)].isPolling;
  if (_16 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  _17 = pState_24->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (pBase_23, u8Instance_21(D), u32MbIdx_26(D), 0, _17);

  <bb 14> :
  # DEBUG BEGIN_STMT
  mb ={v} {CLOBBER};
  return;

}


FlexCAN_IRQHandlerRxMB (uint8 instance, uint32 mb_idx)
{
  volatile uint32 * flexcan_mb;
  boolean bIsCriticalSectionNeeded;
  boolean bCurrentIntStat;
  struct Flexcan_Ip_MsgBuffType data;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  int _1;
  int _2;
  struct Flexcan_Ip_MsgBuffType * _3;
  _Bool _4;
  _Bool _5;
  struct Flexcan_Ip_MsgBuffType * _6;
  _Bool _7;
  struct Flexcan_Ip_MsgBuffType * _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  void (*<T620>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _16;
  void (*<T620>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _17;
  <unnamed type> _18;
  _Bool _19;
  _Bool _20;
  _Bool _21;
  _Bool _22;
  _Bool _23;
  _Bool _24;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) instance_32(D);
  base_34 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_34
  # DEBUG BEGIN_STMT
  _2 = (int) instance_32(D);
  state_35 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_35
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  bCurrentIntStat_36 = 0;
  # DEBUG bCurrentIntStat => bCurrentIntStat_36
  # DEBUG BEGIN_STMT
  _3 = state_35->mbs[mb_idx_37(D)].pMBmessage;
  if (_3 == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  state_35->mbs[mb_idx_37(D)].pMBmessage = &data;

  <bb 4> :
  # DEBUG BEGIN_STMT
  bIsCriticalSectionNeeded_39 = 0;
  # DEBUG bIsCriticalSectionNeeded => bIsCriticalSectionNeeded_39
  # DEBUG BEGIN_STMT
  _4 = state_35->mbs[mb_idx_37(D)].isPolling;
  if (_4 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _5 = state_35->bIsLegacyFifoEn;
  if (_5 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  bIsCriticalSectionNeeded_40 = 1;
  # DEBUG bIsCriticalSectionNeeded => bIsCriticalSectionNeeded_40
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" cpsid i");

  <bb 7> :
  # bIsCriticalSectionNeeded_25 = PHI <bIsCriticalSectionNeeded_39(4), bIsCriticalSectionNeeded_39(5), bIsCriticalSectionNeeded_40(6)>
  # DEBUG bIsCriticalSectionNeeded => bIsCriticalSectionNeeded_25
  # DEBUG BEGIN_STMT
  FlexCAN_LockRxMsgBuff (base_34, mb_idx_37(D));
  # DEBUG BEGIN_STMT
  _6 = state_35->mbs[mb_idx_37(D)].pMBmessage;
  FlexCAN_GetMsgBuff (base_34, mb_idx_37(D), _6);
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (base_34, mb_idx_37(D));
  # DEBUG BEGIN_STMT
  _7 = state_35->bIsLegacyFifoEn;
  if (_7 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  _8 = state_35->mbs[mb_idx_37(D)].pMBmessage;
  _9 = _8->cs;
  _10 = _9 >> 24;
  _11 = _10 & 15;
  if (_11 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  flexcan_mb_46 = FlexCAN_GetMsgBuffRegion (base_34, mb_idx_37(D));
  # DEBUG flexcan_mb => flexcan_mb_46
  # DEBUG BEGIN_STMT
  _12 ={v} *flexcan_mb_46;
  _13 = _12 & 4043309055;
  *flexcan_mb_46 ={v} _13;
  # DEBUG BEGIN_STMT
  _14 ={v} *flexcan_mb_46;
  _15 = _14 | 67108864;
  *flexcan_mb_46 ={v} _15;
  goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  FlexCAN_UnlockRxMsgBuff (base_34);

  <bb 11> :
  # DEBUG BEGIN_STMT
  if (bIsCriticalSectionNeeded_25 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" cpsie i");

  <bb 13> :
  # DEBUG BEGIN_STMT
  state_35->mbs[mb_idx_37(D)].state ={v} 0;
  # DEBUG BEGIN_STMT
  bCurrentIntStat_52 = state_35->mbs[mb_idx_37(D)].isPolling;
  # DEBUG bCurrentIntStat => bCurrentIntStat_52
  # DEBUG BEGIN_STMT
  _16 = state_35->callback;
  if (_16 != 0B)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _17 = state_35->callback;
  _17 (instance_32(D), 0, mb_idx_37(D), state_35);

  <bb 15> :
  # DEBUG BEGIN_STMT
  _18 ={v} state_35->mbs[mb_idx_37(D)].state;
  if (_18 == 0)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 16> :
  _19 = state_35->mbs[mb_idx_37(D)].isPolling;
  _20 = ~_19;
  if (_20 != 0)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  # DEBUG BEGIN_STMT
  state_35->mbs[mb_idx_37(D)].isPolling = 1;
  # DEBUG BEGIN_STMT
  _21 = state_35->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_34, instance_32(D), mb_idx_37(D), 0, _21);
  goto <bb 21>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  _22 = ~bCurrentIntStat_52;
  if (_22 != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 19> :
  _23 = state_35->mbs[mb_idx_37(D)].isPolling;
  if (_23 != 0)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  _24 = state_35->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_34, instance_32(D), mb_idx_37(D), 0, _24);

  <bb 21> :
  # DEBUG BEGIN_STMT
  data ={v} {CLOBBER};
  return;

}


FlexCAN_StartRxMessageFifoData (uint8 instance, struct Flexcan_Ip_MsgBuffType * data)
{
  Flexcan_Ip_StatusType eResult;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  _Bool _1;
  int _2;
  int _3;
  _Bool _4;
  _Bool _5;
  <unnamed type> _6;
  <unnamed type> _7;
  <unnamed type> _8;
  _Bool _9;
  _Bool _10;
  _Bool _11;
  Flexcan_Ip_StatusType _33;

  <bb 2> :
  # DEBUG BEGIN_STMT
  base_15 = 0B;
  # DEBUG base => base_15
  # DEBUG BEGIN_STMT
  state_16 = 0B;
  # DEBUG state => state_16
  # DEBUG BEGIN_STMT
  eResult_17 = 0;
  # DEBUG eResult => eResult_17
  # DEBUG BEGIN_STMT
  _1 = instance_18(D) <= 2;
  DevAssert (_1);
  # DEBUG BEGIN_STMT
  _2 = (int) instance_18(D);
  base_21 = Flexcan_Ip_apxBase[_2];
  # DEBUG base => base_21
  # DEBUG BEGIN_STMT
  _3 = (int) instance_18(D);
  state_22 = Flexcan_Ip_apxState[_3];
  # DEBUG state => state_22
  # DEBUG BEGIN_STMT
  _4 = state_22->bIsLegacyFifoEn;
  _5 = ~_4;
  if (_5 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  eResult_32 = 1;
  # DEBUG eResult => eResult_32
  goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _6 ={v} state_22->mbs[0].state;
  if (_6 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  eResult_31 = 2;
  # DEBUG eResult => eResult_31
  goto <bb 10>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  state_22->mbs[0].state ={v} 1;
  # DEBUG BEGIN_STMT
  _7 = state_22->transferType;
  if (_7 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  state_22->mbs[0].isPolling = 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  state_22->mbs[0].pMBmessage = data_25(D);
  # DEBUG BEGIN_STMT
  _8 = state_22->transferType;
  if (_8 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  state_22->mbs[0].isPolling = 0;
  # DEBUG BEGIN_STMT
  _9 = state_22->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_21, instance_18(D), 6, 1, _9);
  # DEBUG BEGIN_STMT
  _10 = state_22->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_21, instance_18(D), 7, 1, _10);
  # DEBUG BEGIN_STMT
  _11 = state_22->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_21, instance_18(D), 5, 1, _11);

  <bb 10> :
  # eResult_12 = PHI <eResult_32(3), eResult_31(5), eResult_17(8), eResult_17(9)>
  # DEBUG eResult => eResult_12
  # DEBUG BEGIN_STMT
  _33 = eResult_12;
  return _33;

}


FlexCAN_StartSendData (uint8 Flexcan_Ip_u8Instance, uint8 mb_idx, const struct Flexcan_Ip_DataInfoType * tx_info, uint32 msg_id, const uint8 * mb_data)
{
  volatile uint32 * pMbAddr;
  struct FLEXCAN_Type * base;
  struct Flexcan_Ip_StateType * state;
  struct Flexcan_Ip_MsbuffCodeStatusType cs;
  Flexcan_Ip_StatusType eResult;
  int _1;
  int _2;
  _Bool _3;
  _Bool _4;
  long unsigned int _5;
  unsigned char _6;
  long unsigned int _7;
  unsigned char _8;
  _Bool _9;
  _Bool _10;
  long unsigned int _11;
  _Bool _12;
  int _13;
  <unnamed type> _14;
  long unsigned int _15;
  int _16;
  int _17;
  int _18;
  _Bool _19;
  int _20;
  _Bool _21;
  long unsigned int _22;
  <unnamed type> _23;
  _Bool _24;
  unsigned char _25;
  _Bool _26;
  _Bool _27;
  long unsigned int _28;
  Flexcan_Ip_StatusType _64;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eResult_32 = 0;
  # DEBUG eResult => eResult_32
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) Flexcan_Ip_u8Instance_33(D);
  state_35 = Flexcan_Ip_apxState[_1];
  # DEBUG state => state_35
  # DEBUG BEGIN_STMT
  _2 = (int) Flexcan_Ip_u8Instance_33(D);
  base_36 = Flexcan_Ip_apxBase[_2];
  # DEBUG base => base_36
  # DEBUG BEGIN_STMT
  pMbAddr_37 = 0B;
  # DEBUG pMbAddr => pMbAddr_37
  # DEBUG BEGIN_STMT
  _3 = Flexcan_Ip_u8Instance_33(D) <= 2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  _4 = tx_info_39(D) != 0B;
  DevAssert (_4);
  # DEBUG BEGIN_STMT
  _5 = tx_info_39(D)->data_length;
  _6 = (unsigned char) _5;
  _7 = (long unsigned int) mb_idx_41(D);
  _8 = FlexCAN_GetMbPayloadSize (base_36, _7);
  _9 = _6 <= _8;
  DevAssert (_9);
  # DEBUG BEGIN_STMT
  _10 = state_35->bIsLegacyFifoEn;
  _11 = state_35->u32MaxMbNum;
  _12 = FlexCAN_IsMbOutOfRange (base_36, mb_idx_41(D), _10, _11);
  if (_12 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  eResult_63 = 4;
  # DEBUG eResult => eResult_63
  goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _13 = (int) mb_idx_41(D);
  _14 ={v} state_35->mbs[_13].state;
  if (_14 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  eResult_62 = 2;
  # DEBUG eResult => eResult_62
  goto <bb 10>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _15 = (long unsigned int) mb_idx_41(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (base_36, _15);
  # DEBUG BEGIN_STMT
  _16 = (int) mb_idx_41(D);
  state_35->mbs[_16].state ={v} 2;
  # DEBUG BEGIN_STMT
  _17 = (int) mb_idx_41(D);
  state_35->mbs[_17].time_stamp = 0;
  # DEBUG BEGIN_STMT
  _18 = (int) mb_idx_41(D);
  _19 = tx_info_39(D)->is_polling;
  state_35->mbs[_18].isPolling = _19;
  # DEBUG BEGIN_STMT
  _20 = (int) mb_idx_41(D);
  _21 = tx_info_39(D)->is_remote;
  state_35->mbs[_20].isRemote = _21;
  # DEBUG BEGIN_STMT
  _22 = tx_info_39(D)->data_length;
  cs.dataLen = _22;
  # DEBUG BEGIN_STMT
  _23 = tx_info_39(D)->msg_id_type;
  cs.msgIdType = _23;
  # DEBUG BEGIN_STMT
  _24 = tx_info_39(D)->fd_enable;
  cs.fd_enable = _24;
  # DEBUG BEGIN_STMT
  _25 = tx_info_39(D)->fd_padding;
  cs.fd_padding = _25;
  # DEBUG BEGIN_STMT
  _26 = tx_info_39(D)->enable_brs;
  cs.enable_brs = _26;
  # DEBUG BEGIN_STMT
  _27 = tx_info_39(D)->is_remote;
  if (_27 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  cs.code = 28;
  goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  cs.code = 12;

  <bb 9> :
  # DEBUG BEGIN_STMT
  _28 = (long unsigned int) mb_idx_41(D);
  pMbAddr_58 = FlexCAN_GetMsgBuffRegion (base_36, _28);
  # DEBUG pMbAddr => pMbAddr_58
  # DEBUG BEGIN_STMT
  FlexCAN_SetTxMsgBuff (pMbAddr_58, &cs, msg_id_59(D), mb_data_60(D), 0);

  <bb 10> :
  # eResult_29 = PHI <eResult_63(3), eResult_62(5), eResult_32(9)>
  # DEBUG eResult => eResult_29
  # DEBUG BEGIN_STMT
  _64 = eResult_29;
  cs ={v} {CLOBBER};
  return _64;

}


FlexCAN_StartRxMessageBufferData (uint8 instance, uint8 mb_idx, struct Flexcan_Ip_MsgBuffType * data, boolean isPolling)
{
  struct Flexcan_Ip_StateType * state;
  const struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType result;
  int _1;
  int _2;
  _Bool _3;
  _Bool _4;
  long unsigned int _5;
  _Bool _6;
  int _7;
  <unnamed type> _8;
  int _9;
  int _10;
  int _11;
  Flexcan_Ip_StatusType _29;

  <bb 2> :
  # DEBUG BEGIN_STMT
  result_14 = 0;
  # DEBUG result => result_14
  # DEBUG BEGIN_STMT
  _1 = (int) instance_15(D);
  base_17 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_17
  # DEBUG BEGIN_STMT
  _2 = (int) instance_15(D);
  state_18 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_18
  # DEBUG BEGIN_STMT
  _3 = instance_15(D) <= 2;
  DevAssert (_3);
  # DEBUG BEGIN_STMT
  _4 = state_18->bIsLegacyFifoEn;
  _5 = state_18->u32MaxMbNum;
  _6 = FlexCAN_IsMbOutOfRange (base_17, mb_idx_20(D), _4, _5);
  if (_6 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  result_28 = 4;
  # DEBUG result => result_28
  goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _7 = (int) mb_idx_20(D);
  _8 ={v} state_18->mbs[_7].state;
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  result_27 = 2;
  # DEBUG result => result_27
  goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _9 = (int) mb_idx_20(D);
  state_18->mbs[_9].state ={v} 1;
  # DEBUG BEGIN_STMT
  _10 = (int) mb_idx_20(D);
  state_18->mbs[_10].pMBmessage = data_23(D);
  # DEBUG BEGIN_STMT
  _11 = (int) mb_idx_20(D);
  state_18->mbs[_11].isPolling = isPolling_25(D);

  <bb 7> :
  # result_12 = PHI <result_28(3), result_27(5), result_14(6)>
  # DEBUG result => result_12
  # DEBUG BEGIN_STMT
  _29 = result_12;
  return _29;

}


FlexCAN_ProccessLegacyRxFIFO (uint8 u8Instance, uint32 u32TimeoutMs)
{
  uint32 u32intType;
  uint32 mS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  struct FLEXCAN_Type * pBase;
  struct Flexcan_Ip_StateType * pState;
  Flexcan_Ip_StatusType eResult;
  int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  <unnamed type> _5;
  unsigned char _6;
  <unnamed type> _7;
  <unnamed type> _8;
  _Bool _9;
  _Bool _10;
  _Bool _11;
  <unnamed type> _12;
  long unsigned int _42;
  Flexcan_Ip_StatusType _51;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eResult_24 = 0;
  # DEBUG eResult => eResult_24
  # DEBUG BEGIN_STMT
  _1 = (int) u8Instance_25(D);
  pState_27 = Flexcan_Ip_apxState[_1];
  # DEBUG pState => pState_27
  # DEBUG BEGIN_STMT
  _2 = (int) u8Instance_25(D);
  pBase_28 = Flexcan_Ip_apxBase[_2];
  # DEBUG pBase => pBase_28
  # DEBUG BEGIN_STMT
  timeStart = 0;
  # DEBUG BEGIN_STMT
  timeElapsed_30 = 0;
  # DEBUG timeElapsed => timeElapsed_30
  # DEBUG BEGIN_STMT
  _3 = u32TimeoutMs_31(D) * 1000;
  mS2Ticks_33 = OsIf_MicrosToTicks (_3, 0);
  # DEBUG mS2Ticks => mS2Ticks_33
  # DEBUG BEGIN_STMT
  u32intType_34 = 0;
  # DEBUG u32intType => u32intType_34
  # DEBUG BEGIN_STMT
  _4 = OsIf_GetCounter (0);
  timeStart = _4;
  # DEBUG BEGIN_STMT
  goto <bb 11>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _5 = pState_27->transferType;
  if (_5 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  u32intType_37 = 7;
  # DEBUG u32intType => u32intType_37
  goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _6 = FlexCAN_GetBuffStatusFlag (pBase_28, u32intType_16);
  if (_6 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  FlexCAN_IRQHandlerRxFIFO (u8Instance_25(D), u32intType_16);

  <bb 7> :
  # DEBUG BEGIN_STMT
  u32intType_40 = u32intType_16 + 4294967295;
  # DEBUG u32intType => u32intType_40

  <bb 8> :
  # u32intType_16 = PHI <u32intType_37(4), u32intType_40(7)>
  # DEBUG u32intType => u32intType_16
  # DEBUG BEGIN_STMT
  if (u32intType_16 > 4)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _42 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_43 = _42 + timeElapsed_15;
  # DEBUG timeElapsed => timeElapsed_43
  # DEBUG BEGIN_STMT
  if (timeElapsed_43 >= mS2Ticks_33)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  eResult_44 = 3;
  # DEBUG eResult => eResult_44
  # DEBUG BEGIN_STMT
  goto <bb 12>; [INV]

  <bb 11> :
  # timeElapsed_15 = PHI <timeElapsed_30(2), timeElapsed_43(9)>
  # DEBUG timeElapsed => timeElapsed_15
  # DEBUG BEGIN_STMT
  _7 ={v} pState_27->mbs[0].state;
  if (_7 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # eResult_13 = PHI <eResult_44(10), eResult_24(11)>
  # DEBUG eResult => eResult_13
  # DEBUG BEGIN_STMT
  if (eResult_13 == 3)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  _8 = pState_27->transferType;
  if (_8 != 1)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _9 = pState_27->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (pBase_28, u8Instance_25(D), 5, 0, _9);
  # DEBUG BEGIN_STMT
  _10 = pState_27->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (pBase_28, u8Instance_25(D), 6, 0, _10);
  # DEBUG BEGIN_STMT
  _11 = pState_27->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (pBase_28, u8Instance_25(D), 7, 0, _11);

  <bb 15> :
  # DEBUG BEGIN_STMT
  _12 ={v} pState_27->mbs[0].state;
  switch (_12) <default: <L18> [INV], case 0: <L17> [INV], case 1: <L16> [INV]>

  <bb 16> :
<L16>:
  # DEBUG BEGIN_STMT
  pState_27->mbs[0].state ={v} 0;
  # DEBUG BEGIN_STMT
  goto <bb 19>; [INV]

  <bb 17> :
<L17>:
  # DEBUG BEGIN_STMT
  eResult_49 = 0;
  # DEBUG eResult => eResult_49
  # DEBUG BEGIN_STMT
  goto <bb 19>; [INV]

  <bb 18> :
<L18>:
  # DEBUG BEGIN_STMT
  eResult_50 = 1;
  # DEBUG eResult => eResult_50
  # DEBUG BEGIN_STMT

  <bb 19> :
  # eResult_14 = PHI <eResult_13(16), eResult_49(17), eResult_50(18)>
  # DEBUG eResult => eResult_14
  # DEBUG BEGIN_STMT
  _51 = eResult_14;
  timeStart ={v} {CLOBBER};
  return _51;

}


FlexCAN_InitController (struct FLEXCAN_Type * pBase, const struct Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
  Flexcan_Ip_StatusType eResult;
  _Bool _1;
  _Bool _2;
  long unsigned int _3;
  long unsigned int _4;
  _Bool _5;
  _Bool _6;
  _Bool _7;
  long unsigned int _8;
  Flexcan_Ip_StatusType _34;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eResult_14 = 0;
  # DEBUG eResult => eResult_14
  # DEBUG BEGIN_STMT
  _1 = FlexCAN_IsEnabled (pBase_16(D));
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  eResult_19 = FlexCAN_EnterFreezeMode (pBase_16(D));
  # DEBUG eResult => eResult_19
  # DEBUG BEGIN_STMT
  if (eResult_19 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  eResult_21 = FlexCAN_Disable (pBase_16(D));
  # DEBUG eResult => eResult_21

  <bb 5> :
  # eResult_9 = PHI <eResult_14(2), eResult_19(3), eResult_21(4)>
  # DEBUG eResult => eResult_9
  # DEBUG BEGIN_STMT
  if (eResult_9 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _2 = Flexcan_Ip_pData_22(D)->is_pe_clock;
  FlexCAN_SetClkSrc (pBase_16(D), _2);
  # DEBUG BEGIN_STMT
  _3 ={v} pBase_16(D)->MCR;
  _4 = _3 & 2147483647;
  pBase_16(D)->MCR ={v} _4;
  # DEBUG BEGIN_STMT
  eResult_26 = FlexCAN_Init (pBase_16(D));
  # DEBUG eResult => eResult_26
  # DEBUG BEGIN_STMT
  if (eResult_26 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  FlexCAN_EnterFreezeMode (pBase_16(D));
  # DEBUG BEGIN_STMT
  FlexCAN_Disable (pBase_16(D));
  goto <bb 11>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _5 = FlexCAN_IsFDAvailable (pBase_16(D));
  if (_5 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  _6 = Flexcan_Ip_pData_22(D)->fd_enable;
  _7 = Flexcan_Ip_pData_22(D)->bitRateSwitch;
  FlexCAN_SetFDEnabled (pBase_16(D), _6, _7);

  <bb 10> :
  # DEBUG BEGIN_STMT
  _8 = Flexcan_Ip_pData_22(D)->ctrlOptions;
  FlexCAN_ConfigCtrlOptions (pBase_16(D), _8);
  # DEBUG BEGIN_STMT
  eResult_31 = FlexCAN_InitCtroll (pBase_16(D), Flexcan_Ip_pData_22(D));
  # DEBUG eResult => eResult_31

  <bb 11> :
  # eResult_10 = PHI <eResult_9(5), eResult_26(7), eResult_31(10)>
  # DEBUG eResult => eResult_10
  # DEBUG BEGIN_STMT
  _34 = eResult_10;
  return _34;

}


FlexCAN_InitCtroll (struct FLEXCAN_Type * pBase, const struct Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
  Flexcan_Ip_StatusType eResult;
  <unnamed type> _1;
  const struct Flexcan_Ip_PayloadSizeType * _2;
  long unsigned int _3;
  Flexcan_Ip_StatusType _21;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eResult_7 = 0;
  # DEBUG eResult => eResult_7
  # DEBUG BEGIN_STMT
  _1 = Flexcan_Ip_pData_9(D)->flexcanMode;
  if (_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  FlexCAN_SetSelfReception (pBase_10(D), 0);

  <bb 4> :
  # DEBUG BEGIN_STMT
  eResult_13 = FlexCAN_InitRxFifo (pBase_10(D), Flexcan_Ip_pData_9(D));
  # DEBUG eResult => eResult_13
  # DEBUG BEGIN_STMT
  if (eResult_13 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  FlexCAN_EnterFreezeMode (pBase_10(D));
  # DEBUG BEGIN_STMT
  FlexCAN_Disable (pBase_10(D));
  goto <bb 8>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _2 = &Flexcan_Ip_pData_9(D)->payload;
  FlexCAN_SetPayloadSize (pBase_10(D), _2);
  # DEBUG BEGIN_STMT
  _3 = Flexcan_Ip_pData_9(D)->max_num_mb;
  eResult_16 = FlexCAN_SetMaxMsgBuffNum (pBase_10(D), _3);
  # DEBUG eResult => eResult_16
  # DEBUG BEGIN_STMT
  if (eResult_16 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  FlexCAN_EnterFreezeMode (pBase_10(D));
  # DEBUG BEGIN_STMT
  FlexCAN_Disable (pBase_10(D));

  <bb 8> :
  # eResult_4 = PHI <eResult_13(5), eResult_16(6), eResult_16(7)>
  # DEBUG eResult => eResult_4
  # DEBUG BEGIN_STMT
  _21 = eResult_4;
  return _21;

}


FlexCAN_InitRxFifo (struct FLEXCAN_Type * pBase, const struct Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
  Flexcan_Ip_StatusType eResult;
  _Bool _1;
  <unnamed type> _2;
  Flexcan_Ip_StatusType _11;

  <bb 2> :
  # DEBUG BEGIN_STMT
  eResult_5 = 0;
  # DEBUG eResult => eResult_5
  # DEBUG BEGIN_STMT
  _1 = Flexcan_Ip_pData_7(D)->is_rx_fifo_needed;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = Flexcan_Ip_pData_7(D)->num_id_filters;
  eResult_10 = FlexCAN_EnableRxFifo (pBase_8(D), _2);
  # DEBUG eResult => eResult_10

  <bb 4> :
  # eResult_3 = PHI <eResult_5(2), eResult_10(3)>
  # DEBUG eResult => eResult_3
  # DEBUG BEGIN_STMT
  _11 = eResult_3;
  return _11;

}


FlexCAN_SetRegDefaultVal (struct FLEXCAN_Type * base)
{
  _Bool _1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = FlexCAN_IsFDAvailable (base_4(D));
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  base_4(D)->FDCBT ={v} 0;
  # DEBUG BEGIN_STMT
  base_4(D)->FDCTRL ={v} 2147500288;

  <bb 4> :
  # DEBUG BEGIN_STMT
  base_4(D)->IFLAG1 ={v} 4294967295;
  # DEBUG BEGIN_STMT
  base_4(D)->IMASK1 ={v} 0;
  # DEBUG BEGIN_STMT
  base_4(D)->CBT ={v} 0;
  # DEBUG BEGIN_STMT
  base_4(D)->CTRL2 ={v} 1048576;
  # DEBUG BEGIN_STMT
  base_4(D)->ESR1 ={v} 241670;
  # DEBUG BEGIN_STMT
  base_4(D)->ECR ={v} 0;
  # DEBUG BEGIN_STMT
  base_4(D)->TIMER ={v} 0;
  # DEBUG BEGIN_STMT
  base_4(D)->CTRL1 ={v} 0;
  # DEBUG BEGIN_STMT
  base_4(D)->MCR ={v} 3633315855;
  return;

}


FlexCAN_SetRxMaskType (struct FLEXCAN_Type * base, Flexcan_Ip_RxMaskType type)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  if (type_6(D) == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 ={v} base_8(D)->MCR;
  _2 = _1 & 4294901759;
  base_8(D)->MCR ={v} _2;
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _3 ={v} base_8(D)->MCR;
  _4 = _3 | 65536;
  base_8(D)->MCR ={v} _4;

  <bb 5> :
  return;

}


FlexCAN_SetTxArbitrationStartDelay (struct FLEXCAN_Type * base, uint8 tasd)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} base_8(D)->CTRL2;
  _2 = _1 & 4278714367;
  _3 = (long unsigned int) tasd_9(D);
  _4 = _3 << 19;
  _5 = _4 & 16252928;
  _6 = _2 | _5;
  base_8(D)->CTRL2 ={v} _6;
  return;

}


FlexCAN_IsFreezeMode (const struct FLEXCAN_Type * base)
{
  long unsigned int _1;
  long unsigned int _2;
  boolean _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} base_4(D)->MCR;
  _2 = _1 & 16777216;
  _5 = _2 != 0;
  return _5;

}


FlexCAN_SetRxIndividualMask (struct FLEXCAN_Type * base, uint32 msgBuffIdx, uint32 mask)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  base_2(D)->RXIMR[msgBuffIdx_3(D)] ={v} mask_4(D);
  return;

}


FlexCAN_SetRxMsgBuffGlobalMask (struct FLEXCAN_Type * base, uint32 Mask)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  base_2(D)->RXMGMASK ={v} Mask_3(D);
  return;

}


FlexCAN_GetMsgBuffIntStatusFlag (const struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  uint32 mask;
  uint8 flag;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  unsigned char _5;
  uint8 _13;

  <bb 2> :
  # DEBUG BEGIN_STMT
  flag_7 = 0;
  # DEBUG flag => flag_7
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (msgBuffIdx_8(D) <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  mask_11 ={v} base_10(D)->IMASK1;
  # DEBUG mask => mask_11
  # DEBUG BEGIN_STMT
  _1 ={v} base_10(D)->IFLAG1;
  _2 = mask_11 & _1;
  _3 = msgBuffIdx_8(D) & 31;
  _4 = _2 >> _3;
  _5 = (unsigned char) _4;
  flag_12 = _5 & 1;
  # DEBUG flag => flag_12

  <bb 4> :
  # flag_6 = PHI <flag_7(2), flag_12(3)>
  # DEBUG flag => flag_6
  # DEBUG BEGIN_STMT
  _13 = flag_6;
  return _13;

}


FlexCAN_SetClkSrc (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.1_4;
  long unsigned int iftmp.1_8;
  long unsigned int iftmp.1_9;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} base_6(D)->CTRL1;
  _2 = _1 & 4294959103;
  if (enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.1_9 = 8192;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.1_8 = 0;

  <bb 5> :
  # iftmp.1_4 = PHI <iftmp.1_9(3), iftmp.1_8(4)>
  _3 = iftmp.1_4 | _2;
  base_6(D)->CTRL1 ={v} _3;
  return;

}


RxFifoOcuppiedLastMsgBuff (uint32 x)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  uint32 _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = x_4(D) + 1;
  _2 = _1 * 8;
  _3 = _2 / 4;
  _5 = _3 + 5;
  return _5;

}


FlexCAN_IsListenOnlyModeEnabled (const struct FLEXCAN_Type * base)
{
  long unsigned int _1;
  long unsigned int _2;
  boolean _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} base_4(D)->CTRL1;
  _2 = _1 & 8;
  _5 = _2 != 0;
  return _5;

}


FlexCAN_IsFDEnabled (const struct FLEXCAN_Type * base)
{
  long unsigned int _1;
  long unsigned int _2;
  boolean _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} base_4(D)->MCR;
  _2 = _1 & 2048;
  _5 = _2 != 0;
  return _5;

}


FlexCAN_SetSelfReception (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.4_4;
  long unsigned int iftmp.4_8;
  long unsigned int iftmp.4_9;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} base_6(D)->MCR;
  _2 = _1 & 4294836223;
  if (enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.4_9 = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.4_8 = 131072;

  <bb 5> :
  # iftmp.4_4 = PHI <iftmp.4_9(3), iftmp.4_8(4)>
  _3 = iftmp.4_4 | _2;
  base_6(D)->MCR ={v} _3;
  return;

}


FlexCAN_EnableExtCbt (struct FLEXCAN_Type * base, boolean enableCBT)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.5_4;
  long unsigned int iftmp.5_8;
  long unsigned int iftmp.5_9;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} base_6(D)->CBT;
  _2 = _1 & 2147483647;
  if (enableCBT_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.5_9 = 2147483648;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.5_8 = 0;

  <bb 5> :
  # iftmp.5_4 = PHI <iftmp.5_9(3), iftmp.5_8(4)>
  _3 = iftmp.5_4 | _2;
  base_6(D)->CBT ={v} _3;
  return;

}


FlexCAN_IsExCbtEnabled (const struct FLEXCAN_Type * pBase)
{
  long unsigned int _1;
  signed int _2;
  boolean _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} pBase_4(D)->CBT;
  _2 = (signed int) _1;
  _5 = _2 < 0;
  return _5;

}


FlexCAN_GetFDTimeSegments (const struct FLEXCAN_Type * base, struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} base_16(D)->FDCBT;
  _2 = _1 >> 20;
  _3 = _2 & 1023;
  timeSeg_17(D)->preDivider = _3;
  # DEBUG BEGIN_STMT
  _4 ={v} base_16(D)->FDCBT;
  _5 = _4 >> 10;
  _6 = _5 & 31;
  timeSeg_17(D)->propSeg = _6;
  # DEBUG BEGIN_STMT
  _7 ={v} base_16(D)->FDCBT;
  _8 = _7 >> 5;
  _9 = _8 & 7;
  timeSeg_17(D)->phaseSeg1 = _9;
  # DEBUG BEGIN_STMT
  _10 ={v} base_16(D)->FDCBT;
  _11 = _10 & 7;
  timeSeg_17(D)->phaseSeg2 = _11;
  # DEBUG BEGIN_STMT
  _12 ={v} base_16(D)->FDCBT;
  _13 = _12 >> 16;
  _14 = _13 & 7;
  timeSeg_17(D)->rJumpwidth = _14;
  return;

}


FlexCAN_GetTimeSegments (const struct FLEXCAN_Type * base, struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} base_16(D)->CTRL1;
  _2 = _1 >> 24;
  _3 = _2 & 255;
  timeSeg_17(D)->preDivider = _3;
  # DEBUG BEGIN_STMT
  _4 ={v} base_16(D)->CTRL1;
  _5 = _4 & 7;
  timeSeg_17(D)->propSeg = _5;
  # DEBUG BEGIN_STMT
  _6 ={v} base_16(D)->CTRL1;
  _7 = _6 >> 19;
  _8 = _7 & 7;
  timeSeg_17(D)->phaseSeg1 = _8;
  # DEBUG BEGIN_STMT
  _9 ={v} base_16(D)->CTRL1;
  _10 = _9 >> 16;
  _11 = _10 & 7;
  timeSeg_17(D)->phaseSeg2 = _11;
  # DEBUG BEGIN_STMT
  _12 ={v} base_16(D)->CTRL1;
  _13 = _12 >> 22;
  _14 = _13 & 3;
  timeSeg_17(D)->rJumpwidth = _14;
  return;

}


FlexCAN_GetExtendedTimeSegments (const struct FLEXCAN_Type * base, struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} base_16(D)->CBT;
  _2 = _1 >> 21;
  _3 = _2 & 1023;
  timeSeg_17(D)->preDivider = _3;
  # DEBUG BEGIN_STMT
  _4 ={v} base_16(D)->CBT;
  _5 = _4 >> 10;
  _6 = _5 & 63;
  timeSeg_17(D)->propSeg = _6;
  # DEBUG BEGIN_STMT
  _7 ={v} base_16(D)->CBT;
  _8 = _7 >> 5;
  _9 = _8 & 31;
  timeSeg_17(D)->phaseSeg1 = _9;
  # DEBUG BEGIN_STMT
  _10 ={v} base_16(D)->CBT;
  _11 = _10 & 31;
  timeSeg_17(D)->phaseSeg2 = _11;
  # DEBUG BEGIN_STMT
  _12 ={v} base_16(D)->CBT;
  _13 = _12 >> 16;
  _14 = _13 & 31;
  timeSeg_17(D)->rJumpwidth = _14;
  return;

}


FlexCAN_SetExtendedTimeSegments (struct FLEXCAN_Type * base, const struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  _Bool _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = timeSeg_24(D) != 0B;
  DevAssert (_1);
  # DEBUG BEGIN_STMT
  _2 ={v} base_27(D)->CBT;
  _3 = _2 & 2147483648;
  base_27(D)->CBT ={v} _3;
  # DEBUG BEGIN_STMT
  _4 ={v} base_27(D)->CBT;
  _5 = timeSeg_24(D)->propSeg;
  _6 = _5 << 10;
  _7 = _6 & 65535;
  _8 = timeSeg_24(D)->phaseSeg2;
  _9 = _8 & 31;
  _10 = _7 | _9;
  _11 = timeSeg_24(D)->phaseSeg1;
  _12 = _11 << 5;
  _13 = _12 & 992;
  _14 = _10 | _13;
  _15 = timeSeg_24(D)->preDivider;
  _16 = _15 << 21;
  _17 = _16 & 2145386496;
  _18 = _14 | _17;
  _19 = timeSeg_24(D)->rJumpwidth;
  _20 = _19 << 16;
  _21 = _20 & 2031616;
  _22 = _18 | _21;
  _23 = _4 | _22;
  base_27(D)->CBT ={v} _23;
  return;

}


FlexCAN_SetTimeSegments (struct FLEXCAN_Type * base, const struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  _Bool _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = timeSeg_23(D) != 0B;
  DevAssert (_1);
  # DEBUG BEGIN_STMT
  _2 ={v} base_26(D)->CTRL1;
  _3 = _2 & 65528;
  base_26(D)->CTRL1 ={v} _3;
  # DEBUG BEGIN_STMT
  _4 ={v} base_26(D)->CTRL1;
  _5 = timeSeg_23(D)->propSeg;
  _6 = _5 & 7;
  _7 = timeSeg_23(D)->phaseSeg2;
  _8 = _7 << 16;
  _9 = _8 & 458752;
  _10 = _6 | _9;
  _11 = timeSeg_23(D)->phaseSeg1;
  _12 = _11 << 19;
  _13 = _12 & 3670016;
  _14 = _10 | _13;
  _15 = timeSeg_23(D)->preDivider;
  _16 = _15 << 24;
  _17 = _14 | _16;
  _18 = timeSeg_23(D)->rJumpwidth;
  _19 = _18 << 22;
  _20 = _19 & 12582912;
  _21 = _17 | _20;
  _22 = _4 | _21;
  base_26(D)->CTRL1 ={v} _22;
  return;

}


FlexCAN_SetFDTimeSegments (struct FLEXCAN_Type * base, const struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  _Bool _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = timeSeg_24(D) != 0B;
  DevAssert (_1);
  # DEBUG BEGIN_STMT
  _2 ={v} base_27(D)->FDCBT;
  _3 = _2 & 3221783320;
  base_27(D)->FDCBT ={v} _3;
  # DEBUG BEGIN_STMT
  _4 ={v} base_27(D)->FDCBT;
  _5 = timeSeg_24(D)->propSeg;
  _6 = _5 << 10;
  _7 = _6 & 31744;
  _8 = timeSeg_24(D)->phaseSeg2;
  _9 = _8 & 7;
  _10 = _7 | _9;
  _11 = timeSeg_24(D)->phaseSeg1;
  _12 = _11 << 5;
  _13 = _12 & 255;
  _14 = _10 | _13;
  _15 = timeSeg_24(D)->preDivider;
  _16 = _15 << 20;
  _17 = _16 & 1072693248;
  _18 = _14 | _17;
  _19 = timeSeg_24(D)->rJumpwidth;
  _20 = _19 << 16;
  _21 = _20 & 458752;
  _22 = _18 | _21;
  _23 = _4 | _22;
  base_27(D)->FDCBT ={v} _23;
  return;

}


FlexCAN_GetBuffStatusImask (const struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  uint32 u32Imask;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  uint8 _12;

  <bb 2> :
  # DEBUG BEGIN_STMT
  u32Imask_7 = 0;
  # DEBUG u32Imask => u32Imask_7
  # DEBUG BEGIN_STMT
  if (msgBuffIdx_8(D) <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 ={v} base_10(D)->IMASK1;
  _2 = msgBuffIdx_8(D) & 31;
  _3 = 1 << _2;
  _4 = _1 & _3;
  _5 = msgBuffIdx_8(D) & 31;
  u32Imask_11 = _4 >> _5;
  # DEBUG u32Imask => u32Imask_11

  <bb 4> :
  # u32Imask_6 = PHI <u32Imask_7(2), u32Imask_11(3)>
  # DEBUG u32Imask => u32Imask_6
  # DEBUG BEGIN_STMT
  _12 = (uint8) u32Imask_6;
  return _12;

}


FlexCAN_GetBuffStatusFlag (const struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  uint32 flag;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  uint8 _12;

  <bb 2> :
  # DEBUG BEGIN_STMT
  flag_7 = 0;
  # DEBUG flag => flag_7
  # DEBUG BEGIN_STMT
  if (msgBuffIdx_8(D) <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 ={v} base_10(D)->IFLAG1;
  _2 = msgBuffIdx_8(D) & 31;
  _3 = 1 << _2;
  _4 = _1 & _3;
  _5 = msgBuffIdx_8(D) & 31;
  flag_11 = _4 >> _5;
  # DEBUG flag => flag_11

  <bb 4> :
  # flag_6 = PHI <flag_7(2), flag_11(3)>
  # DEBUG flag => flag_6
  # DEBUG BEGIN_STMT
  _12 = (uint8) flag_6;
  return _12;

}


FlexCAN_ClearMsgBuffIntStatusFlag (struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  uint32 flag;
  long unsigned int _1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = msgBuffIdx_3(D) & 31;
  flag_4 = 1 << _1;
  # DEBUG flag => flag_4
  # DEBUG BEGIN_STMT
  if (msgBuffIdx_3(D) <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  base_6(D)->IFLAG1 ={v} flag_4;

  <bb 4> :
  return;

}


FlexCAN_UnlockRxMsgBuff (const struct FLEXCAN_Type * base)
{
  long unsigned int vol.6_3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  vol.6_3 ={v} base_2(D)->TIMER;
  return;

}


FlexCAN_SetListenOnlyMode (struct FLEXCAN_Type * base, boolean enableListenOnly)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.7_4;
  long unsigned int iftmp.7_8;
  long unsigned int iftmp.7_9;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} base_6(D)->CTRL1;
  _2 = _1 & 4294967287;
  if (enableListenOnly_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.7_9 = 8;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.7_8 = 0;

  <bb 5> :
  # iftmp.7_4 = PHI <iftmp.7_9(3), iftmp.7_8(4)>
  _3 = iftmp.7_4 | _2;
  base_6(D)->CTRL1 ={v} _3;
  return;

}


FlexCAN_SetFDEnabled (struct FLEXCAN_Type * base, boolean enableFD, boolean enableBRS)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int iftmp.2_9;
  long unsigned int iftmp.3_10;
  long unsigned int iftmp.2_14;
  long unsigned int iftmp.2_15;
  long unsigned int iftmp.3_18;
  long unsigned int iftmp.3_19;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} base_12(D)->MCR;
  _2 = _1 & 4294965247;
  if (enableFD_13(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.2_15 = 2048;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.2_14 = 0;

  <bb 5> :
  # iftmp.2_9 = PHI <iftmp.2_15(3), iftmp.2_14(4)>
  _3 = iftmp.2_9 | _2;
  base_12(D)->MCR ={v} _3;
  # DEBUG BEGIN_STMT
  _4 ={v} base_12(D)->FDCTRL;
  _5 = _4 & 2147483647;
  if (enableBRS_17(D) != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  iftmp.3_19 = 2147483648;
  goto <bb 8>; [INV]

  <bb 7> :
  iftmp.3_18 = 0;

  <bb 8> :
  # iftmp.3_10 = PHI <iftmp.3_19(6), iftmp.3_18(7)>
  _6 = iftmp.3_10 | _5;
  base_12(D)->FDCTRL ={v} _6;
  # DEBUG BEGIN_STMT
  _7 ={v} base_12(D)->FDCTRL;
  _8 = _7 & 4294926591;
  base_12(D)->FDCTRL ={v} _8;
  return;

}


FlexCAN_IsEnabled (const struct FLEXCAN_Type * pBase)
{
  long unsigned int _1;
  signed int _2;
  boolean _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} pBase_4(D)->MCR;
  _2 = (signed int) _1;
  _5 = _2 >= 0;
  return _5;

}


FlexCAN_SetTDCOffset (struct FLEXCAN_Type * base, boolean enable, uint8 offset)
{
  uint32 tmp;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  tmp_7 ={v} base_6(D)->FDCTRL;
  # DEBUG tmp => tmp_7
  # DEBUG BEGIN_STMT
  tmp_8 = tmp_7 & 4294926591;
  # DEBUG tmp => tmp_8
  # DEBUG BEGIN_STMT
  if (enable_9(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  tmp_10 = tmp_8 | 32768;
  # DEBUG tmp => tmp_10
  # DEBUG BEGIN_STMT
  _1 = (long unsigned int) offset_11(D);
  _2 = _1 << 8;
  _3 = _2 & 7936;
  tmp_12 = tmp_10 | _3;
  # DEBUG tmp => tmp_12

  <bb 4> :
  # tmp_4 = PHI <tmp_8(2), tmp_12(3)>
  # DEBUG tmp => tmp_4
  # DEBUG BEGIN_STMT
  base_6(D)->FDCTRL ={v} tmp_4;
  return;

}


FlexCAN_SetRxFifoGlobalMask (struct FLEXCAN_Type * base, uint32 Mask)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  base_2(D)->RXFGMASK ={v} Mask_3(D);
  return;

}


DevAssert (volatile boolean x)
{
  _Bool x.0_1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  x.0_1 ={v} x;
  if (x.0_1 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 3>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  return;

}


