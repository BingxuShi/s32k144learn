IPA function summary for SetSimClkoutDiv_TrustedCall.isra.0/42 inlinable
  global time:     7.500000
  self size:       12
  global size:     12
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:4.000000, time:2.000000,  executed if:(op0 != 0)
    size:3.000000, time:1.500000,  executed if:(op0 != 0),  nonconst if:(op0 changed) && (op0 != 0)
  calls:

IPA function summary for SetScgHsrunDivslow_TrustedCall.isra.0/41 inlinable
  global time:     6.500000
  self size:       10
  global size:     10
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:4.000000, time:2.000000,  executed if:(op0 != 0)
    size:1.000000, time:0.500000,  executed if:(op0 != 0),  nonconst if:(op0 changed) && (op0 != 0)
  calls:

IPA function summary for SetScgHsrunDivbus_TrustedCall.isra.0/40 inlinable
  global time:     7.000000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:4.000000, time:2.000000,  executed if:(op0 != 0)
    size:2.000000, time:1.000000,  executed if:(op0 != 0),  nonconst if:(op0 changed) && (op0 != 0)
  calls:

IPA function summary for SetScgHsrunDivcore_TrustedCall.isra.0/39 inlinable
  global time:     7.000000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:4.000000, time:2.000000,  executed if:(op0 != 0)
    size:2.000000, time:1.000000,  executed if:(op0 != 0),  nonconst if:(op0 changed) && (op0 != 0)
  calls:

IPA function summary for SetScgVlprDivslow_TrustedCall.isra.0/38 inlinable
  global time:     6.500000
  self size:       10
  global size:     10
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:4.000000, time:2.000000,  executed if:(op0 != 0)
    size:1.000000, time:0.500000,  executed if:(op0 != 0),  nonconst if:(op0 changed) && (op0 != 0)
  calls:

IPA function summary for SetScgVlprDivbus_TrustedCall.isra.0/37 inlinable
  global time:     7.000000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:4.000000, time:2.000000,  executed if:(op0 != 0)
    size:2.000000, time:1.000000,  executed if:(op0 != 0),  nonconst if:(op0 changed) && (op0 != 0)
  calls:

IPA function summary for SetScgVlprDivcore_TrustedCall.isra.0/36 inlinable
  global time:     7.000000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:4.000000, time:2.000000,  executed if:(op0 != 0)
    size:2.000000, time:1.000000,  executed if:(op0 != 0),  nonconst if:(op0 changed) && (op0 != 0)
  calls:

IPA function summary for SetScgRunDivslow_TrustedCall.isra.0/35 inlinable
  global time:     6.500000
  self size:       10
  global size:     10
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:4.000000, time:2.000000,  executed if:(op0 != 0)
    size:1.000000, time:0.500000,  executed if:(op0 != 0),  nonconst if:(op0 changed) && (op0 != 0)
  calls:

IPA function summary for SetScgRunDivbus_TrustedCall.isra.0/34 inlinable
  global time:     7.000000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:4.000000, time:2.000000,  executed if:(op0 != 0)
    size:2.000000, time:1.000000,  executed if:(op0 != 0),  nonconst if:(op0 changed) && (op0 != 0)
  calls:

IPA function summary for SetScgRunDivcore_TrustedCall.isra.0/33 inlinable
  global time:     7.000000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op0 changed)
    size:4.000000, time:2.000000,  executed if:(op0 != 0)
    size:2.000000, time:1.000000,  executed if:(op0 != 0),  nonconst if:(op0 changed) && (op0 != 0)
  calls:

IPA function summary for SetSimTraceDivMul/29 inlinable
  global time:     13.000000
  self size:       5
  global size:     5
  min size:       4
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    SetSimTraceDivMul_TrustedCall/28 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 7 stack: 0

IPA function summary for SetSimTraceDivMul_TrustedCall/28 inlinable
  global time:     13.000000
  self size:       14
  global size:     14
  min size:       0
  self stack:      0
  global stack:    0
    size:3.000000, time:3.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 32] changed) && (not inlined)
    size:3.500000, time:3.500000,  nonconst if:(op0[ref offset: 32] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 64] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op0[ref offset: 64] changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 32] changed || op0[ref offset: 64] changed)
  calls:

IPA function summary for SetPccPcdDivFrac/27 inlinable
  global time:     13.000000
  self size:       5
  global size:     5
  min size:       4
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    SetPccPcdDivFrac_TrustedCall/26 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 8 stack: 0

IPA function summary for SetPccPcdDivFrac_TrustedCall/26 inlinable
  global time:     16.000000
  self size:       17
  global size:     17
  min size:       0
  self stack:      0
  global stack:    0
    size:6.000000, time:6.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 0] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 0] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 32] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op0[ref offset: 32] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 64] changed) && (not inlined)
    size:3.500000, time:3.500000,  nonconst if:(op0[ref offset: 64] changed)
  array index:(op0[ref offset: 0] changed)
  calls:

IPA function summary for SetSimClkoutDiv/25 inlinable
  global time:     14.000000
  self size:       6
  global size:     6
  min size:       4
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetSimClkoutDiv_TrustedCall.isra.0/42 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 6 stack: 0

IPA function summary for SetScgHsrunDivslow/23 inlinable
  global time:     14.000000
  self size:       6
  global size:     6
  min size:       4
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetScgHsrunDivslow_TrustedCall.isra.0/41 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 5 stack: 0

IPA function summary for SetScgHsrunDivbus/21 inlinable
  global time:     14.000000
  self size:       6
  global size:     6
  min size:       4
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetScgHsrunDivbus_TrustedCall.isra.0/40 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 5 stack: 0

IPA function summary for SetScgHsrunDivcore/19 inlinable
  global time:     14.000000
  self size:       6
  global size:     6
  min size:       4
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetScgHsrunDivcore_TrustedCall.isra.0/39 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 5 stack: 0

IPA function summary for SetScgVlprDivslow/17 inlinable
  global time:     14.000000
  self size:       6
  global size:     6
  min size:       4
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetScgVlprDivslow_TrustedCall.isra.0/38 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 5 stack: 0

IPA function summary for SetScgVlprDivbus/15 inlinable
  global time:     14.000000
  self size:       6
  global size:     6
  min size:       4
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetScgVlprDivbus_TrustedCall.isra.0/37 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 5 stack: 0

IPA function summary for SetScgVlprDivcore/13 inlinable
  global time:     14.000000
  self size:       6
  global size:     6
  min size:       4
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetScgVlprDivcore_TrustedCall.isra.0/36 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 5 stack: 0

IPA function summary for SetScgRunDivslow/11 inlinable
  global time:     14.000000
  self size:       6
  global size:     6
  min size:       4
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetScgRunDivslow_TrustedCall.isra.0/35 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 5 stack: 0

IPA function summary for SetScgRunDivbus/9 inlinable
  global time:     14.000000
  self size:       6
  global size:     6
  min size:       4
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetScgRunDivbus_TrustedCall.isra.0/34 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 5 stack: 0

IPA function summary for SetScgRunDivcore/7 inlinable
  global time:     14.000000
  self size:       6
  global size:     6
  min size:       4
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetScgRunDivcore_TrustedCall.isra.0/33 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 5 stack: 0

IPA function summary for SetScgAsyncDiv2/5 inlinable
  global time:     13.000000
  self size:       5
  global size:     5
  min size:       4
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    SetScgAsyncDiv2_TrustedCall/4 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 6 stack: 0

IPA function summary for SetScgAsyncDiv2_TrustedCall/4 inlinable
  global time:     12.000000
  self size:       13
  global size:     13
  min size:       0
  self stack:      0
  global stack:    0
    size:8.000000, time:8.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 0] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 0] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 32] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 32] changed)
  array index:(op0[ref offset: 32] changed) && (op0[ref offset: 0] changed)
  calls:

IPA function summary for SetScgAsyncDiv1/3 inlinable
  global time:     13.000000
  self size:       5
  global size:     5
  min size:       4
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:
    SetScgAsyncDiv1_TrustedCall/2 function not considered for inlining
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 6 stack: 0

IPA function summary for SetScgAsyncDiv1_TrustedCall/2 inlinable
  global time:     11.000000
  self size:       12
  global size:     12
  min size:       0
  self stack:      0
  global stack:    0
    size:7.000000, time:7.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 0] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 0] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 32] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 32] changed)
  array index:(op0[ref offset: 32] changed) && (op0[ref offset: 0] changed)
  calls:

IPA function summary for Callback_DividerEmpty/1 inlinable
  global time:     2.000000
  self size:       3
  global size:     3
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:


Flattening functions:
Overall time estimate: 315.000000 weighted by profile: 0.000000

Deciding on inlining of small functions.  Starting with size 0.
Enqueueing calls in SetSimClkoutDiv_TrustedCall.isra.0/42.
Enqueueing calls in SetScgHsrunDivslow_TrustedCall.isra.0/41.
Enqueueing calls in SetScgHsrunDivbus_TrustedCall.isra.0/40.
Enqueueing calls in SetScgHsrunDivcore_TrustedCall.isra.0/39.
Enqueueing calls in SetScgVlprDivslow_TrustedCall.isra.0/38.
Enqueueing calls in SetScgVlprDivbus_TrustedCall.isra.0/37.
Enqueueing calls in SetScgVlprDivcore_TrustedCall.isra.0/36.
Enqueueing calls in SetScgRunDivslow_TrustedCall.isra.0/35.
Enqueueing calls in SetScgRunDivbus_TrustedCall.isra.0/34.
Enqueueing calls in SetScgRunDivcore_TrustedCall.isra.0/33.
Enqueueing calls in SetSimTraceDivMul/29.
Enqueueing calls in SetSimTraceDivMul_TrustedCall/28.
Enqueueing calls in SetPccPcdDivFrac/27.
Enqueueing calls in SetPccPcdDivFrac_TrustedCall/26.
Enqueueing calls in SetSimClkoutDiv/25.
Enqueueing calls in SetScgHsrunDivslow/23.
Enqueueing calls in SetScgHsrunDivbus/21.
Enqueueing calls in SetScgHsrunDivcore/19.
Enqueueing calls in SetScgVlprDivslow/17.
Enqueueing calls in SetScgVlprDivbus/15.
Enqueueing calls in SetScgVlprDivcore/13.
Enqueueing calls in SetScgRunDivslow/11.
Enqueueing calls in SetScgRunDivbus/9.
Enqueueing calls in SetScgRunDivcore/7.
Enqueueing calls in SetScgAsyncDiv2/5.
Enqueueing calls in SetScgAsyncDiv2_TrustedCall/4.
Enqueueing calls in SetScgAsyncDiv1/3.
Enqueueing calls in SetScgAsyncDiv1_TrustedCall/2.
Enqueueing calls in Callback_DividerEmpty/1.

Considering SetScgHsrunDivslow_TrustedCall.isra.0/41 with 10 size
 to be inlined into SetScgHsrunDivslow/23 in ../RTD/src/Clock_Ip_Divider.c:1012
 Estimated badness is -0.945455, frequency 1.00.

Considering SetScgRunDivslow_TrustedCall.isra.0/35 with 10 size
 to be inlined into SetScgRunDivslow/11 in ../RTD/src/Clock_Ip_Divider.c:856
 Estimated badness is -0.945455, frequency 1.00.

Considering SetScgVlprDivslow_TrustedCall.isra.0/38 with 10 size
 to be inlined into SetScgVlprDivslow/17 in ../RTD/src/Clock_Ip_Divider.c:934
 Estimated badness is -0.945455, frequency 1.00.

Considering SetScgAsyncDiv1_TrustedCall/2 with 12 size
 to be inlined into SetScgAsyncDiv1/3 in ../RTD/src/Clock_Ip_Divider.c:754
 Estimated badness is -0.848485, frequency 1.00.

Considering SetScgHsrunDivcore_TrustedCall.isra.0/39 with 11 size
 to be inlined into SetScgHsrunDivcore/19 in ../RTD/src/Clock_Ip_Divider.c:960
 Estimated badness is -0.722222, frequency 1.00.

Considering SetScgHsrunDivbus_TrustedCall.isra.0/40 with 11 size
 to be inlined into SetScgHsrunDivbus/21 in ../RTD/src/Clock_Ip_Divider.c:986
 Estimated badness is -0.722222, frequency 1.00.

Considering SetScgVlprDivbus_TrustedCall.isra.0/37 with 11 size
 to be inlined into SetScgVlprDivbus/15 in ../RTD/src/Clock_Ip_Divider.c:908
 Estimated badness is -0.722222, frequency 1.00.

Considering SetScgVlprDivcore_TrustedCall.isra.0/36 with 11 size
 to be inlined into SetScgVlprDivcore/13 in ../RTD/src/Clock_Ip_Divider.c:882
 Estimated badness is -0.722222, frequency 1.00.

Considering SetScgRunDivcore_TrustedCall.isra.0/33 with 11 size
 to be inlined into SetScgRunDivcore/7 in ../RTD/src/Clock_Ip_Divider.c:804
 Estimated badness is -0.722222, frequency 1.00.

Considering SetScgRunDivbus_TrustedCall.isra.0/34 with 11 size
 to be inlined into SetScgRunDivbus/9 in ../RTD/src/Clock_Ip_Divider.c:830
 Estimated badness is -0.722222, frequency 1.00.

Considering SetScgAsyncDiv2_TrustedCall/4 with 13 size
 to be inlined into SetScgAsyncDiv2/5 in ../RTD/src/Clock_Ip_Divider.c:778
 Estimated badness is -0.666667, frequency 1.00.

Considering SetSimClkoutDiv_TrustedCall.isra.0/42 with 12 size
 to be inlined into SetSimClkoutDiv/25 in ../RTD/src/Clock_Ip_Divider.c:1038
 Estimated badness is -0.571429, frequency 1.00.

Considering SetSimTraceDivMul_TrustedCall/28 with 14 size
 to be inlined into SetSimTraceDivMul/29 in ../RTD/src/Clock_Ip_Divider.c:1079
 Estimated badness is -0.538462, frequency 1.00.

Considering SetPccPcdDivFrac_TrustedCall/26 with 17 size
 to be inlined into SetPccPcdDivFrac/27 in ../RTD/src/Clock_Ip_Divider.c:1061
 Estimated badness is -0.329545, frequency 1.00.

Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:

Deciding on functions to be inlined into all callers and removing useless speculations:
Overall time estimate: 128.500000 weighted by profile: 0.000000

Why inlining failed?
IPA function summary for SetSimTraceDivMul/29 inlinable
  global time:     12.000000
  self size:       5
  global size:     13
  min size:       4
  self stack:      0
  global stack:    0
    size:3.000000, time:3.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:3.500000, time:3.500000,  nonconst if:(op0[ref offset: 32] changed)
    size:2.500000, time:2.500000,  nonconst if:(op0[ref offset: 64] changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 32] changed || op0[ref offset: 64] changed)
  calls:
    SetSimTraceDivMul_TrustedCall/28 inlined
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 7 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for SetPccPcdDivFrac/27 inlinable
  global time:     14.500000
  self size:       5
  global size:     16
  min size:       4
  self stack:      0
  global stack:    0
    size:6.000000, time:6.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 0] changed)
    size:2.500000, time:2.500000,  nonconst if:(op0[ref offset: 32] changed)
    size:3.500000, time:3.500000,  nonconst if:(op0[ref offset: 64] changed)
  calls:
    SetPccPcdDivFrac_TrustedCall/26 inlined
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 8 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for SetSimClkoutDiv/25 inlinable
  global time:     8.500000
  self size:       6
  global size:     13
  min size:       4
  self stack:      0
  global stack:    0
    size:9.500000, time:6.000000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetSimClkoutDiv_TrustedCall.isra.0/42 inlined
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 6 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for SetScgHsrunDivslow/23 inlinable
  global time:     7.500000
  self size:       6
  global size:     11
  min size:       4
  self stack:      0
  global stack:    0
    size:7.500000, time:5.000000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetScgHsrunDivslow_TrustedCall.isra.0/41 inlined
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 5 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for SetScgHsrunDivbus/21 inlinable
  global time:     8.000000
  self size:       6
  global size:     12
  min size:       4
  self stack:      0
  global stack:    0
    size:8.500000, time:5.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetScgHsrunDivbus_TrustedCall.isra.0/40 inlined
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 5 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for SetScgHsrunDivcore/19 inlinable
  global time:     8.000000
  self size:       6
  global size:     12
  min size:       4
  self stack:      0
  global stack:    0
    size:8.500000, time:5.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetScgHsrunDivcore_TrustedCall.isra.0/39 inlined
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 5 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for SetScgVlprDivslow/17 inlinable
  global time:     7.500000
  self size:       6
  global size:     11
  min size:       4
  self stack:      0
  global stack:    0
    size:7.500000, time:5.000000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetScgVlprDivslow_TrustedCall.isra.0/38 inlined
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 5 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for SetScgVlprDivbus/15 inlinable
  global time:     8.000000
  self size:       6
  global size:     12
  min size:       4
  self stack:      0
  global stack:    0
    size:8.500000, time:5.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetScgVlprDivbus_TrustedCall.isra.0/37 inlined
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 5 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for SetScgVlprDivcore/13 inlinable
  global time:     8.000000
  self size:       6
  global size:     12
  min size:       4
  self stack:      0
  global stack:    0
    size:8.500000, time:5.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetScgVlprDivcore_TrustedCall.isra.0/36 inlined
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 5 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for SetScgRunDivslow/11 inlinable
  global time:     7.500000
  self size:       6
  global size:     11
  min size:       4
  self stack:      0
  global stack:    0
    size:7.500000, time:5.000000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetScgRunDivslow_TrustedCall.isra.0/35 inlined
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 5 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for SetScgRunDivbus/9 inlinable
  global time:     8.000000
  self size:       6
  global size:     12
  min size:       4
  self stack:      0
  global stack:    0
    size:8.500000, time:5.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetScgRunDivbus_TrustedCall.isra.0/34 inlined
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 5 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for SetScgRunDivcore/7 inlinable
  global time:     8.000000
  self size:       6
  global size:     12
  min size:       4
  self stack:      0
  global stack:    0
    size:8.500000, time:5.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
  calls:
    SetScgRunDivcore_TrustedCall.isra.0/33 inlined
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 5 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for SetScgAsyncDiv2/5 inlinable
  global time:     11.000000
  self size:       5
  global size:     12
  min size:       4
  self stack:      0
  global stack:    0
    size:8.000000, time:8.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 0] changed)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 32] changed)
  calls:
    SetScgAsyncDiv2_TrustedCall/4 inlined
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 6 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for SetScgAsyncDiv1/3 inlinable
  global time:     10.000000
  self size:       5
  global size:     11
  min size:       4
  self stack:      0
  global stack:    0
    size:7.000000, time:7.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 0] changed)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 32] changed)
  calls:
    SetScgAsyncDiv1_TrustedCall/2 inlined
      loop depth: 0 freq:1.00 size: 2 time: 11callee size: 6 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for Callback_DividerEmpty/1 inlinable
  global time:     2.000000
  self size:       3
  global size:     3
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  calls:

Symbol table:

SetSimClkoutDiv_TrustedCall.isra.0/42 (SetSimClkoutDiv_TrustedCall.isra.0) @06c747e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Function SetSimClkoutDiv_TrustedCall.isra.0/42 is inline copy in SetSimClkoutDiv/25
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: SetSimClkoutDiv/25 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
SetScgHsrunDivslow_TrustedCall.isra.0/41 (SetScgHsrunDivslow_TrustedCall.isra.0) @06c740e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Function SetScgHsrunDivslow_TrustedCall.isra.0/41 is inline copy in SetScgHsrunDivslow/23
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: SetScgHsrunDivslow/23 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
SetScgHsrunDivbus_TrustedCall.isra.0/40 (SetScgHsrunDivbus_TrustedCall.isra.0) @06c6cd20
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Function SetScgHsrunDivbus_TrustedCall.isra.0/40 is inline copy in SetScgHsrunDivbus/21
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: SetScgHsrunDivbus/21 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
SetScgHsrunDivcore_TrustedCall.isra.0/39 (SetScgHsrunDivcore_TrustedCall.isra.0) @06c6c700
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Function SetScgHsrunDivcore_TrustedCall.isra.0/39 is inline copy in SetScgHsrunDivcore/19
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: SetScgHsrunDivcore/19 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
SetScgVlprDivslow_TrustedCall.isra.0/38 (SetScgVlprDivslow_TrustedCall.isra.0) @06c6c0e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Function SetScgVlprDivslow_TrustedCall.isra.0/38 is inline copy in SetScgVlprDivslow/17
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: SetScgVlprDivslow/17 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
SetScgVlprDivbus_TrustedCall.isra.0/37 (SetScgVlprDivbus_TrustedCall.isra.0) @06bced20
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Function SetScgVlprDivbus_TrustedCall.isra.0/37 is inline copy in SetScgVlprDivbus/15
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: SetScgVlprDivbus/15 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
SetScgVlprDivcore_TrustedCall.isra.0/36 (SetScgVlprDivcore_TrustedCall.isra.0) @06bce700
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Function SetScgVlprDivcore_TrustedCall.isra.0/36 is inline copy in SetScgVlprDivcore/13
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: SetScgVlprDivcore/13 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
SetScgRunDivslow_TrustedCall.isra.0/35 (SetScgRunDivslow_TrustedCall.isra.0) @06bce0e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Function SetScgRunDivslow_TrustedCall.isra.0/35 is inline copy in SetScgRunDivslow/11
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: SetScgRunDivslow/11 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
SetScgRunDivbus_TrustedCall.isra.0/34 (SetScgRunDivbus_TrustedCall.isra.0) @06b92e00
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Function SetScgRunDivbus_TrustedCall.isra.0/34 is inline copy in SetScgRunDivbus/9
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: SetScgRunDivbus/9 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
SetScgRunDivcore_TrustedCall.isra.0/33 (SetScgRunDivcore_TrustedCall.isra.0) @06b927e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Function SetScgRunDivcore_TrustedCall.isra.0/33 is inline copy in SetScgRunDivcore/7
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: SetScgRunDivcore/7 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
scgPeriphAsyncDivs/32 (scgPeriphAsyncDivs) @06b845e8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: SetScgAsyncDiv1_TrustedCall/2 (read)SetScgAsyncDiv2_TrustedCall/4 (read)
  Availability: not_available
  Varpool flags: read-only
dividerValue_hardwareValue/31 (dividerValue_hardwareValue) @06b845a0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: SetScgAsyncDiv1_TrustedCall/2 (read)SetScgAsyncDiv2_TrustedCall/4 (read)
  Availability: not_available
  Varpool flags: read-only
clockFeatures/30 (clockFeatures) @05f7b990
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: SetScgAsyncDiv2_TrustedCall/4 (read)SetScgAsyncDiv1_TrustedCall/2 (read)SetPccPcdDivFrac_TrustedCall/26 (read)
  Availability: not_available
  Varpool flags: read-only
SetSimTraceDivMul/29 (SetSimTraceDivMul) @05f82380
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: dividerCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: SetSimTraceDivMul_TrustedCall/28 (inlined) (1073741824 (estimated locally),1.00 per call) 
SetSimTraceDivMul_TrustedCall/28 (SetSimTraceDivMul_TrustedCall) @05f820e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function SetSimTraceDivMul_TrustedCall/28 is inline copy in SetSimTraceDivMul/29
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: SetSimTraceDivMul/29 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
SetPccPcdDivFrac/27 (SetPccPcdDivFrac) @05f7c8c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: dividerCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: SetPccPcdDivFrac_TrustedCall/26 (inlined) (1073741824 (estimated locally),1.00 per call) 
SetPccPcdDivFrac_TrustedCall/26 (SetPccPcdDivFrac_TrustedCall) @05f7ce00
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: clockFeatures/30 (read)
  Referring: 
  Function SetPccPcdDivFrac_TrustedCall/26 is inline copy in SetPccPcdDivFrac/27
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: SetPccPcdDivFrac/27 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
SetSimClkoutDiv/25 (SetSimClkoutDiv) @05f7ca80
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: dividerCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: SetSimClkoutDiv_TrustedCall.isra.0/42 (inlined) (1073741824 (estimated locally),1.00 per call) 
SetScgHsrunDivslow/23 (SetScgHsrunDivslow) @05f7c460
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: dividerCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: SetScgHsrunDivslow_TrustedCall.isra.0/41 (inlined) (1073741824 (estimated locally),1.00 per call) 
SetScgHsrunDivbus/21 (SetScgHsrunDivbus) @05f79b60
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: dividerCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: SetScgHsrunDivbus_TrustedCall.isra.0/40 (inlined) (1073741824 (estimated locally),1.00 per call) 
SetScgHsrunDivcore/19 (SetScgHsrunDivcore) @05f79d20
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: dividerCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: SetScgHsrunDivcore_TrustedCall.isra.0/39 (inlined) (1073741824 (estimated locally),1.00 per call) 
SetScgVlprDivslow/17 (SetScgVlprDivslow) @05f797e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: dividerCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: SetScgVlprDivslow_TrustedCall.isra.0/38 (inlined) (1073741824 (estimated locally),1.00 per call) 
SetScgVlprDivbus/15 (SetScgVlprDivbus) @05f792a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: dividerCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: SetScgVlprDivbus_TrustedCall.isra.0/37 (inlined) (1073741824 (estimated locally),1.00 per call) 
SetScgVlprDivcore/13 (SetScgVlprDivcore) @05f73380
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: dividerCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: SetScgVlprDivcore_TrustedCall.isra.0/36 (inlined) (1073741824 (estimated locally),1.00 per call) 
SetScgRunDivslow/11 (SetScgRunDivslow) @05f73a80
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: dividerCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: SetScgRunDivslow_TrustedCall.isra.0/35 (inlined) (1073741824 (estimated locally),1.00 per call) 
SetScgRunDivbus/9 (SetScgRunDivbus) @05f73540
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: dividerCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: SetScgRunDivbus_TrustedCall.isra.0/34 (inlined) (1073741824 (estimated locally),1.00 per call) 
SetScgRunDivcore/7 (SetScgRunDivcore) @05f73000
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: dividerCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: SetScgRunDivcore_TrustedCall.isra.0/33 (inlined) (1073741824 (estimated locally),1.00 per call) 
SetScgAsyncDiv2/5 (SetScgAsyncDiv2) @05e72e00
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: dividerCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: SetScgAsyncDiv2_TrustedCall/4 (inlined) (1073741824 (estimated locally),1.00 per call) 
SetScgAsyncDiv2_TrustedCall/4 (SetScgAsyncDiv2_TrustedCall) @05e72b60
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: clockFeatures/30 (read)dividerValue_hardwareValue/31 (read)scgPeriphAsyncDivs/32 (read)
  Referring: 
  Function SetScgAsyncDiv2_TrustedCall/4 is inline copy in SetScgAsyncDiv2/5
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: SetScgAsyncDiv2/5 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
SetScgAsyncDiv1/3 (SetScgAsyncDiv1) @05e728c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: dividerCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: SetScgAsyncDiv1_TrustedCall/2 (inlined) (1073741824 (estimated locally),1.00 per call) 
SetScgAsyncDiv1_TrustedCall/2 (SetScgAsyncDiv1_TrustedCall) @05e72620
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: clockFeatures/30 (read)dividerValue_hardwareValue/31 (read)scgPeriphAsyncDivs/32 (read)
  Referring: 
  Function SetScgAsyncDiv1_TrustedCall/2 is inline copy in SetScgAsyncDiv1/3
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: SetScgAsyncDiv1/3 (inlined) (1073741824 (estimated locally),1.00 per call) 
  Calls: 
Callback_DividerEmpty/1 (Callback_DividerEmpty) @05e72380
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  Address is taken.
  References: 
  Referring: dividerCallbacks/0 (addr)
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
dividerCallbacks/0 (dividerCallbacks) @05e6fab0
  Type: variable definition analyzed
  Visibility: externally_visible public
  References: Callback_DividerEmpty/1 (addr)SetScgAsyncDiv1/3 (addr)SetScgAsyncDiv2/5 (addr)SetScgRunDivcore/7 (addr)SetScgRunDivbus/9 (addr)SetScgRunDivslow/11 (addr)SetScgVlprDivcore/13 (addr)SetScgVlprDivbus/15 (addr)SetScgVlprDivslow/17 (addr)SetScgHsrunDivcore/19 (addr)SetScgHsrunDivbus/21 (addr)SetScgHsrunDivslow/23 (addr)SetSimClkoutDiv/25 (addr)SetPccPcdDivFrac/27 (addr)SetSimTraceDivMul/29 (addr)
  Referring: 
  Availability: available
  Varpool flags: initialized read-only const-value-known

;; Function Callback_DividerEmpty (Callback_DividerEmpty, funcdef_no=0, decl_uid=6045, cgraph_uid=1, symbol_order=1)

Callback_DividerEmpty (const struct Clock_Ip_DividerConfigType * config)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  return;

}



;; Function SetScgAsyncDiv1 (SetScgAsyncDiv1, funcdef_no=2, decl_uid=6047, cgraph_uid=3, symbol_order=3)


Symbols to be put in SSA form
{ D.6205 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 5
Number of blocks to update: 4 ( 80%)


Merging blocks 2 and 4
Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
SetScgAsyncDiv1 (const struct Clock_Ip_DividerConfigType * config)
{
  uint32 regValue;
  uint32 instance;
  uint32 dividerValue;
  <unnamed type> _4;
  unsigned char _5;
  long unsigned int _7;
  unsigned char _8;
  volatile struct scgPeriphAsyncDiv_Type * _10;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG config => config_2(D)
  # DEBUG INLINE_ENTRY SetScgAsyncDiv1_TrustedCall
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _4 = config_2(D)->name;
  _5 = clockFeatures[_4][0];
  instance_6 = (uint32) _5;
  # DEBUG instance => instance_6
  # DEBUG BEGIN_STMT
  _7 = config_2(D)->value;
  _8 = dividerValue_hardwareValue[_7];
  dividerValue_9 = (uint32) _8;
  # DEBUG dividerValue => dividerValue_9
  # DEBUG BEGIN_STMT
  _10 = scgPeriphAsyncDivs[instance_6];
  regValue_11 ={v} _10->ASYNC_DIV;
  # DEBUG regValue => regValue_11
  # DEBUG BEGIN_STMT
  regValue_12 = regValue_11 & 4294967288;
  # DEBUG regValue => regValue_12
  # DEBUG BEGIN_STMT
  regValue_13 = dividerValue_9 | regValue_12;
  # DEBUG regValue => regValue_13
  # DEBUG BEGIN_STMT
  _10->ASYNC_DIV ={v} regValue_13;
  # DEBUG config => NULL
  # DEBUG dividerValue => NULL
  # DEBUG instance => NULL
  # DEBUG regValue => NULL
  return;

}



;; Function SetScgAsyncDiv2 (SetScgAsyncDiv2, funcdef_no=4, decl_uid=6049, cgraph_uid=5, symbol_order=5)


Symbols to be put in SSA form
{ D.6207 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 5
Number of blocks to update: 4 ( 80%)


Merging blocks 2 and 4
Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
SetScgAsyncDiv2 (const struct Clock_Ip_DividerConfigType * config)
{
  uint32 regValue;
  uint32 instance;
  uint32 dividerValue;
  <unnamed type> _4;
  unsigned char _5;
  long unsigned int _7;
  unsigned char _8;
  volatile struct scgPeriphAsyncDiv_Type * _10;
  long unsigned int _13;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG config => config_2(D)
  # DEBUG INLINE_ENTRY SetScgAsyncDiv2_TrustedCall
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _4 = config_2(D)->name;
  _5 = clockFeatures[_4][0];
  instance_6 = (uint32) _5;
  # DEBUG instance => instance_6
  # DEBUG BEGIN_STMT
  _7 = config_2(D)->value;
  _8 = dividerValue_hardwareValue[_7];
  dividerValue_9 = (uint32) _8;
  # DEBUG dividerValue => dividerValue_9
  # DEBUG BEGIN_STMT
  _10 = scgPeriphAsyncDivs[instance_6];
  regValue_11 ={v} _10->ASYNC_DIV;
  # DEBUG regValue => regValue_11
  # DEBUG BEGIN_STMT
  regValue_12 = regValue_11 & 4294965503;
  # DEBUG regValue => regValue_12
  # DEBUG BEGIN_STMT
  _13 = dividerValue_9 << 8;
  regValue_14 = regValue_12 | _13;
  # DEBUG regValue => regValue_14
  # DEBUG BEGIN_STMT
  _10->ASYNC_DIV ={v} regValue_14;
  # DEBUG config => NULL
  # DEBUG dividerValue => NULL
  # DEBUG instance => NULL
  # DEBUG regValue => NULL
  return;

}



;; Function SetPccPcdDivFrac (SetPccPcdDivFrac, funcdef_no=26, decl_uid=6071, cgraph_uid=27, symbol_order=27)


Symbols to be put in SSA form
{ D.6229 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 5
Number of blocks to update: 4 ( 80%)


Merging blocks 2 and 4
Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
SetPccPcdDivFrac (const struct Clock_Ip_DividerConfigType * config)
{
  uint32 regValue;
  <unnamed type> _4;
  unsigned char _5;
  int _6;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  unsigned char _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG config => config_2(D)
  # DEBUG INLINE_ENTRY SetPccPcdDivFrac_TrustedCall
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _4 = config_2(D)->name;
  _5 = clockFeatures[_4][5];
  _6 = (int) _5;
  regValue_7 ={v} MEM[(struct PCC_Type *)1074155520B].PCCn[_6];
  # DEBUG regValue => regValue_7
  # DEBUG BEGIN_STMT
  regValue_8 = regValue_7 & 4294967280;
  # DEBUG regValue => regValue_8
  # DEBUG BEGIN_STMT
  _9 = config_2(D)->value;
  _10 = _9 + 4294967295;
  _11 = _10 & 7;
  regValue_12 = regValue_8 | _11;
  # DEBUG regValue => regValue_12
  # DEBUG BEGIN_STMT
  _13 = config_2(D)->options[0];
  _14 = (long unsigned int) _13;
  _15 = _14 + 4294967295;
  _16 = _15 << 3;
  _17 = _16 & 8;
  regValue_18 = regValue_12 | _17;
  # DEBUG regValue => regValue_18
  # DEBUG BEGIN_STMT
  MEM[(struct PCC_Type *)1074155520B].PCCn[_6] ={v} regValue_18;
  # DEBUG config => NULL
  # DEBUG regValue => NULL
  return;

}



;; Function SetSimTraceDivMul (SetSimTraceDivMul, funcdef_no=28, decl_uid=6073, cgraph_uid=29, symbol_order=29)


Symbols to be put in SSA form
{ D.6231 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 5
Number of blocks to update: 4 ( 80%)


Merging blocks 2 and 4
Merging blocks 2 and 3
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
SetSimTraceDivMul (const struct Clock_Ip_DividerConfigType * config)
{
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  unsigned char _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG config => config_2(D)
  # DEBUG INLINE_ENTRY SetSimTraceDivMul_TrustedCall
  # DEBUG BEGIN_STMT
  _4 ={v} MEM[(struct SIM_Type *)1074036736B].CLKDIV4;
  _5 = config_2(D)->value;
  _6 = _5 + 4294967295;
  _7 = _6 << 1;
  _8 = _7 & 14;
  _9 = config_2(D)->options[0];
  _10 = (long unsigned int) _9;
  _11 = _10 + 4294967295;
  _12 = _11 & 1;
  _13 = _8 | _12;
  _14 = _4 | _13;
  MEM[(struct SIM_Type *)1074036736B].CLKDIV4 ={v} _14;
  # DEBUG config => NULL
  return;

}



;; Function SetScgRunDivcore (SetScgRunDivcore, funcdef_no=6, decl_uid=6051, cgraph_uid=7, symbol_order=7)


Symbols to be put in SSA form
{ D.6209 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 8
Number of blocks to update: 7 ( 88%)


Merging blocks 2 and 4
Merging blocks 7 and 3
Merging blocks 2 and 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }
SetScgRunDivcore (const struct Clock_Ip_DividerConfigType * config)
{
  uint32 regValue;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _8;
  long unsigned int _9;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _4 = MEM[(long unsigned int *)config_2(D) + 4B];
  # DEBUG D#1 => config_2(D)
  # DEBUG INLINE_ENTRY SetScgRunDivcore_TrustedCall
  # DEBUG config => D#1
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = _4;
  if (_5 != 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  regValue_6 ={v} MEM[(struct SCG_Type *)1074151424B].RCCR;
  # DEBUG regValue => regValue_6
  # DEBUG BEGIN_STMT
  regValue_7 = regValue_6 & 4293984255;
  # DEBUG regValue => regValue_7
  # DEBUG BEGIN_STMT
  _8 = _5 + 4294967295;
  _9 = _8 << 16;
  regValue_10 = regValue_7 | _9;
  # DEBUG regValue => regValue_10
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].RCCR ={v} regValue_10;

  <bb 4> [local count: 1073741824]:
  # DEBUG regValue => NULL
  return;

}



;; Function SetScgRunDivbus (SetScgRunDivbus, funcdef_no=8, decl_uid=6053, cgraph_uid=9, symbol_order=9)


Symbols to be put in SSA form
{ D.6211 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 8
Number of blocks to update: 7 ( 88%)


Merging blocks 2 and 4
Merging blocks 7 and 3
Merging blocks 2 and 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }
SetScgRunDivbus (const struct Clock_Ip_DividerConfigType * config)
{
  uint32 regValue;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _8;
  long unsigned int _9;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _4 = MEM[(long unsigned int *)config_2(D) + 4B];
  # DEBUG D#2 => config_2(D)
  # DEBUG INLINE_ENTRY SetScgRunDivbus_TrustedCall
  # DEBUG config => D#2
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = _4;
  if (_5 != 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  regValue_6 ={v} MEM[(struct SCG_Type *)1074151424B].RCCR;
  # DEBUG regValue => regValue_6
  # DEBUG BEGIN_STMT
  regValue_7 = regValue_6 & 4294967055;
  # DEBUG regValue => regValue_7
  # DEBUG BEGIN_STMT
  _8 = _5 + 4294967295;
  _9 = _8 << 4;
  regValue_10 = regValue_7 | _9;
  # DEBUG regValue => regValue_10
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].RCCR ={v} regValue_10;

  <bb 4> [local count: 1073741824]:
  # DEBUG regValue => NULL
  return;

}



;; Function SetScgRunDivslow (SetScgRunDivslow, funcdef_no=10, decl_uid=6055, cgraph_uid=11, symbol_order=11)


Symbols to be put in SSA form
{ D.6213 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 8
Number of blocks to update: 7 ( 88%)


Merging blocks 2 and 4
Merging blocks 7 and 3
Merging blocks 2 and 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }
SetScgRunDivslow (const struct Clock_Ip_DividerConfigType * config)
{
  uint32 regValue;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _8;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _4 = MEM[(long unsigned int *)config_2(D) + 4B];
  # DEBUG D#3 => config_2(D)
  # DEBUG INLINE_ENTRY SetScgRunDivslow_TrustedCall
  # DEBUG config => D#3
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = _4;
  if (_5 != 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  regValue_6 ={v} MEM[(struct SCG_Type *)1074151424B].RCCR;
  # DEBUG regValue => regValue_6
  # DEBUG BEGIN_STMT
  regValue_7 = regValue_6 & 4294967280;
  # DEBUG regValue => regValue_7
  # DEBUG BEGIN_STMT
  _8 = _5 + 4294967295;
  regValue_9 = regValue_7 | _8;
  # DEBUG regValue => regValue_9
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].RCCR ={v} regValue_9;

  <bb 4> [local count: 1073741824]:
  # DEBUG regValue => NULL
  return;

}



;; Function SetScgVlprDivcore (SetScgVlprDivcore, funcdef_no=12, decl_uid=6057, cgraph_uid=13, symbol_order=13)


Symbols to be put in SSA form
{ D.6215 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 8
Number of blocks to update: 7 ( 88%)


Merging blocks 2 and 4
Merging blocks 7 and 3
Merging blocks 2 and 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }
SetScgVlprDivcore (const struct Clock_Ip_DividerConfigType * config)
{
  uint32 regValue;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _8;
  long unsigned int _9;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _4 = MEM[(long unsigned int *)config_2(D) + 4B];
  # DEBUG D#4 => config_2(D)
  # DEBUG INLINE_ENTRY SetScgVlprDivcore_TrustedCall
  # DEBUG config => D#4
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = _4;
  if (_5 != 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  regValue_6 ={v} MEM[(struct SCG_Type *)1074151424B].VCCR;
  # DEBUG regValue => regValue_6
  # DEBUG BEGIN_STMT
  regValue_7 = regValue_6 & 4293984255;
  # DEBUG regValue => regValue_7
  # DEBUG BEGIN_STMT
  _8 = _5 + 4294967295;
  _9 = _8 << 16;
  regValue_10 = regValue_7 | _9;
  # DEBUG regValue => regValue_10
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].VCCR ={v} regValue_10;

  <bb 4> [local count: 1073741824]:
  # DEBUG regValue => NULL
  return;

}



;; Function SetScgVlprDivbus (SetScgVlprDivbus, funcdef_no=14, decl_uid=6059, cgraph_uid=15, symbol_order=15)


Symbols to be put in SSA form
{ D.6217 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 8
Number of blocks to update: 7 ( 88%)


Merging blocks 2 and 4
Merging blocks 7 and 3
Merging blocks 2 and 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }
SetScgVlprDivbus (const struct Clock_Ip_DividerConfigType * config)
{
  uint32 regValue;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _8;
  long unsigned int _9;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _4 = MEM[(long unsigned int *)config_2(D) + 4B];
  # DEBUG D#5 => config_2(D)
  # DEBUG INLINE_ENTRY SetScgVlprDivbus_TrustedCall
  # DEBUG config => D#5
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = _4;
  if (_5 != 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  regValue_6 ={v} MEM[(struct SCG_Type *)1074151424B].VCCR;
  # DEBUG regValue => regValue_6
  # DEBUG BEGIN_STMT
  regValue_7 = regValue_6 & 4294967055;
  # DEBUG regValue => regValue_7
  # DEBUG BEGIN_STMT
  _8 = _5 + 4294967295;
  _9 = _8 << 4;
  regValue_10 = regValue_7 | _9;
  # DEBUG regValue => regValue_10
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].VCCR ={v} regValue_10;

  <bb 4> [local count: 1073741824]:
  # DEBUG regValue => NULL
  return;

}



;; Function SetScgVlprDivslow (SetScgVlprDivslow, funcdef_no=16, decl_uid=6061, cgraph_uid=17, symbol_order=17)


Symbols to be put in SSA form
{ D.6219 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 8
Number of blocks to update: 7 ( 88%)


Merging blocks 2 and 4
Merging blocks 7 and 3
Merging blocks 2 and 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }
SetScgVlprDivslow (const struct Clock_Ip_DividerConfigType * config)
{
  uint32 regValue;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _8;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _4 = MEM[(long unsigned int *)config_2(D) + 4B];
  # DEBUG D#6 => config_2(D)
  # DEBUG INLINE_ENTRY SetScgVlprDivslow_TrustedCall
  # DEBUG config => D#6
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = _4;
  if (_5 != 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  regValue_6 ={v} MEM[(struct SCG_Type *)1074151424B].VCCR;
  # DEBUG regValue => regValue_6
  # DEBUG BEGIN_STMT
  regValue_7 = regValue_6 & 4294967280;
  # DEBUG regValue => regValue_7
  # DEBUG BEGIN_STMT
  _8 = _5 + 4294967295;
  regValue_9 = regValue_7 | _8;
  # DEBUG regValue => regValue_9
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].VCCR ={v} regValue_9;

  <bb 4> [local count: 1073741824]:
  # DEBUG regValue => NULL
  return;

}



;; Function SetScgHsrunDivcore (SetScgHsrunDivcore, funcdef_no=18, decl_uid=6063, cgraph_uid=19, symbol_order=19)


Symbols to be put in SSA form
{ D.6221 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 8
Number of blocks to update: 7 ( 88%)


Merging blocks 2 and 4
Merging blocks 7 and 3
Merging blocks 2 and 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }
SetScgHsrunDivcore (const struct Clock_Ip_DividerConfigType * config)
{
  uint32 regValue;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _8;
  long unsigned int _9;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _4 = MEM[(long unsigned int *)config_2(D) + 4B];
  # DEBUG D#7 => config_2(D)
  # DEBUG INLINE_ENTRY SetScgHsrunDivcore_TrustedCall
  # DEBUG config => D#7
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = _4;
  if (_5 != 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  regValue_6 ={v} MEM[(struct SCG_Type *)1074151424B].HCCR;
  # DEBUG regValue => regValue_6
  # DEBUG BEGIN_STMT
  regValue_7 = regValue_6 & 4293984255;
  # DEBUG regValue => regValue_7
  # DEBUG BEGIN_STMT
  _8 = _5 + 4294967295;
  _9 = _8 << 16;
  regValue_10 = regValue_7 | _9;
  # DEBUG regValue => regValue_10
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].HCCR ={v} regValue_10;

  <bb 4> [local count: 1073741824]:
  # DEBUG regValue => NULL
  return;

}



;; Function SetScgHsrunDivbus (SetScgHsrunDivbus, funcdef_no=20, decl_uid=6065, cgraph_uid=21, symbol_order=21)


Symbols to be put in SSA form
{ D.6223 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 8
Number of blocks to update: 7 ( 88%)


Merging blocks 2 and 4
Merging blocks 7 and 3
Merging blocks 2 and 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }
SetScgHsrunDivbus (const struct Clock_Ip_DividerConfigType * config)
{
  uint32 regValue;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _8;
  long unsigned int _9;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _4 = MEM[(long unsigned int *)config_2(D) + 4B];
  # DEBUG D#8 => config_2(D)
  # DEBUG INLINE_ENTRY SetScgHsrunDivbus_TrustedCall
  # DEBUG config => D#8
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = _4;
  if (_5 != 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  regValue_6 ={v} MEM[(struct SCG_Type *)1074151424B].HCCR;
  # DEBUG regValue => regValue_6
  # DEBUG BEGIN_STMT
  regValue_7 = regValue_6 & 4294967055;
  # DEBUG regValue => regValue_7
  # DEBUG BEGIN_STMT
  _8 = _5 + 4294967295;
  _9 = _8 << 4;
  regValue_10 = regValue_7 | _9;
  # DEBUG regValue => regValue_10
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].HCCR ={v} regValue_10;

  <bb 4> [local count: 1073741824]:
  # DEBUG regValue => NULL
  return;

}



;; Function SetScgHsrunDivslow (SetScgHsrunDivslow, funcdef_no=22, decl_uid=6067, cgraph_uid=23, symbol_order=23)


Symbols to be put in SSA form
{ D.6225 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 8
Number of blocks to update: 7 ( 88%)


Merging blocks 2 and 4
Merging blocks 7 and 3
Merging blocks 2 and 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }
SetScgHsrunDivslow (const struct Clock_Ip_DividerConfigType * config)
{
  uint32 regValue;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _8;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _4 = MEM[(long unsigned int *)config_2(D) + 4B];
  # DEBUG D#9 => config_2(D)
  # DEBUG INLINE_ENTRY SetScgHsrunDivslow_TrustedCall
  # DEBUG config => D#9
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = _4;
  if (_5 != 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  regValue_6 ={v} MEM[(struct SCG_Type *)1074151424B].HCCR;
  # DEBUG regValue => regValue_6
  # DEBUG BEGIN_STMT
  regValue_7 = regValue_6 & 4294967280;
  # DEBUG regValue => regValue_7
  # DEBUG BEGIN_STMT
  _8 = _5 + 4294967295;
  regValue_9 = regValue_7 | _8;
  # DEBUG regValue => regValue_9
  # DEBUG BEGIN_STMT
  MEM[(struct SCG_Type *)1074151424B].HCCR ={v} regValue_9;

  <bb 4> [local count: 1073741824]:
  # DEBUG regValue => NULL
  return;

}



;; Function SetSimClkoutDiv (SetSimClkoutDiv, funcdef_no=24, decl_uid=6069, cgraph_uid=25, symbol_order=25)


Symbols to be put in SSA form
{ D.6227 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 8
Number of blocks to update: 7 ( 88%)


Merging blocks 2 and 4
Merging blocks 7 and 3
Merging blocks 2 and 5
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }
SetSimClkoutDiv (const struct Clock_Ip_DividerConfigType * config)
{
  uint32 regValue;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _4 = MEM[(long unsigned int *)config_2(D) + 4B];
  # DEBUG D#10 => config_2(D)
  # DEBUG INLINE_ENTRY SetSimClkoutDiv_TrustedCall
  # DEBUG config => D#10
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _5 = _4;
  if (_5 != 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  regValue_6 ={v} MEM[(struct SIM_Type *)1074036736B].CHIPCTL;
  # DEBUG regValue => regValue_6
  # DEBUG BEGIN_STMT
  regValue_7 = regValue_6 & 4294965503;
  # DEBUG regValue => regValue_7
  # DEBUG BEGIN_STMT
  _8 = _5 + 4294967295;
  _9 = _8 << 8;
  _10 = _9 & 1792;
  regValue_11 = regValue_7 | _10;
  # DEBUG regValue => regValue_11
  # DEBUG BEGIN_STMT
  MEM[(struct SIM_Type *)1074036736B].CHIPCTL ={v} regValue_11;

  <bb 4> [local count: 1073741824]:
  # DEBUG regValue => NULL
  return;

}


