IPA function summary for FlexCAN_StartRxMessageFifoData.part.0/161 inlinable
  global time:     16.140750
  self size:       41
  global size:     41
  min size:       36
  self stack:      0
  global stack:    0
    size:20.000000, time:9.314500
    size:3.000000, time:2.000000,  executed if:(not inlined)
  array index:(op0 changed)
  calls:
    FlexCAN_SetMsgBuffIntCmd/114 function body not available
      loop depth: 0 freq:0.11 size: 6 time: 15
       op2 is compile time invariant
       op3 is compile time invariant
    FlexCAN_SetMsgBuffIntCmd/114 function body not available
      loop depth: 0 freq:0.11 size: 6 time: 15
       op2 is compile time invariant
       op3 is compile time invariant
    FlexCAN_SetMsgBuffIntCmd/114 function body not available
      loop depth: 0 freq:0.11 size: 6 time: 15
       op2 is compile time invariant
       op3 is compile time invariant

IPA function summary for FlexCAN_GetMsgBuffIntStatusFlag.part.0/158 inlinable
  global time:     7.000000
  self size:       8
  global size:     8
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 320] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 320] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 384] changed) && (not inlined)
    size:0.500000, time:0.500000,  nonconst if:(op0[ref offset: 384] changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 320] changed || op0[ref offset: 384] changed)
    size:2.000000, time:2.000000,  nonconst if:(op0[ref offset: 320] changed || op0[ref offset: 384] changed || op1 changed)
  calls:

IPA function summary for FlexCAN_SetExtendedTimeSegments.part.0/157 inlinable
  global time:     26.000000
  self size:       27
  global size:     27
  min size:       0
  self stack:      0
  global stack:    0
    size:2.500000, time:2.500000
    size:4.500000, time:3.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 640] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 640] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op1[ref offset: 0] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op1[ref offset: 0] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op1[ref offset: 64] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op1[ref offset: 64] changed)
    size:1.000000, time:1.000000,  nonconst if:(op1[ref offset: 0] changed || op1[ref offset: 64] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op1[ref offset: 32] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op1[ref offset: 32] changed)
    size:1.000000, time:1.000000,  nonconst if:(op1[ref offset: 0] changed || op1[ref offset: 64] changed || op1[ref offset: 32] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op1[ref offset: 96] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op1[ref offset: 96] changed)
    size:1.000000, time:1.000000,  nonconst if:(op1[ref offset: 0] changed || op1[ref offset: 64] changed || op1[ref offset: 32] changed || op1[ref offset: 96] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op1[ref offset: 128] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op1[ref offset: 128] changed)
    size:1.000000, time:1.000000,  nonconst if:(op1[ref offset: 0] changed || op1[ref offset: 64] changed || op1[ref offset: 32] changed || op1[ref offset: 96] changed || op1[ref offset: 128] changed)
  calls:

IPA function summary for FlexCAN_SetTimeSegments.part.0/155 inlinable
  global time:     25.000000
  self size:       26
  global size:     26
  min size:       0
  self stack:      0
  global stack:    0
    size:2.500000, time:2.500000
    size:4.500000, time:3.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 32] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 32] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op1[ref offset: 0] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op1[ref offset: 0] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op1[ref offset: 64] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op1[ref offset: 64] changed)
    size:1.000000, time:1.000000,  nonconst if:(op1[ref offset: 0] changed || op1[ref offset: 64] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op1[ref offset: 32] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op1[ref offset: 32] changed)
    size:1.000000, time:1.000000,  nonconst if:(op1[ref offset: 0] changed || op1[ref offset: 64] changed || op1[ref offset: 32] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op1[ref offset: 96] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op1[ref offset: 96] changed)
    size:1.000000, time:1.000000,  nonconst if:(op1[ref offset: 0] changed || op1[ref offset: 64] changed || op1[ref offset: 32] changed || op1[ref offset: 96] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op1[ref offset: 128] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op1[ref offset: 128] changed)
    size:1.000000, time:1.000000,  nonconst if:(op1[ref offset: 0] changed || op1[ref offset: 64] changed || op1[ref offset: 32] changed || op1[ref offset: 96] changed || op1[ref offset: 128] changed)
  calls:

IPA function summary for FlexCAN_SetFDTimeSegments.part.0/153 inlinable
  global time:     26.000000
  self size:       27
  global size:     27
  min size:       0
  self stack:      0
  global stack:    0
    size:2.500000, time:2.500000
    size:4.500000, time:3.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 24608] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 24608] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op1[ref offset: 0] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op1[ref offset: 0] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op1[ref offset: 64] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op1[ref offset: 64] changed)
    size:1.000000, time:1.000000,  nonconst if:(op1[ref offset: 0] changed || op1[ref offset: 64] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op1[ref offset: 32] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op1[ref offset: 32] changed)
    size:1.000000, time:1.000000,  nonconst if:(op1[ref offset: 0] changed || op1[ref offset: 64] changed || op1[ref offset: 32] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op1[ref offset: 96] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op1[ref offset: 96] changed)
    size:1.000000, time:1.000000,  nonconst if:(op1[ref offset: 0] changed || op1[ref offset: 64] changed || op1[ref offset: 32] changed || op1[ref offset: 96] changed)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op1[ref offset: 128] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op1[ref offset: 128] changed)
    size:1.000000, time:1.000000,  nonconst if:(op1[ref offset: 0] changed || op1[ref offset: 64] changed || op1[ref offset: 32] changed || op1[ref offset: 96] changed || op1[ref offset: 128] changed)
  calls:

IPA function summary for FlexCAN_Ip_ManualBusOffRecovery/104 inlinable
  global time:     41.963078
  self size:       45
  global size:     45
  min size:       26
  self stack:      4
  global stack:    4
    size:28.000000, time:14.848716
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    OsIf_GetElapsed/122 function body not available
      loop depth: 1 freq:0.73 size: 4 time: 13
       op0 is compile time invariant
       op1 is compile time invariant
    OsIf_GetCounter/121 function body not available
      loop depth: 0 freq:0.08 size: 3 time: 12
       op0 is compile time invariant
    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_20/151 function body not available
      loop depth: 0 freq:0.08 size: 1 time: 10
    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_20/150 function body not available
      loop depth: 0 freq:0.08 size: 1 time: 10
    OsIf_MicrosToTicks/120 function body not available
      loop depth: 0 freq:1.00 size: 4 time: 13
       op0 is compile time invariant
       op1 is compile time invariant

IPA function summary for FlexCAN_Ip_GetListenOnlyMode/103 inlinable
  global time:     6.000000
  self size:       7
  global size:     7
  min size:       0
  self stack:      0
  global stack:    0
    size:4.000000, time:4.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  array index:(op0 changed)
  calls:

IPA function summary for FlexCAN_Ip_SetListenOnlyMode_Privileged/102 inlinable
  global time:     19.524950
  self size:       35
  global size:     35
  min size:       22
  self stack:      0
  global stack:    0
    size:20.000000, time:10.505001
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_Disable/108 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12
    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_10/149 function body not available
      loop depth: 0 freq:0.12 size: 1 time: 10
    FlexCAN_SetListenOnlyMode/5 function not considered for inlining
      loop depth: 0 freq:0.12 size: 3 time: 12callee size: 4 stack: 0
    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_10/148 function body not available
      loop depth: 0 freq:0.12 size: 1 time: 10
    FlexCAN_Enable/126 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12

IPA function summary for FlexCAN_Ip_SetRxMb15Mask_Privileged/101 inlinable
  global time:     15.752459
  self size:       31
  global size:     31
  min size:       12
  self stack:      0
  global stack:    0
    size:21.000000, time:10.692500
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_Disable/108 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12
    FlexCAN_Enable/126 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12

IPA function summary for FlexCAN_Ip_SetRxMb14Mask_Privileged/100 inlinable
  global time:     15.752459
  self size:       31
  global size:     31
  min size:       12
  self stack:      0
  global stack:    0
    size:21.000000, time:10.692500
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_Disable/108 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12
    FlexCAN_Enable/126 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12

IPA function summary for FlexCAN_Ip_AbortTransfer/99 inlinable
  global time:     11.431054
  self size:       40
  global size:     40
  min size:       0
  self stack:      0
  global stack:    0
    size:10.000000, time:6.500000
    size:3.000000, time:0.500000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:4.000000, time:1.500000,  nonconst if:(op1 changed)
    size:10.000000, time:0.792990,  executed if:(op1 <= 31)
  array index:(op1 changed) && (op0 changed)
  calls:
    FlexCAN_AbortRxTransfer/51 function not considered for inlining
      loop depth: 0 freq:0.01 size: 3 time: 12callee size:23 stack: 0 predicate: (op1 <= 31)
    FlexCAN_AbortTxTransfer/50 function not considered for inlining
      loop depth: 0 freq:0.01 size: 4 time: 13callee size:24 stack: 4 predicate: (op1 <= 31)
    FLEXCAN_ClearMsgBuffIntCmd/147 function body not available
      loop depth: 0 freq:0.06 size: 5 time: 14 predicate: (op1 <= 31)

IPA function summary for FlexCAN_Ip_SetErrorInt_Privileged/98 inlinable
  global time:     18.373233
  self size:       68
  global size:     68
  min size:       12
  self stack:      0
  global stack:    0
    size:18.000000, time:7.709837
    size:3.000000, time:0.927450,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:12.000000, time:1.745003,  nonconst if:(op1 changed)
    size:4.000000, time:0.290890,  executed if:(op1 == 1)
    size:4.000000, time:0.290890,  executed if:(op1 == 0)
  array index:(op0 changed)
  calls:
    FlexCAN_Disable/108 function body not available
      loop depth: 0 freq:0.12 size: 3 time: 12
    FlexCAN_SetErrIntCmd/146 function body not available
      loop depth: 0 freq:0.02 size: 4 time: 13 predicate: (op1 == 1)
       op1 is compile time invariant
    FlexCAN_SetErrIntCmd/146 function body not available
      loop depth: 0 freq:0.02 size: 4 time: 13 predicate: (op1 == 0)
       op1 is compile time invariant
    FlexCAN_SetErrIntCmd/146 function body not available
      loop depth: 0 freq:0.07 size: 4 time: 13 predicate: (op1 == 3)
       op1 is compile time invariant
    FlexCAN_SetErrIntCmd/146 function body not available
      loop depth: 0 freq:0.07 size: 4 time: 13 predicate: (op1 == 2)
       op1 is compile time invariant
    FlexCAN_SetErrIntCmd/146 function body not available
      loop depth: 0 freq:0.07 size: 4 time: 13 predicate: (op1 == 4)
       op1 is compile time invariant
    FlexCAN_Enable/126 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12

IPA function summary for FlexCAN_Ip_DisableInterrupts_Privileged/97 inlinable
  global time:     11.988815
  self size:       16
  global size:     16
  min size:       4
  self stack:      0
  global stack:    0
    size:10.000000, time:7.707401
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_DisableInterrupts/145 function body not available
      loop depth: 0 freq:0.21 size: 2 time: 11

IPA function summary for FlexCAN_Ip_EnableInterrupts_Privileged/96 inlinable
  global time:     12.196216
  self size:       17
  global size:     17
  min size:       6
  self stack:      0
  global stack:    0
    size:10.000000, time:7.707401
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_EnableInterrupts/144 function body not available
      loop depth: 0 freq:0.21 size: 3 time: 12

IPA function summary for FlexCAN_Ip_ClearBuffStatusFlag/95 inlinable
  global time:     12.500000
  self size:       12
  global size:     12
  min size:       6
  self stack:      0
  global stack:    0
    size:5.000000, time:4.500000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_ClearMsgBuffIntStatusFlag/7 function not considered for inlining
      loop depth: 0 freq:0.50 size: 3 time: 12callee size: 4 stack: 0

IPA function summary for FlexCAN_Ip_GetBuffStatusFlag/94 inlinable
  global time:     13.500000
  self size:       14
  global size:     14
  min size:       8
  self stack:      0
  global stack:    0
    size:6.000000, time:5.000000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_GetBuffStatusFlag/8 function not considered for inlining
      loop depth: 0 freq:0.50 size: 4 time: 13callee size: 4 stack: 0

IPA function summary for FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/93 inlinable
  global time:     19.524950
  self size:       35
  global size:     35
  min size:       22
  self stack:      0
  global stack:    0
    size:20.000000, time:10.505001
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_Disable/108 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12
    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_17/143 function body not available
      loop depth: 0 freq:0.12 size: 1 time: 10
    FlexCAN_SetTxArbitrationStartDelay/34 function not considered for inlining
      loop depth: 0 freq:0.12 size: 3 time: 12callee size: 4 stack: 0
    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_17/142 function body not available
      loop depth: 0 freq:0.12 size: 1 time: 10
    FlexCAN_Enable/126 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12

IPA function summary for FlexCAN_Ip_SetTDCOffset_Privileged/92 inlinable
  global time:     22.089416
  self size:       43
  global size:     43
  min size:       30
  self stack:      0
  global stack:    0
    size:24.000000, time:10.252501
    size:3.000000, time:0.500000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_Disable/108 function body not available
      loop depth: 0 freq:0.06 size: 3 time: 12
    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_16/141 function body not available
      loop depth: 0 freq:0.06 size: 1 time: 10
    FlexCAN_SetTDCOffset/2 function not considered for inlining
      loop depth: 0 freq:0.06 size: 4 time: 13callee size: 6 stack: 0
    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_16/140 function body not available
      loop depth: 0 freq:0.06 size: 1 time: 10
    FlexCAN_IsFDAvailable/105 function body not available
      loop depth: 0 freq:0.50 size: 3 time: 12
    FlexCAN_Enable/126 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12

IPA function summary for FlexCAN_Ip_GetBitrateFD/91 inlinable
  global time:     11.250000
  self size:       17
  global size:     17
  min size:       6
  self stack:      0
  global stack:    0
    size:9.000000, time:6.250000
    size:3.000000, time:0.500000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.500000,  nonconst if:(op1 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_GetFDTimeSegments/15 function not considered for inlining
      loop depth: 0 freq:0.25 size: 3 time: 12callee size:11 stack: 0

IPA function summary for FlexCAN_Ip_SetBitrateCbt_Privileged/90 inlinable
  global time:     14.862225
  self size:       49
  global size:     49
  min size:       30
  self stack:      0
  global stack:    0
    size:29.000000, time:9.940009
    size:3.000000, time:0.500000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.500000,  nonconst if:(op1 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_Disable/108 function body not available
      loop depth: 0 freq:0.06 size: 3 time: 12
    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_15/139 function body not available
      loop depth: 0 freq:0.03 size: 1 time: 10
    FlexCAN_SetFDTimeSegments/10 function not considered for inlining
      loop depth: 0 freq:0.03 size: 3 time: 12callee size: 5 stack: 0
    FlexCAN_SetFDEnabled/4 function not considered for inlining
      loop depth: 0 freq:0.03 size: 4 time: 13callee size: 9 stack: 0
    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_15/138 function body not available
      loop depth: 0 freq:0.03 size: 1 time: 10
    FlexCAN_Enable/126 function body not available
      loop depth: 0 freq:0.06 size: 3 time: 12

IPA function summary for FlexCAN_Ip_GetTDCValue/89 inlinable
  global time:     7.500000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:7.000000, time:5.500000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:

IPA function summary for FlexCAN_Ip_GetTDCFail/88 inlinable
  global time:     8.000000
  self size:       12
  global size:     12
  min size:       0
  self stack:      0
  global stack:    0
    size:8.000000, time:6.000000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:

IPA function summary for FlexCAN_Ip_ClearTDCFail/87 inlinable
  global time:     18.000000
  self size:       14
  global size:     14
  min size:       4
  self stack:      0
  global stack:    0
    size:8.000000, time:6.000000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_09/137 function body not available
      loop depth: 0 freq:0.50 size: 1 time: 10
    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_09/136 function body not available
      loop depth: 0 freq:0.50 size: 1 time: 10

IPA function summary for FlexCAN_Ip_GetBitrate/86 inlinable
  global time:     12.000000
  self size:       23
  global size:     23
  min size:       12
  self stack:      0
  global stack:    0
    size:12.000000, time:7.000000
    size:3.000000, time:0.500000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.500000,  nonconst if:(op1 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_GetTimeSegments/14 function not considered for inlining
      loop depth: 0 freq:0.15 size: 3 time: 12callee size:10 stack: 0
    FlexCAN_GetExtendedTimeSegments/13 function not considered for inlining
      loop depth: 0 freq:0.10 size: 3 time: 12callee size:11 stack: 0

IPA function summary for FlexCAN_Ip_SetBitrate_Privileged/85 inlinable
  global time:     14.948181
  self size:       46
  global size:     46
  min size:       28
  self stack:      0
  global stack:    0
    size:27.000000, time:9.438132
    size:3.000000, time:0.500000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.500000,  nonconst if:(op1 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_Disable/108 function body not available
      loop depth: 0 freq:0.06 size: 3 time: 12
    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_14/135 function body not available
      loop depth: 0 freq:0.06 size: 1 time: 10
    FlexCAN_SetTimeSegments/11 function not considered for inlining
      loop depth: 0 freq:0.04 size: 3 time: 12callee size: 5 stack: 0
    FlexCAN_SetExtendedTimeSegments/12 function not considered for inlining
      loop depth: 0 freq:0.03 size: 3 time: 12callee size: 5 stack: 0
    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_14/134 function body not available
      loop depth: 0 freq:0.06 size: 1 time: 10
    FlexCAN_Enable/126 function body not available
      loop depth: 0 freq:0.06 size: 3 time: 12

IPA function summary for FlexCAN_Ip_SetRxMaskType_Privileged/84 inlinable
  global time:     19.524950
  self size:       35
  global size:     35
  min size:       22
  self stack:      0
  global stack:    0
    size:20.000000, time:10.505001
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_Disable/108 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12
    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_08/133 function body not available
      loop depth: 0 freq:0.12 size: 1 time: 10
    FlexCAN_SetRxMaskType/35 function not considered for inlining
      loop depth: 0 freq:0.12 size: 3 time: 12callee size: 5 stack: 0
    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_08/132 function body not available
      loop depth: 0 freq:0.12 size: 1 time: 10
    FlexCAN_Enable/126 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12

IPA function summary for FlexCAN_Ip_SetStopMode_Privileged/83 inlinable
  global time:     15.479977
  self size:       17
  global size:     17
  min size:       12
  self stack:      0
  global stack:    0
    size:7.000000, time:5.500000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_Disable/108 function body not available
      loop depth: 0 freq:0.16 size: 3 time: 12
    FlexCAN_EnterFreezeMode/107 function body not available
      loop depth: 0 freq:0.50 size: 3 time: 12

IPA function summary for FlexCAN_Ip_SetStartMode_Privileged/82 inlinable
  global time:     24.000000
  self size:       17
  global size:     17
  min size:       10
  self stack:      0
  global stack:    0
    size:8.000000, time:6.000000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_ExitFreezeMode/129 function body not available
      loop depth: 0 freq:0.50 size: 3 time: 12
    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_07/131 function body not available
      loop depth: 0 freq:0.50 size: 1 time: 10
    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_07/130 function body not available
      loop depth: 0 freq:0.50 size: 1 time: 10

IPA function summary for FlexCAN_Ip_GetStartMode_Privileged/81 inlinable
  global time:     6.000000
  self size:       7
  global size:     7
  min size:       0
  self stack:      0
  global stack:    0
    size:4.000000, time:4.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  array index:(op0 changed)
  calls:

IPA function summary for FlexCAN_Ip_GetStopMode_Privileged/80 inlinable
  global time:     6.000000
  self size:       7
  global size:     7
  min size:       0
  self stack:      0
  global stack:    0
    size:4.000000, time:4.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  array index:(op0 changed)
  calls:

IPA function summary for FlexCAN_Ip_MainFunctionWrite/79 inlinable
  global time:     20.119945
  self size:       26
  global size:     26
  min size:       22
  self stack:      0
  global stack:    0
    size:11.000000, time:7.494994
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op1 changed) && (op0 changed)
  calls:
    FlexCAN_ClearMsgBuffIntStatusFlag/7 function not considered for inlining
      loop depth: 0 freq:0.16 size: 3 time: 12callee size: 4 stack: 0
    FlexCAN_GetMsgBuffTimestamp/128 function body not available
      loop depth: 0 freq:0.16 size: 4 time: 13
    FlexCAN_GetBuffStatusFlag/8 function not considered for inlining
      loop depth: 0 freq:0.50 size: 4 time: 13callee size: 4 stack: 0

IPA function summary for FlexCAN_Ip_MainFunctionBusOff_Privileged/78 inlinable
  global time:     14.325009
  self size:       25
  global size:     25
  min size:       14
  self stack:      0
  global stack:    0
    size:14.000000, time:9.000000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    indirect call loop depth: 0 freq:0.18 size: 7 time: 19

IPA function summary for FlexCAN_Ip_MainFunctionRead/77 inlinable
  global time:     14.572760
  self size:       42
  global size:     42
  min size:       14
  self stack:      0
  global stack:    0
    size:18.000000, time:9.331877
    size:3.000000, time:0.500000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:3.000000, time:0.834997,  nonconst if:(op1 changed)
    size:2.000000, time:0.167499,  executed if:(op1 <= 7),  nonconst if:(op1 changed) && (op1 <= 7)
    size:5.000000, time:0.209385,  executed if:(op1 == 0) && (op1 <= 7)
  array index:(op1 changed) && (op0 changed)
  calls:
    FlexCAN_IRQHandlerRxMB/46 function not considered for inlining
      loop depth: 0 freq:0.02 size: 3 time: 12callee size:44 stack:80
    FlexCAN_GetBuffStatusFlag/8 function not considered for inlining
      loop depth: 0 freq:0.17 size: 4 time: 13callee size: 4 stack: 0
    FlexCAN_IRQHandlerRxFIFO/48 function not considered for inlining
      loop depth: 0 freq:0.01 size: 3 time: 12callee size:35 stack:80 predicate: (op1 == 0) && (op1 <= 7)
       op1 is compile time invariant

IPA function summary for FlexCAN_Ip_Deinit_Privileged/76 inlinable
  global time:     17.794955
  self size:       19
  global size:     19
  min size:       14
  self stack:      0
  global stack:    0
    size:8.000000, time:6.164998
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_Disable/108 function body not available
      loop depth: 0 freq:0.16 size: 2 time: 11
    FlexCAN_SetRegDefaultVal/36 function not considered for inlining
      loop depth: 0 freq:0.16 size: 2 time: 11callee size: 9 stack: 0
    FlexCAN_EnterFreezeMode/107 function body not available
      loop depth: 0 freq:0.50 size: 3 time: 12

IPA function summary for FlexCAN_Ip_SetRxFifoGlobalMask_Privileged/75 inlinable
  global time:     15.752459
  self size:       31
  global size:     31
  min size:       12
  self stack:      0
  global stack:    0
    size:21.000000, time:10.692500
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_Disable/108 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12
    FlexCAN_Enable/126 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12

IPA function summary for FlexCAN_Ip_SetRxIndividualMask_Privileged/74 inlinable
  global time:     13.559176
  self size:       37
  global size:     37
  min size:       0
  self stack:      0
  global stack:    0
    size:9.000000, time:7.000000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:2.000000, time:0.649999,  nonconst if:(op1 changed)
    size:16.000000, time:2.616350,  executed if:(op1 <= 31)
  array index:(op1 changed) && (op0 changed)
  calls:
    FlexCAN_Disable/108 function body not available
      loop depth: 0 freq:0.05 size: 3 time: 12 predicate: (op1 <= 31)
    FlexCAN_Enable/126 function body not available
      loop depth: 0 freq:0.05 size: 3 time: 12 predicate: (op1 <= 31)

IPA function summary for FlexCAN_Ip_ExitFreezeMode_Privileged/73 inlinable
  global time:     15.000000
  self size:       7
  global size:     7
  min size:       6
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  array index:(op0 changed)
  calls:
    FlexCAN_ExitFreezeMode/129 function body not available
      loop depth: 0 freq:1.00 size: 3 time: 12

IPA function summary for FlexCAN_Ip_EnterFreezeMode_Privileged/72 inlinable
  global time:     15.000000
  self size:       7
  global size:     7
  min size:       6
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  array index:(op0 changed)
  calls:
    FlexCAN_EnterFreezeMode/107 function body not available
      loop depth: 0 freq:1.00 size: 3 time: 12

IPA function summary for FlexCAN_Ip_SetRxMbGlobalMask_Privileged/71 inlinable
  global time:     16.252459
  self size:       31
  global size:     31
  min size:       12
  self stack:      0
  global stack:    0
    size:21.000000, time:11.192500
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_Disable/108 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12
    FlexCAN_Enable/126 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12

IPA function summary for FlexCAN_Ip_SendBlocking/70 inlinable
  global time:     58.303207
  self size:       95
  global size:     95
  min size:       94
  self stack:      4
  global stack:    4
    size:42.000000, time:14.172411
    size:3.000000, time:0.500000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op5 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.500000,  nonconst if:(op2 changed)
  array index:(op1 changed) && (op0 changed)
  calls:
    FlexCAN_ClearMsgBuffIntStatusFlag/7 function not considered for inlining
      loop depth: 0 freq:0.08 size: 3 time: 12callee size: 4 stack: 0
    FlexCAN_GetBuffStatusFlag/8 function not considered for inlining
      loop depth: 1 freq:0.09 size: 4 time: 13callee size: 4 stack: 0
       op1 change 95.340000% of time
    OsIf_GetElapsed/122 function body not available
      loop depth: 1 freq:0.08 size: 4 time: 13
       op0 is compile time invariant
       op1 is compile time invariant
    OsIf_GetCounter/121 function body not available
      loop depth: 0 freq:0.01 size: 3 time: 12
       op0 is compile time invariant
    OsIf_MicrosToTicks/120 function body not available
      loop depth: 0 freq:0.01 size: 4 time: 13
       op0 is compile time invariant
       op1 is compile time invariant
    FlexCAN_GetMsgBuffRegion/117 function body not available
      loop depth: 0 freq:0.01 size: 4 time: 13
    FlexCAN_ClearMsgBuffIntStatusFlag/7 function not considered for inlining
      loop depth: 0 freq:0.01 size: 3 time: 12callee size: 4 stack: 0
    FlexCAN_GetBuffStatusFlag/8 function not considered for inlining
      loop depth: 1 freq:0.77 size: 4 time: 13callee size: 4 stack: 0
    OsIf_GetElapsed/122 function body not available
      loop depth: 1 freq:0.73 size: 4 time: 13
       op0 is compile time invariant
       op1 is compile time invariant
    OsIf_GetCounter/121 function body not available
      loop depth: 0 freq:0.08 size: 3 time: 12
       op0 is compile time invariant
    FlexCAN_StartSendData/44 function not considered for inlining
      loop depth: 0 freq:0.25 size: 7 time: 16callee size:35 stack:16
    OsIf_MicrosToTicks/120 function body not available
      loop depth: 0 freq:1.00 size: 4 time: 13
       op1 is compile time invariant

IPA function summary for FlexCAN_BusOff_IRQHandler/69 inlinable
  global time:     20.069901
  self size:       72
  global size:     72
  min size:       42
  self stack:      0
  global stack:    0
    size:47.000000, time:14.578734
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    indirect call loop depth: 0 freq:0.06 size: 7 time: 19
    indirect call loop depth: 0 freq:0.06 size: 7 time: 19
    indirect call loop depth: 0 freq:0.06 size: 7 time: 19

IPA function summary for FlexCAN_Error_IRQHandler/68 inlinable
  global time:     16.336897
  self size:       52
  global size:     52
  min size:       28
  self stack:      0
  global stack:    0
    size:34.000000, time:12.218875
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    indirect call loop depth: 0 freq:0.05 size: 7 time: 19
    indirect call loop depth: 0 freq:0.06 size: 7 time: 19

IPA function summary for FlexCAN_Ip_GetControllerRxErrorCounter/67 inlinable
  global time:     8.000000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:7.000000, time:6.000000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:

IPA function summary for FlexCAN_Ip_GetControllerTxErrorCounter/66 inlinable
  global time:     7.500000
  self size:       10
  global size:     10
  min size:       0
  self stack:      0
  global stack:    0
    size:6.000000, time:5.500000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:

IPA function summary for FlexCAN_Ip_GetErrorStatus/65 inlinable
  global time:     7.500000
  self size:       10
  global size:     10
  min size:       0
  self stack:      0
  global stack:    0
    size:6.000000, time:5.500000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:

IPA function summary for FlexCAN_Ip_ClearErrorStatus/64 inlinable
  global time:     7.500000
  self size:       10
  global size:     10
  min size:       0
  self stack:      0
  global stack:    0
    size:6.000000, time:5.500000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:

IPA function summary for FlexCAN_IRQHandler/63 inlinable
  global time:     50.995409
  self size:       74
  global size:     74
  min size:       62
  self stack:      0
  global stack:    0
    size:38.000000, time:18.965099
    size:3.000000, time:0.500000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.500000,  nonconst if:(op2 changed)
  loop iterations:(op2 changed || op1 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_ClearMsgBuffIntStatusFlag/7 function not considered for inlining
      loop depth: 1 freq:0.94 size: 3 time: 12callee size: 4 stack: 0
    FlexCAN_ClearMsgBuffIntStatusFlag/7 function not considered for inlining
      loop depth: 0 freq:0.01 size: 3 time: 12callee size: 4 stack: 0
    FlexCAN_GetMsgBuffIntStatusFlag/30 function not considered for inlining
      loop depth: 0 freq:0.09 size: 4 time: 13callee size: 4 stack: 0
    FlexCAN_IRQHandlerTxMB/47 function not considered for inlining
      loop depth: 0 freq:0.02 size: 3 time: 12callee size:36 stack:80
    FlexCAN_IRQHandlerRxMB/46 function not considered for inlining
      loop depth: 0 freq:0.02 size: 3 time: 12callee size:44 stack:80
    FlexCAN_IRQHandlerRxFIFO/48 function not considered for inlining
      loop depth: 0 freq:0.01 size: 3 time: 12callee size:35 stack:80
    FlexCAN_ProcessSpuriousInterruptMB/49 function not considered for inlining
      loop depth: 0 freq:0.04 size: 4 time: 13callee size:18 stack: 0
    FlexCAN_GetMsgBuffIntStatusFlag/30 function not considered for inlining
      loop depth: 1 freq:1.12 size: 4 time: 13callee size: 4 stack: 0
       op0 change 89.610000% of time
    FlexCAN_GetMsgBuffIntStatusFlag/30 function not considered for inlining
      loop depth: 0 freq:0.13 size: 4 time: 13callee size: 4 stack: 0

IPA function summary for FlexCAN_CompleteRxMessageFifoData/62 inlinable
  global time:     18.419906
  self size:       36
  global size:     36
  min size:       36
  self stack:      0
  global stack:    0
    size:14.000000, time:8.994994
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_SetMsgBuffIntCmd/114 function body not available
      loop depth: 0 freq:0.16 size: 6 time: 15
       op2 is compile time invariant
       op3 is compile time invariant
    FlexCAN_SetMsgBuffIntCmd/114 function body not available
      loop depth: 0 freq:0.16 size: 6 time: 15
       op2 is compile time invariant
       op3 is compile time invariant
    FlexCAN_SetMsgBuffIntCmd/114 function body not available
      loop depth: 0 freq:0.16 size: 6 time: 15
       op2 is compile time invariant
       op3 is compile time invariant

IPA function summary for FlexCAN_Ip_GetTransferStatus/61 inlinable
  global time:     10.375007
  self size:       20
  global size:     20
  min size:       0
  self stack:      0
  global stack:    0
    size:9.000000, time:7.000000
    size:3.000000, time:0.500000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:4.000000, time:1.500000,  nonconst if:(op1 changed)
    size:3.000000, time:0.375007,  executed if:(op1 <= 31)
  array index:(op1 changed) && (op0 changed)
  calls:

IPA function summary for FlexCAN_Ip_ConfigRemoteResponseMb/60 inlinable
  global time:     16.657706
  self size:       75
  global size:     75
  min size:       60
  self stack:      16
  global stack:    16
    size:37.000000, time:10.933452
    size:5.000000, time:0.184719,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.500000,  nonconst if:(op2 changed)
    size:0.500000, time:0.062501,  executed if:(not inlined),  nonconst if:(op2[ref offset: 32] changed) && (not inlined)
    size:0.500000, time:0.062501,  nonconst if:(op2[ref offset: 32] changed)
  array index:(op0 changed)
  calls:
    FlexCAN_SetMsgBuffIntCmd/114 function body not available
      loop depth: 0 freq:0.01 size: 7 time: 16
       op3 is compile time invariant
    FlexCAN_SetTxMsgBuff/118 function body not available
      loop depth: 0 freq:0.03 size: 6 time: 15
       op1 is compile time invariant
    FlexCAN_GetMsgBuffRegion/117 function body not available
      loop depth: 0 freq:0.03 size: 4 time: 13
    FlexCAN_ClearMsgBuffIntStatusFlag/7 function not considered for inlining
      loop depth: 0 freq:0.03 size: 3 time: 12callee size: 4 stack: 0
    FlexCAN_IsMbOutOfRange/116 function body not available
      loop depth: 0 freq:0.06 size: 6 time: 15
    FlexCAN_GetMbPayloadSize/115 function body not available
      loop depth: 0 freq:0.13 size: 4 time: 13

IPA function summary for FlexCAN_Ip_ConfigRxFifo_Privileged/59 inlinable
  global time:     17.173706
  self size:       34
  global size:     34
  min size:       20
  self stack:      0
  global stack:    0
    size:20.000000, time:10.505001
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_Disable/108 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12
    FlexCAN_SetRxFifoFilter/127 function body not available
      loop depth: 0 freq:0.12 size: 4 time: 13
    FlexCAN_Enable/126 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12

IPA function summary for FlexCAN_Ip_RxFifoBlocking/58 inlinable
  global time:     15.644975
  self size:       18
  global size:     18
  min size:       16
  self stack:      0
  global stack:    0
    size:6.000000, time:5.000000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  calls:
    FlexCAN_ProccessLegacyRxFIFO/42 function not considered for inlining
      loop depth: 0 freq:0.16 size: 4 time: 13callee size:37 stack: 4
    FlexCAN_StartRxMessageFifoData/45 function not considered for inlining
      loop depth: 0 freq:0.50 size: 4 time: 13callee size: 6 stack: 0

IPA function summary for FlexCAN_Ip_RxFifo/57 inlinable
  global time:     12.500000
  self size:       12
  global size:     12
  min size:       8
  self stack:      0
  global stack:    0
    size:4.000000, time:4.000000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  calls:
    FlexCAN_StartRxMessageFifoData/45 function not considered for inlining
      loop depth: 0 freq:0.50 size: 4 time: 13callee size: 6 stack: 0

IPA function summary for FlexCAN_Ip_ReceiveBlocking/56 inlinable
  global time:     80.158218
  self size:       80
  global size:     80
  min size:       34
  self stack:      4
  global stack:    4
    size:28.000000, time:20.554627
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op4 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:6.000000, time:3.755164,  nonconst if:(op3 changed)
    size:2.000000, time:0.138600,  executed if:(op3 == 0)
    size:2.000000, time:0.962002,  executed if:(op3 != 0)
  array index:(op1 changed) && (op0 changed)
  calls:
    FlexCAN_SetMsgBuffIntCmd/114 function body not available
      loop depth: 0 freq:0.06 size: 6 time: 15 predicate: (op3 == 0)
       op3 is compile time invariant
    OsIf_GetElapsed/122 function body not available
      loop depth: 1 freq:1.46 size: 4 time: 13
       op0 is compile time invariant
       op1 is compile time invariant
    FlexCAN_IRQHandlerRxMB/46 function not considered for inlining
      loop depth: 1 freq:0.16 size: 3 time: 12callee size:44 stack:80 predicate: (op3 != 0)
    FlexCAN_GetBuffStatusFlag/8 function not considered for inlining
      loop depth: 1 freq:0.48 size: 4 time: 13callee size: 4 stack: 0 predicate: (op3 != 0)
    OsIf_GetCounter/121 function body not available
      loop depth: 0 freq:0.16 size: 3 time: 12
       op0 is compile time invariant
    FlexCAN_SetMsgBuffIntCmd/114 function body not available
      loop depth: 0 freq:0.08 size: 7 time: 16 predicate: (op3 == 0)
       op3 is compile time invariant
    FlexCAN_StartRxMessageBufferData/43 function not considered for inlining
      loop depth: 0 freq:0.50 size: 6 time: 15callee size:13 stack: 0
    OsIf_MicrosToTicks/120 function body not available
      loop depth: 0 freq:1.00 size: 4 time: 13
       op1 is compile time invariant

IPA function summary for FlexCAN_Ip_Receive/55 inlinable
  global time:     18.402523
  self size:       28
  global size:     28
  min size:       12
  self stack:      0
  global stack:    0
    size:8.000000, time:7.000000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:2.000000, time:0.500000,  nonconst if:(op3 changed)
    size:1.000000, time:0.082501,  executed if:(op3 == 0)
  array index:(op0 changed)
  calls:
    FlexCAN_SetMsgBuffIntCmd/114 function body not available
      loop depth: 0 freq:0.08 size: 7 time: 16 predicate: (op3 == 0)
       op3 is compile time invariant
    FlexCAN_StartRxMessageBufferData/43 function not considered for inlining
      loop depth: 0 freq:0.50 size: 6 time: 15callee size:13 stack: 0

IPA function summary for FlexCAN_Ip_ConfigRxMb/54 inlinable
  global time:     22.273693
  self size:       52
  global size:     52
  min size:       48
  self stack:      16
  global stack:    16
    size:21.500000, time:9.895678
    size:4.500000, time:0.679136,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.500000,  nonconst if:(op2 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_SetRxMsgBuff/119 function body not available
      loop depth: 0 freq:0.12 size: 5 time: 14
       op2 is compile time invariant
    FlexCAN_SetRxMsgBuff/119 function body not available
      loop depth: 0 freq:0.12 size: 5 time: 14
       op2 is compile time invariant
    FlexCAN_SetRxMsgBuff/119 function body not available
      loop depth: 0 freq:0.12 size: 5 time: 14
       op2 is compile time invariant
    FlexCAN_ClearMsgBuffIntStatusFlag/7 function not considered for inlining
      loop depth: 0 freq:0.12 size: 3 time: 12callee size: 4 stack: 0
    FlexCAN_IsMbOutOfRange/116 function body not available
      loop depth: 0 freq:0.25 size: 6 time: 15

IPA function summary for FlexCAN_Ip_Send/53 inlinable
  global time:     12.840162
  self size:       39
  global size:     39
  min size:       28
  self stack:      0
  global stack:    0
    size:19.500000, time:9.281735
    size:3.500000, time:0.520624,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.500000,  nonconst if:(op2 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_SetMsgBuffIntCmd/114 function body not available
      loop depth: 0 freq:0.01 size: 7 time: 16
       op3 is compile time invariant
    FlexCAN_StartSendData/44 function not considered for inlining
      loop depth: 0 freq:0.08 size: 7 time: 16callee size:35 stack:16

IPA function summary for FlexCAN_Ip_Init_Privileged/52 inlinable
  global time:     32.447208
  self size:       73
  global size:     73
  min size:       38
  self stack:      0
  global stack:    0
    size:27.000000, time:18.080415
    size:13.000000, time:4.830425,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.500000,  nonconst if:(op2 changed)
    size:0.500000, time:0.125000,  executed if:(not inlined),  nonconst if:(op2[ref offset: 192] changed) && (not inlined)
    size:2.500000, time:0.625000,  nonconst if:(op2[ref offset: 192] changed)
    size:0.500000, time:0.062501,  executed if:(op2[ref offset: 192] != 0) && (not inlined)
    size:5.500000, time:0.687513,  executed if:(op2[ref offset: 192] != 0)
  array index:(op0 changed)
  calls:
    FlexCAN_SetOperationMode/106 function body not available
      loop depth: 0 freq:0.06 size: 3 time: 12
    FlexCAN_SetTimeSegments/11 function not considered for inlining
      loop depth: 0 freq:0.03 size: 3 time: 12callee size: 5 stack: 0
    FlexCAN_SetFDTimeSegments/10 function not considered for inlining
      loop depth: 0 freq:0.03 size: 3 time: 12callee size: 5 stack: 0
    FlexCAN_SetExtendedTimeSegments/12 function not considered for inlining
      loop depth: 0 freq:0.03 size: 3 time: 12callee size: 5 stack: 0
    FlexCAN_EnableExtCbt/17 function not considered for inlining
      loop depth: 0 freq:0.06 size: 3 time: 12callee size: 4 stack: 0
    FlexCAN_InitController/41 function not considered for inlining
      loop depth: 0 freq:0.19 size: 4 time: 13callee size:25 stack: 0
    FlexCAN_IsFDAvailable/105 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12 predicate: (op2[ref offset: 192] != 0)

IPA function summary for FlexCAN_AbortRxTransfer/51 inlinable
  global time:     45.966300
  self size:       46
  global size:     46
  min size:       28
  self stack:      0
  global stack:    0
    size:21.000000, time:12.105500
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:1.340000,  nonconst if:(op1 changed)
    size:1.000000, time:0.221100,  executed if:(op1 == 0)
  array index:(op1 changed) && (op0 changed)
  calls:
    FlexCAN_ClearMsgBuffIntStatusFlag/7 function not considered for inlining
      loop depth: 0 freq:1.00 size: 3 time: 12callee size: 4 stack: 0
       op0 change 99.990000% of time
       op1 change 99.990000% of time
    FlexCAN_GetMsgBuffRegion/117 function body not available
      loop depth: 0 freq:0.33 size: 4 time: 13
    FLEXCAN_ClearMsgBuffIntCmd/147 function body not available
      loop depth: 0 freq:0.22 size: 5 time: 14 predicate: (op1 == 0)
       op2 is compile time invariant
    FlexCAN_GetMsgBuffRegion/117 function body not available
      loop depth: 0 freq:0.22 size: 4 time: 13
    RxFifoOcuppiedLastMsgBuff/21 function not considered for inlining
      loop depth: 0 freq:0.67 size: 3 time: 12callee size: 3 stack: 0

IPA function summary for FlexCAN_AbortTxTransfer/50 inlinable
  global time:     349.181112
  self size:       48
  global size:     48
  min size:       44
  self stack:      4
  global stack:    4
    size:23.000000, time:60.817476
    size:3.000000, time:2.000000,  executed if:(not inlined)
  array index:(op1 changed) && (op0 changed)
  calls:
    FlexCAN_ClearMsgBuffIntStatusFlag/7 function not considered for inlining
      loop depth: 0 freq:1.00 size: 3 time: 12callee size: 4 stack: 0
    FlexCAN_GetBuffStatusFlag/8 function not considered for inlining
      loop depth: 1 freq:9.35 size: 4 time: 13callee size: 4 stack: 0
       op0 change 10.690000% of time
       op1 change 10.690000% of time
    OsIf_GetElapsed/122 function body not available
      loop depth: 1 freq:8.83 size: 4 time: 13
       op0 is compile time invariant
       op1 is compile time invariant
    OsIf_GetCounter/121 function body not available
      loop depth: 0 freq:1.00 size: 3 time: 12
       op0 is compile time invariant
    OsIf_MicrosToTicks/120 function body not available
      loop depth: 0 freq:1.00 size: 4 time: 13
       op0 is compile time invariant
       op1 is compile time invariant
    FlexCAN_GetMsgBuffRegion/117 function body not available
      loop depth: 0 freq:1.00 size: 4 time: 13

IPA function summary for FlexCAN_ProcessSpuriousInterruptMB/49 inlinable
  global time:     207.939185
  self size:       36
  global size:     36
  min size:       22
  self stack:      0
  global stack:    0
    size:22.000000, time:60.760769
    size:3.000000, time:2.000000,  executed if:(not inlined)
  array index:(op0 changed)
  calls:
    FlexCAN_ClearMsgBuffIntStatusFlag/7 function not considered for inlining
      loop depth: 1 freq:0.44 size: 3 time: 12callee size: 4 stack: 0
    FlexCAN_GetBuffStatusImask/9 function not considered for inlining
      loop depth: 1 freq:2.67 size: 4 time: 13callee size: 4 stack: 0
       op0 change 37.450000% of time
    FlexCAN_GetBuffStatusFlag/8 function not considered for inlining
      loop depth: 1 freq:8.09 size: 4 time: 13callee size: 4 stack: 0
       op0 change 12.350000% of time

IPA function summary for FlexCAN_IRQHandlerRxFIFO/48 inlinable
  global time:     28.692556
  self size:       70
  global size:     70
  min size:       0
  self stack:      80
  global stack:    80
    size:6.000000, time:5.300000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:8.000000, time:4.000000,  nonconst if:(op1 changed)
    size:3.000000, time:0.750000,  executed if:(op1 == 7)
    size:3.000000, time:0.750000,  executed if:(op1 == 6)
    size:12.000000, time:1.171498,  executed if:(op1 == 5)
  array index:(op0 changed)
  calls:
    FlexCAN_ClearMsgBuffIntStatusFlag/7 function not considered for inlining
      loop depth: 0 freq:0.25 size: 3 time: 12callee size: 4 stack: 0 predicate: (op1 == 7)
    FlexCAN_ClearMsgBuffIntStatusFlag/7 function not considered for inlining
      loop depth: 0 freq:0.25 size: 3 time: 12callee size: 4 stack: 0 predicate: (op1 == 6)
    FlexCAN_CompleteRxMessageFifoData/62 function not considered for inlining
      loop depth: 0 freq:0.02 size: 2 time: 11callee size:18 stack: 0 predicate: (op1 == 5)
    FlexCAN_ClearMsgBuffIntStatusFlag/7 function not considered for inlining
      loop depth: 0 freq:0.05 size: 3 time: 12callee size: 4 stack: 0 predicate: (op1 == 5)
    FlexCAN_ReadRxFifo/125 function body not available
      loop depth: 0 freq:0.05 size: 3 time: 12 predicate: (op1 == 5)
    indirect call loop depth: 0 freq:0.18 size: 7 time: 19predicate: (op1 == 7)
    indirect call loop depth: 0 freq:0.18 size: 7 time: 19predicate: (op1 == 6)
    indirect call loop depth: 0 freq:0.04 size: 7 time: 19predicate: (op1 == 5)

IPA function summary for FlexCAN_IRQHandlerTxMB/47 inlinable
  global time:     68.946300
  self size:       73
  global size:     73
  min size:       72
  self stack:      80
  global stack:    80
    size:34.000000, time:22.890275
    size:3.000000, time:2.000000,  executed if:(not inlined)
  array index:(op0 changed)
  calls:
    FlexCAN_SetMsgBuffIntCmd/114 function body not available
      loop depth: 0 freq:0.14 size: 6 time: 15
       op3 is compile time invariant
    FlexCAN_SetMsgBuffIntCmd/114 function body not available
      loop depth: 0 freq:0.17 size: 6 time: 15
       op3 is compile time invariant
    FlexCAN_ClearMsgBuffIntStatusFlag/7 function not considered for inlining
      loop depth: 0 freq:0.50 size: 3 time: 12callee size: 4 stack: 0
    FlexCAN_GetMsgBuffTimestamp/128 function body not available
      loop depth: 0 freq:0.50 size: 4 time: 13
    FlexCAN_ClearMsgBuffIntStatusFlag/7 function not considered for inlining
      loop depth: 0 freq:0.10 size: 3 time: 12callee size: 4 stack: 0
    FlexCAN_GetMsgBuff/124 function body not available
      loop depth: 0 freq:0.50 size: 4 time: 13
       op2 is compile time invariant
    FlexCAN_LockRxMsgBuff/123 function body not available
      loop depth: 0 freq:0.50 size: 3 time: 12
    indirect call loop depth: 0 freq:0.70 size: 7 time: 19

IPA function summary for FlexCAN_IRQHandlerRxMB/46 inlinable
  global time:     93.251900
  self size:       88
  global size:     88
  min size:       66
  self stack:      80
  global stack:    80
    size:52.000000, time:34.265275
    size:3.000000, time:2.000000,  executed if:(not inlined)
  array index:(op0 changed)
  calls:
    FlexCAN_SetMsgBuffIntCmd/114 function body not available
      loop depth: 0 freq:0.14 size: 6 time: 15
       op3 is compile time invariant
    FlexCAN_SetMsgBuffIntCmd/114 function body not available
      loop depth: 0 freq:0.17 size: 6 time: 15
       op3 is compile time invariant
    FlexCAN_GetMsgBuffRegion/117 function body not available
      loop depth: 0 freq:0.17 size: 4 time: 13
    FlexCAN_ClearMsgBuffIntStatusFlag/7 function not considered for inlining
      loop depth: 0 freq:1.00 size: 3 time: 12callee size: 4 stack: 0
    FlexCAN_GetMsgBuff/124 function body not available
      loop depth: 0 freq:1.00 size: 4 time: 13
    FlexCAN_LockRxMsgBuff/123 function body not available
      loop depth: 0 freq:1.00 size: 3 time: 12
    indirect call loop depth: 0 freq:0.70 size: 7 time: 19

IPA function summary for FlexCAN_StartRxMessageFifoData/45 inlinable
  global time:     12.500000
  self size:       12
  global size:     12
  min size:       8
  self stack:      0
  global stack:    0
    size:4.000000, time:4.000000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  calls:
    FlexCAN_StartRxMessageFifoData.part.0/161 function not considered for inlining
      loop depth: 0 freq:0.50 size: 4 time: 13callee size:20 stack: 0

IPA function summary for FlexCAN_StartSendData/44 inlinable
  global time:     19.408763
  self size:       71
  global size:     71
  min size:       46
  self stack:      16
  global stack:    16
    size:38.500000, time:10.595361
    size:6.500000, time:0.385850,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.500000,  nonconst if:(op2 changed)
    size:0.500000, time:0.125000,  executed if:(not inlined),  nonconst if:(op2[ref offset: 32] changed) && (not inlined)
    size:0.500000, time:0.125000,  nonconst if:(op2[ref offset: 32] changed)
  array index:(op1 changed) && (op0 changed)
  calls:
    FlexCAN_SetTxMsgBuff/118 function body not available
      loop depth: 0 freq:0.04 size: 6 time: 15
       op1 is compile time invariant
       op4 is compile time invariant
    FlexCAN_GetMsgBuffRegion/117 function body not available
      loop depth: 0 freq:0.04 size: 4 time: 13
    FlexCAN_ClearMsgBuffIntStatusFlag/7 function not considered for inlining
      loop depth: 0 freq:0.04 size: 3 time: 12callee size: 4 stack: 0
    FlexCAN_IsMbOutOfRange/116 function body not available
      loop depth: 0 freq:0.13 size: 6 time: 15
    FlexCAN_GetMbPayloadSize/115 function body not available
      loop depth: 0 freq:0.25 size: 4 time: 13

IPA function summary for FlexCAN_StartRxMessageBufferData/43 inlinable
  global time:     19.108755
  self size:       26
  global size:     26
  min size:       12
  self stack:      0
  global stack:    0
    size:16.000000, time:9.608755
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op1 changed) && (op0 changed)
  calls:
    FlexCAN_IsMbOutOfRange/116 function body not available
      loop depth: 0 freq:0.50 size: 6 time: 15

IPA function summary for FlexCAN_ProccessLegacyRxFIFO/42 inlinable
  global time:     338.159771
  self size:       74
  global size:     74
  min size:       72
  self stack:      4
  global stack:    4
    size:34.000000, time:115.926893
    size:3.000000, time:1.999800,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op1 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_SetMsgBuffIntCmd/114 function body not available
      loop depth: 0 freq:0.17 size: 6 time: 15
       op2 is compile time invariant
       op3 is compile time invariant
    FlexCAN_SetMsgBuffIntCmd/114 function body not available
      loop depth: 0 freq:0.17 size: 6 time: 15
       op2 is compile time invariant
       op3 is compile time invariant
    FlexCAN_SetMsgBuffIntCmd/114 function body not available
      loop depth: 0 freq:0.17 size: 6 time: 15
       op2 is compile time invariant
       op3 is compile time invariant
    OsIf_GetElapsed/122 function body not available
      loop depth: 1 freq:8.83 size: 4 time: 13
       op0 is compile time invariant
       op1 is compile time invariant
    FlexCAN_IRQHandlerRxFIFO/48 function not considered for inlining
      loop depth: 2 freq:1.40 size: 3 time: 12callee size:35 stack:80
       op0 change 71.460000% of time
    FlexCAN_GetBuffStatusFlag/8 function not considered for inlining
      loop depth: 2 freq:4.24 size: 4 time: 13callee size: 4 stack: 0
       op0 change 23.580000% of time
    OsIf_GetCounter/121 function body not available
      loop depth: 0 freq:1.00 size: 3 time: 12
       op0 is compile time invariant
    OsIf_MicrosToTicks/120 function body not available
      loop depth: 0 freq:1.00 size: 4 time: 13
       op1 is compile time invariant

IPA function summary for FlexCAN_InitController/41 inlinable
  global time:     61.526275
  self size:       51
  global size:     51
  min size:       60
  self stack:      0
  global stack:    0
    size:12.000000, time:6.530075
    size:6.000000, time:3.350075,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 0] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op0[ref offset: 0] changed)
  calls:
    FlexCAN_InitCtroll/40 function not considered for inlining
      loop depth: 0 freq:0.35 size: 4 time: 13callee size:17 stack: 0
    FlexCAN_ConfigCtrlOptions/110 function body not available
      loop depth: 0 freq:0.35 size: 3 time: 12
    FlexCAN_SetFDEnabled/4 function not considered for inlining
      loop depth: 0 freq:0.12 size: 4 time: 13callee size: 9 stack: 0
    FlexCAN_IsFDAvailable/105 function body not available
      loop depth: 0 freq:0.35 size: 3 time: 12
    FlexCAN_Disable/108 function body not available
      loop depth: 0 freq:0.35 size: 2 time: 11
    FlexCAN_EnterFreezeMode/107 function body not available
      loop depth: 0 freq:0.35 size: 2 time: 11
    FlexCAN_Init/109 function body not available
      loop depth: 0 freq:0.71 size: 3 time: 12
    FlexCAN_SetClkSrc/29 function not considered for inlining
      loop depth: 0 freq:0.71 size: 3 time: 12callee size: 4 stack: 0
    FlexCAN_Disable/108 function body not available
      loop depth: 0 freq:0.19 size: 3 time: 12
    FlexCAN_EnterFreezeMode/107 function body not available
      loop depth: 0 freq:0.59 size: 3 time: 12

IPA function summary for FlexCAN_InitCtroll/40 inlinable
  global time:     51.270000
  self size:       34
  global size:     34
  min size:       38
  self stack:      0
  global stack:    0
    size:4.500000, time:3.250000
    size:3.500000, time:2.250000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op1[ref offset: 96] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op1[ref offset: 96] changed)
    size:0.500000, time:0.330000,  executed if:(op1[ref offset: 96] != 2) && (not inlined),  nonconst if:(op0[ref offset: 0] changed) && (op1[ref offset: 96] != 2) && (not inlined)
    size:2.500000, time:1.650000,  executed if:(op1[ref offset: 96] != 2),  nonconst if:(op0[ref offset: 0] changed) && (op1[ref offset: 96] != 2)
    size:0.500000, time:0.330000,  executed if:(op1[ref offset: 96] != 2) && (not inlined)
    size:0.500000, time:0.330000,  executed if:(op1[ref offset: 96] != 2)
  calls:
    FlexCAN_Disable/108 function body not available
      loop depth: 0 freq:0.17 size: 2 time: 11
    FlexCAN_EnterFreezeMode/107 function body not available
      loop depth: 0 freq:0.17 size: 2 time: 11
    FlexCAN_SetMaxMsgBuffNum/112 function body not available
      loop depth: 0 freq:0.50 size: 4 time: 13
    FlexCAN_SetPayloadSize/111 function body not available
      loop depth: 0 freq:0.50 size: 3 time: 12
    FlexCAN_Disable/108 function body not available
      loop depth: 0 freq:0.50 size: 2 time: 11
    FlexCAN_EnterFreezeMode/107 function body not available
      loop depth: 0 freq:0.50 size: 2 time: 11
    FlexCAN_InitRxFifo/39 function not considered for inlining
      loop depth: 0 freq:1.00 size: 4 time: 13callee size: 5 stack: 0

IPA function summary for FlexCAN_InitRxFifo/39 inlinable
  global time:     9.620000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op1[ref offset: 64] changed) && (not inlined)
    size:2.500000, time:2.500000,  nonconst if:(op1[ref offset: 64] changed)
    size:0.500000, time:0.165000,  executed if:(op1[ref offset: 64] != 0) && (not inlined),  nonconst if:(op1[ref offset: 32] changed) && (op1[ref offset: 64] != 0) && (not inlined)
    size:0.500000, time:0.165000,  executed if:(op1[ref offset: 64] != 0),  nonconst if:(op1[ref offset: 32] changed) && (op1[ref offset: 64] != 0)
  calls:
    FlexCAN_EnableRxFifo/113 function body not available
      loop depth: 0 freq:0.33 size: 4 time: 13 predicate: (op1[ref offset: 64] != 0)

IPA function summary for FlexCAN_SetRegDefaultVal/36 inlinable
  global time:     26.000000
  self size:       19
  global size:     19
  min size:       6
  self stack:      0
  global stack:    0
    size:7.500000, time:7.000000
    size:8.500000, time:7.000000,  executed if:(not inlined)
  calls:
    FlexCAN_IsFDAvailable/105 function body not available
      loop depth: 0 freq:1.00 size: 3 time: 12

IPA function summary for FlexCAN_SetRxMaskType/35 inlinable
  global time:     7.000000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op1 changed)
    size:0.500000, time:0.250000,  executed if:(op1 != 0) && (not inlined),  nonconst if:(op0[ref offset: 0] changed) && (op1 != 0) && (not inlined)
    size:1.500000, time:0.750000,  executed if:(op1 != 0),  nonconst if:(op0[ref offset: 0] changed) && (op1 != 0)
    size:0.500000, time:0.250000,  executed if:(op1 != 0) && (not inlined)
    size:0.500000, time:0.250000,  executed if:(op1 != 0)
    size:0.500000, time:0.250000,  executed if:(op1 == 0) && (not inlined),  nonconst if:(op0[ref offset: 0] changed) && (op1 == 0) && (not inlined)
    size:1.500000, time:0.750000,  executed if:(op1 == 0),  nonconst if:(op0[ref offset: 0] changed) && (op1 == 0)
    size:0.500000, time:0.250000,  executed if:(op1 == 0) && (not inlined)
    size:0.500000, time:0.250000,  executed if:(op1 == 0)
  calls:

IPA function summary for FlexCAN_SetTxArbitrationStartDelay/34 inlinable
  global time:     8.000000
  self size:       9
  global size:     9
  min size:       0
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 416] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 416] changed)
    size:2.000000, time:2.000000,  nonconst if:(op1 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 416] changed || op1 changed)
  calls:

IPA function summary for FlexCAN_GetMsgBuffIntStatusFlag/30 inlinable
  global time:     10.500000
  self size:       9
  global size:     9
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op1 changed)
  calls:
    FlexCAN_GetMsgBuffIntStatusFlag.part.0/158 function not considered for inlining
      loop depth: 0 freq:0.50 size: 4 time: 13callee size: 4 stack: 0 predicate: (op1 <= 31)

IPA function summary for FlexCAN_SetClkSrc/29 inlinable
  global time:     8.000000
  self size:       9
  global size:     9
  min size:       0
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 32] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 32] changed)
    size:2.000000, time:2.000000,  nonconst if:(op1 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 32] changed || op1 changed)
  calls:

IPA function summary for RxFifoOcuppiedLastMsgBuff/21 inlinable
  global time:     6.000000
  self size:       7
  global size:     7
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:4.000000, time:4.000000,  nonconst if:(op0 changed)
  calls:

IPA function summary for FlexCAN_EnableExtCbt/17 inlinable
  global time:     8.000000
  self size:       9
  global size:     9
  min size:       0
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 640] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 640] changed)
    size:2.000000, time:2.000000,  nonconst if:(op1 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 640] changed || op1 changed)
  calls:

IPA function summary for FlexCAN_GetFDTimeSegments/15 inlinable
  global time:     21.000000
  self size:       22
  global size:     22
  min size:       0
  self stack:      0
  global stack:    0
    size:2.500000, time:2.500000
    size:5.500000, time:4.500000,  executed if:(not inlined)
    size:2.500000, time:2.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 24608] changed) && (not inlined)
    size:11.500000, time:11.500000,  nonconst if:(op0[ref offset: 24608] changed)
  calls:

IPA function summary for FlexCAN_GetTimeSegments/14 inlinable
  global time:     20.000000
  self size:       21
  global size:     21
  min size:       0
  self stack:      0
  global stack:    0
    size:2.500000, time:2.500000
    size:5.500000, time:4.500000,  executed if:(not inlined)
    size:2.500000, time:2.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 32] changed) && (not inlined)
    size:10.500000, time:10.500000,  nonconst if:(op0[ref offset: 32] changed)
  calls:

IPA function summary for FlexCAN_GetExtendedTimeSegments/13 inlinable
  global time:     21.000000
  self size:       22
  global size:     22
  min size:       0
  self stack:      0
  global stack:    0
    size:2.500000, time:2.500000
    size:5.500000, time:4.500000,  executed if:(not inlined)
    size:2.500000, time:2.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 640] changed) && (not inlined)
    size:11.500000, time:11.500000,  nonconst if:(op0[ref offset: 640] changed)
  calls:

IPA function summary for FlexCAN_SetExtendedTimeSegments/12 inlinable
  global time:     12.000000
  self size:       11
  global size:     11
  min size:       6
  self stack:      0
  global stack:    0
    size:4.000000, time:4.000000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op1 changed)
  calls:
    FlexCAN_SetExtendedTimeSegments.part.0/157 function not considered for inlining
      loop depth: 0 freq:0.50 size: 3 time: 12callee size:13 stack: 0

IPA function summary for FlexCAN_SetTimeSegments/11 inlinable
  global time:     12.000000
  self size:       11
  global size:     11
  min size:       6
  self stack:      0
  global stack:    0
    size:4.000000, time:4.000000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op1 changed)
  calls:
    FlexCAN_SetTimeSegments.part.0/155 function not considered for inlining
      loop depth: 0 freq:0.50 size: 3 time: 12callee size:13 stack: 0

IPA function summary for FlexCAN_SetFDTimeSegments/10 inlinable
  global time:     12.000000
  self size:       11
  global size:     11
  min size:       6
  self stack:      0
  global stack:    0
    size:4.000000, time:4.000000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op1 changed)
  calls:
    FlexCAN_SetFDTimeSegments.part.0/153 function not considered for inlining
      loop depth: 0 freq:0.50 size: 3 time: 12callee size:13 stack: 0

IPA function summary for FlexCAN_GetBuffStatusImask/9 inlinable
  global time:     6.000000
  self size:       9
  global size:     9
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op1 changed)
    size:0.500000, time:0.250000,  executed if:(op1 <= 31) && (not inlined),  nonconst if:(op0[ref offset: 320] changed) && (op1 <= 31) && (not inlined)
    size:0.500000, time:0.250000,  executed if:(op1 <= 31),  nonconst if:(op0[ref offset: 320] changed) && (op1 <= 31)
    size:1.000000, time:0.500000,  executed if:(op1 <= 31),  nonconst if:(op1 changed) && (op1 <= 31)
    size:2.000000, time:1.000000,  executed if:(op1 <= 31),  nonconst if:(op1 changed || op0[ref offset: 320] changed) && (op1 <= 31)
  calls:

IPA function summary for FlexCAN_GetBuffStatusFlag/8 inlinable
  global time:     6.000000
  self size:       9
  global size:     9
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op1 changed)
    size:0.500000, time:0.250000,  executed if:(op1 <= 31) && (not inlined),  nonconst if:(op0[ref offset: 384] changed) && (op1 <= 31) && (not inlined)
    size:0.500000, time:0.250000,  executed if:(op1 <= 31),  nonconst if:(op0[ref offset: 384] changed) && (op1 <= 31)
    size:1.000000, time:0.500000,  executed if:(op1 <= 31),  nonconst if:(op1 changed) && (op1 <= 31)
    size:2.000000, time:1.000000,  executed if:(op1 <= 31),  nonconst if:(op1 changed || op0[ref offset: 384] changed) && (op1 <= 31)
  calls:

IPA function summary for FlexCAN_ClearMsgBuffIntStatusFlag/7 inlinable
  global time:     6.500000
  self size:       8
  global size:     8
  min size:       0
  self stack:      0
  global stack:    0
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:4.000000, time:4.000000,  nonconst if:(op1 changed)
    size:0.500000, time:0.250000,  executed if:(op1 <= 31) && (not inlined)
    size:0.500000, time:0.250000,  executed if:(op1 <= 31)
  calls:

IPA function summary for FlexCAN_SetListenOnlyMode/5 inlinable
  global time:     8.000000
  self size:       9
  global size:     9
  min size:       0
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 32] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 32] changed)
    size:2.000000, time:2.000000,  nonconst if:(op1 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 32] changed || op1 changed)
  calls:

IPA function summary for FlexCAN_SetFDEnabled/4 inlinable
  global time:     17.000000
  self size:       18
  global size:     18
  min size:       0
  self stack:      0
  global stack:    0
    size:5.500000, time:5.500000
    size:5.500000, time:4.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 0] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 0] changed)
    size:2.000000, time:2.000000,  nonconst if:(op1 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0[ref offset: 0] changed || op1 changed)
    size:2.000000, time:2.000000,  nonconst if:(op2 changed)
  calls:

IPA function summary for FlexCAN_SetTDCOffset/2 inlinable
  global time:     9.000000
  self size:       12
  global size:     12
  min size:       0
  self stack:      0
  global stack:    0
    size:0.500000, time:0.500000
    size:3.500000, time:2.500000,  executed if:(not inlined)
    size:0.500000, time:0.500000,  executed if:(not inlined),  nonconst if:(op0[ref offset: 24576] changed) && (not inlined)
    size:1.500000, time:1.500000,  nonconst if:(op0[ref offset: 24576] changed)
    size:2.000000, time:2.000000,  nonconst if:(op1 changed)
    size:1.000000, time:0.500000,  executed if:(op1 != 0),  nonconst if:(op0[ref offset: 24576] changed) && (op1 != 0)
    size:2.000000, time:1.000000,  executed if:(op1 != 0),  nonconst if:(op2 changed) && (op1 != 0)
    size:1.000000, time:0.500000,  executed if:(op1 != 0),  nonconst if:(op0[ref offset: 24576] changed || op2 changed) && (op1 != 0)
  calls:


Flattening functions:
Overall time estimate: 2583.348911 weighted by profile: 0.000000

Deciding on inlining of small functions.  Starting with size 0.
Enqueueing calls in FlexCAN_StartRxMessageFifoData.part.0/161.
Enqueueing calls in FlexCAN_GetMsgBuffIntStatusFlag.part.0/158.
Enqueueing calls in FlexCAN_SetExtendedTimeSegments.part.0/157.
Enqueueing calls in FlexCAN_SetTimeSegments.part.0/155.
Enqueueing calls in FlexCAN_SetFDTimeSegments.part.0/153.
Enqueueing calls in FlexCAN_Ip_ManualBusOffRecovery/104.
Enqueueing calls in FlexCAN_Ip_GetListenOnlyMode/103.
Enqueueing calls in FlexCAN_Ip_SetListenOnlyMode_Privileged/102.
Enqueueing calls in FlexCAN_Ip_SetRxMb15Mask_Privileged/101.
Enqueueing calls in FlexCAN_Ip_SetRxMb14Mask_Privileged/100.
Enqueueing calls in FlexCAN_Ip_AbortTransfer/99.
Enqueueing calls in FlexCAN_Ip_SetErrorInt_Privileged/98.
Enqueueing calls in FlexCAN_Ip_DisableInterrupts_Privileged/97.
Enqueueing calls in FlexCAN_Ip_EnableInterrupts_Privileged/96.
Enqueueing calls in FlexCAN_Ip_ClearBuffStatusFlag/95.
Enqueueing calls in FlexCAN_Ip_GetBuffStatusFlag/94.
Enqueueing calls in FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/93.
Enqueueing calls in FlexCAN_Ip_SetTDCOffset_Privileged/92.
Enqueueing calls in FlexCAN_Ip_GetBitrateFD/91.
Enqueueing calls in FlexCAN_Ip_SetBitrateCbt_Privileged/90.
Enqueueing calls in FlexCAN_Ip_GetTDCValue/89.
Enqueueing calls in FlexCAN_Ip_GetTDCFail/88.
Enqueueing calls in FlexCAN_Ip_ClearTDCFail/87.
Enqueueing calls in FlexCAN_Ip_GetBitrate/86.
Enqueueing calls in FlexCAN_Ip_SetBitrate_Privileged/85.
Enqueueing calls in FlexCAN_Ip_SetRxMaskType_Privileged/84.
Enqueueing calls in FlexCAN_Ip_SetStopMode_Privileged/83.
Enqueueing calls in FlexCAN_Ip_SetStartMode_Privileged/82.
Enqueueing calls in FlexCAN_Ip_GetStartMode_Privileged/81.
Enqueueing calls in FlexCAN_Ip_GetStopMode_Privileged/80.
Enqueueing calls in FlexCAN_Ip_MainFunctionWrite/79.
Enqueueing calls in FlexCAN_Ip_MainFunctionBusOff_Privileged/78.
Enqueueing calls in FlexCAN_Ip_MainFunctionRead/77.
Enqueueing calls in FlexCAN_Ip_Deinit_Privileged/76.
Enqueueing calls in FlexCAN_Ip_SetRxFifoGlobalMask_Privileged/75.
Enqueueing calls in FlexCAN_Ip_SetRxIndividualMask_Privileged/74.
Enqueueing calls in FlexCAN_Ip_ExitFreezeMode_Privileged/73.
Enqueueing calls in FlexCAN_Ip_EnterFreezeMode_Privileged/72.
Enqueueing calls in FlexCAN_Ip_SetRxMbGlobalMask_Privileged/71.
Enqueueing calls in FlexCAN_Ip_SendBlocking/70.
Enqueueing calls in FlexCAN_BusOff_IRQHandler/69.
Enqueueing calls in FlexCAN_Error_IRQHandler/68.
Enqueueing calls in FlexCAN_Ip_GetControllerRxErrorCounter/67.
Enqueueing calls in FlexCAN_Ip_GetControllerTxErrorCounter/66.
Enqueueing calls in FlexCAN_Ip_GetErrorStatus/65.
Enqueueing calls in FlexCAN_Ip_ClearErrorStatus/64.
Enqueueing calls in FlexCAN_IRQHandler/63.
Enqueueing calls in FlexCAN_CompleteRxMessageFifoData/62.
Enqueueing calls in FlexCAN_Ip_GetTransferStatus/61.
Enqueueing calls in FlexCAN_Ip_ConfigRemoteResponseMb/60.
Enqueueing calls in FlexCAN_Ip_ConfigRxFifo_Privileged/59.
Enqueueing calls in FlexCAN_Ip_RxFifoBlocking/58.
Enqueueing calls in FlexCAN_Ip_RxFifo/57.
Enqueueing calls in FlexCAN_Ip_ReceiveBlocking/56.
Enqueueing calls in FlexCAN_Ip_Receive/55.
Enqueueing calls in FlexCAN_Ip_ConfigRxMb/54.
Enqueueing calls in FlexCAN_Ip_Send/53.
Enqueueing calls in FlexCAN_Ip_Init_Privileged/52.
Enqueueing calls in FlexCAN_AbortRxTransfer/51.
Enqueueing calls in FlexCAN_AbortTxTransfer/50.
Enqueueing calls in FlexCAN_ProcessSpuriousInterruptMB/49.
Enqueueing calls in FlexCAN_IRQHandlerRxFIFO/48.
Enqueueing calls in FlexCAN_IRQHandlerTxMB/47.
Enqueueing calls in FlexCAN_IRQHandlerRxMB/46.
Enqueueing calls in FlexCAN_StartRxMessageFifoData/45.
Enqueueing calls in FlexCAN_StartSendData/44.
Enqueueing calls in FlexCAN_StartRxMessageBufferData/43.
Enqueueing calls in FlexCAN_ProccessLegacyRxFIFO/42.
Enqueueing calls in FlexCAN_InitController/41.
Enqueueing calls in FlexCAN_InitCtroll/40.
Enqueueing calls in FlexCAN_InitRxFifo/39.
Enqueueing calls in FlexCAN_SetRegDefaultVal/36.
Enqueueing calls in FlexCAN_SetRxMaskType/35.
Enqueueing calls in FlexCAN_SetTxArbitrationStartDelay/34.
Enqueueing calls in FlexCAN_GetMsgBuffIntStatusFlag/30.
Enqueueing calls in FlexCAN_SetClkSrc/29.
Enqueueing calls in RxFifoOcuppiedLastMsgBuff/21.
Enqueueing calls in FlexCAN_EnableExtCbt/17.
Enqueueing calls in FlexCAN_GetFDTimeSegments/15.
Enqueueing calls in FlexCAN_GetTimeSegments/14.
Enqueueing calls in FlexCAN_GetExtendedTimeSegments/13.
Enqueueing calls in FlexCAN_SetExtendedTimeSegments/12.
Enqueueing calls in FlexCAN_SetTimeSegments/11.
Enqueueing calls in FlexCAN_SetFDTimeSegments/10.
Enqueueing calls in FlexCAN_GetBuffStatusImask/9.
Enqueueing calls in FlexCAN_GetBuffStatusFlag/8.
Enqueueing calls in FlexCAN_ClearMsgBuffIntStatusFlag/7.
Enqueueing calls in FlexCAN_SetListenOnlyMode/5.
Enqueueing calls in FlexCAN_SetFDEnabled/4.
Enqueueing calls in FlexCAN_SetTDCOffset/2.

Considering FlexCAN_GetMsgBuffIntStatusFlag.part.0/158 with 8 size
 to be inlined into FlexCAN_GetMsgBuffIntStatusFlag/30 in unknown:0
 Estimated badness is -inf, frequency 0.50.

Considering FlexCAN_GetBuffStatusImask/9 with 9 size
 to be inlined into FlexCAN_ProcessSpuriousInterruptMB/49 in ../RTD/src/FlexCAN_Ip.c:1459
 Estimated badness is -17.320009, frequency 2.67.

Considering RxFifoOcuppiedLastMsgBuff/21 with 7 size
 to be inlined into FlexCAN_AbortRxTransfer/51 in ../RTD/src/FlexCAN_Ip.c:1775
 Estimated badness is -6.386383, frequency 0.67.

Considering FlexCAN_GetMsgBuffIntStatusFlag/30 with 9 size
 to be inlined into FlexCAN_IRQHandler/63 in ../RTD/src/FlexCAN_Ip.c:2681
 Estimated badness is -3.548358, frequency 1.12.

Considering FlexCAN_SetClkSrc/29 with 9 size
 to be inlined into FlexCAN_InitController/41 in ../RTD/src/FlexCAN_Ip.c:440
 Estimated badness is -3.192453, frequency 0.71.

Considering FlexCAN_SetTxArbitrationStartDelay/34 with 9 size
 to be inlined into FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/93 in ../RTD/src/FlexCAN_Ip.c:4092
 Estimated badness is -0.802701, frequency 0.12.

Considering FlexCAN_SetListenOnlyMode/5 with 9 size
 to be inlined into FlexCAN_Ip_SetListenOnlyMode_Privileged/102 in ../RTD/src/FlexCAN_Ip.c:4521
 Estimated badness is -0.802701, frequency 0.12.

Considering FlexCAN_SetTimeSegments.part.0/155 with 26 size
 to be inlined into FlexCAN_SetTimeSegments/11 in unknown:0
 Estimated badness is -0.685185, frequency 0.50.

Considering FlexCAN_SetExtendedTimeSegments.part.0/157 with 27 size
 to be inlined into FlexCAN_SetExtendedTimeSegments/12 in unknown:0
 Estimated badness is -0.621849, frequency 0.50.

Considering FlexCAN_SetFDTimeSegments.part.0/153 with 27 size
 to be inlined into FlexCAN_SetFDTimeSegments/10 in unknown:0
 Estimated badness is -0.621849, frequency 0.50.

Considering FlexCAN_InitRxFifo/39 with 11 size
 to be inlined into FlexCAN_InitCtroll/40 in ../RTD/src/FlexCAN_Ip.c:386
 Estimated badness is -0.564505, frequency 1.00.

Considering FlexCAN_SetRxMaskType/35 with 11 size
 to be inlined into FlexCAN_Ip_SetRxMaskType_Privileged/84 in ../RTD/src/FlexCAN_Ip.c:3658
 Estimated badness is -0.521051, frequency 0.12.

Considering FlexCAN_GetFDTimeSegments/15 with 22 size
 to be inlined into FlexCAN_Ip_GetBitrateFD/91 in ../RTD/src/FlexCAN_Ip.c:3983
 Estimated badness is -0.493506, frequency 0.25.

Considering FlexCAN_GetMsgBuffIntStatusFlag/30 with 9 size
 to be inlined into FlexCAN_IRQHandler/63 in ../RTD/src/FlexCAN_Ip.c:2676
 Estimated badness is -0.422125, frequency 0.13.

Considering FlexCAN_SetRegDefaultVal/36 with 19 size
 to be inlined into FlexCAN_Ip_Deinit_Privileged/76 in ../RTD/src/FlexCAN_Ip.c:3393
 Estimated badness is -0.377138, frequency 0.16.

Considering FlexCAN_StartRxMessageFifoData/45 with 12 size
 to be inlined into FlexCAN_Ip_RxFifo/57 in ../RTD/src/FlexCAN_Ip.c:2246
 Estimated badness is -0.329412, frequency 0.50.

Considering FlexCAN_GetMsgBuffIntStatusFlag/30 with 9 size
 to be inlined into FlexCAN_IRQHandler/63 in ../RTD/src/FlexCAN_Ip.c:2714
 Estimated badness is -0.282824, frequency 0.09.

Considering FlexCAN_GetTimeSegments/14 with 21 size
 to be inlined into FlexCAN_Ip_GetBitrate/86 in ../RTD/src/FlexCAN_Ip.c:3787
 Estimated badness is -0.271755, frequency 0.15.

Considering FlexCAN_StartRxMessageFifoData/45 with 12 size
 to be inlined into FlexCAN_Ip_RxFifoBlocking/58 in ../RTD/src/FlexCAN_Ip.c:2296
 Estimated badness is -0.243478, frequency 0.50.

Considering FlexCAN_EnableExtCbt/17 with 9 size
 to be inlined into FlexCAN_Ip_Init_Privileged/52 in ../RTD/src/FlexCAN_Ip.c:1858
 Estimated badness is -0.198007, frequency 0.06.

Considering FlexCAN_SetTDCOffset/2 with 12 size
 to be inlined into FlexCAN_Ip_SetTDCOffset_Privileged/92 in ../RTD/src/FlexCAN_Ip.c:4038
 Estimated badness is -0.168517, frequency 0.06.

Considering FlexCAN_GetExtendedTimeSegments/13 with 22 size
 to be inlined into FlexCAN_Ip_GetBitrate/86 in ../RTD/src/FlexCAN_Ip.c:3782
 Estimated badness is -0.166634, frequency 0.10.

Considering FlexCAN_SetFDEnabled/4 with 18 size
 to be inlined into FlexCAN_InitController/41 in ../RTD/src/FlexCAN_Ip.c:465
 Estimated badness is -0.141956, frequency 0.12.

Considering FlexCAN_SetFDEnabled/4 with 18 size
 to be inlined into FlexCAN_Ip_SetBitrateCbt_Privileged/90 in ../RTD/src/FlexCAN_Ip.c:3927
 Estimated badness is -0.039080, frequency 0.03.

Considering FlexCAN_InitCtroll/40 with 37 size
 to be inlined into FlexCAN_InitController/41 in ../RTD/src/FlexCAN_Ip.c:477
 Estimated badness is -0.010460, frequency 0.35.

Considering FlexCAN_ProcessSpuriousInterruptMB/49 with 38 size
 to be inlined into FlexCAN_IRQHandler/63 in ../RTD/src/FlexCAN_Ip.c:2739
 Estimated badness is -0.006505, frequency 0.04.

Considering FlexCAN_ProccessLegacyRxFIFO/42 with 74 size
 to be inlined into FlexCAN_Ip_RxFifoBlocking/58 in ../RTD/src/FlexCAN_Ip.c:2299
 Estimated badness is -0.001738, frequency 0.16.

Considering FlexCAN_InitController/41 with 89 size
 to be inlined into FlexCAN_Ip_Init_Privileged/52 in ../RTD/src/FlexCAN_Ip.c:1854
 Estimated badness is -0.001052, frequency 0.19.

Considering FlexCAN_AbortTxTransfer/50 with 48 size
 to be inlined into FlexCAN_Ip_AbortTransfer/99 in ../RTD/src/FlexCAN_Ip.c:4362
 Estimated badness is -0.000218, frequency 0.01.

Considering FlexCAN_AbortRxTransfer/51 with 47 size
 to be inlined into FlexCAN_Ip_AbortTransfer/99 in ../RTD/src/FlexCAN_Ip.c:4367
 Estimated badness is -0.000204, frequency 0.01.

Considering FlexCAN_IRQHandlerTxMB/47 with 73 size
 to be inlined into FlexCAN_IRQHandler/63 in ../RTD/src/FlexCAN_Ip.c:2710
 Estimated badness is -0.000107, frequency 0.02.

Considering FlexCAN_CompleteRxMessageFifoData/62 with 36 size
 to be inlined into FlexCAN_IRQHandlerRxFIFO/48 in ../RTD/src/FlexCAN_Ip.c:1413
 Estimated badness is -0.000000, frequency 0.02.

Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:

Deciding on functions to be inlined into all callers and removing useless speculations:
Overall time estimate: 1231.475397 weighted by profile: 0.000000

Why inlining failed?
function body not available                       :      140 calls, 25.798010 freq, 0 count
--param max-inline-insns-auto limit reached       :        6 calls, 0.773195 freq, 0 count
call is unlikely and code size would grow         :       39 calls, 8.875492 freq, 0 count
IPA function summary for FlexCAN_StartRxMessageFifoData.part.0/161 inlinable
  global time:     16.140750
  self size:       41
  global size:     41
  min size:       20
  self stack:      0
  global stack:    0
  estimated growth:-7
    size:20.000000, time:9.314500
    size:3.000000, time:2.000000,  executed if:(not inlined)
  array index:(op0 changed)
  calls:
    FlexCAN_SetMsgBuffIntCmd/114 function body not available
      loop depth: 0 freq:0.11 size: 6 time: 15
       op2 is compile time invariant
       op3 is compile time invariant
    FlexCAN_SetMsgBuffIntCmd/114 function body not available
      loop depth: 0 freq:0.11 size: 6 time: 15
       op2 is compile time invariant
       op3 is compile time invariant
    FlexCAN_SetMsgBuffIntCmd/114 function body not available
      loop depth: 0 freq:0.11 size: 6 time: 15
       op2 is compile time invariant
       op3 is compile time invariant

IPA function summary for FlexCAN_Ip_ManualBusOffRecovery/104 inlinable
  global time:     41.963078
  self size:       45
  global size:     45
  min size:       26
  self stack:      4
  global stack:    4
    size:28.000000, time:14.848716
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    OsIf_GetElapsed/122 function body not available
      loop depth: 1 freq:0.73 size: 4 time: 13
       op0 is compile time invariant
       op1 is compile time invariant
    OsIf_GetCounter/121 function body not available
      loop depth: 0 freq:0.08 size: 3 time: 12
       op0 is compile time invariant
    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_20/151 function body not available
      loop depth: 0 freq:0.08 size: 1 time: 10
    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_20/150 function body not available
      loop depth: 0 freq:0.08 size: 1 time: 10
    OsIf_MicrosToTicks/120 function body not available
      loop depth: 0 freq:1.00 size: 4 time: 13
       op0 is compile time invariant
       op1 is compile time invariant

IPA function summary for FlexCAN_Ip_GetListenOnlyMode/103 inlinable
  global time:     6.000000
  self size:       7
  global size:     7
  min size:       0
  self stack:      0
  global stack:    0
    size:4.000000, time:4.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  array index:(op0 changed)
  calls:

IPA function summary for FlexCAN_Ip_SetListenOnlyMode_Privileged/102 inlinable
  global time:     18.658702
  self size:       35
  global size:     37
  min size:       38
  self stack:      0
  global stack:    0
    size:23.000000, time:10.876250
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:2.000000, time:0.247499,  nonconst if:(op1 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_Disable/108 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12
    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_10/149 function body not available
      loop depth: 0 freq:0.12 size: 1 time: 10
    FlexCAN_SetListenOnlyMode/5 inlined
      loop depth: 0 freq:0.12 size: 3 time: 12callee size: 4 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0
    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_10/148 function body not available
      loop depth: 0 freq:0.12 size: 1 time: 10
    FlexCAN_Enable/126 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12

IPA function summary for FlexCAN_Ip_SetRxMb15Mask_Privileged/101 inlinable
  global time:     15.752459
  self size:       31
  global size:     31
  min size:       12
  self stack:      0
  global stack:    0
    size:21.000000, time:10.692500
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_Disable/108 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12
    FlexCAN_Enable/126 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12

IPA function summary for FlexCAN_Ip_SetRxMb14Mask_Privileged/100 inlinable
  global time:     15.752459
  self size:       31
  global size:     31
  min size:       12
  self stack:      0
  global stack:    0
    size:21.000000, time:10.692500
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_Disable/108 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12
    FlexCAN_Enable/126 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12

IPA function summary for FlexCAN_Ip_AbortTransfer/99 inlinable
  global time:     15.790805
  self size:       40
  global size:     122
  min size:       0
  self stack:      0
  global stack:    4
    size:10.000000, time:6.500000
    size:3.000000, time:0.500000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:4.000000, time:1.500000,  nonconst if:(op1 changed)
    size:58.000000, time:1.706571,  executed if:(op1 <= 31)
    size:2.000000, time:0.016192,  executed if:(op1 <= 31),  nonconst if:(op1 changed) && (op1 <= 31)
    size:1.000000, time:0.002672,  executed if:(op1 == 0) && (op1 <= 31)
  array index:(op1 changed) && (op0 changed)
  calls:
    FlexCAN_AbortRxTransfer/51 inlined
      loop depth: 0 freq:0.01 size: 3 time: 12callee size:23 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0
      FlexCAN_ClearMsgBuffIntStatusFlag/7 call is unlikely and code size would grow
        loop depth: 0 freq:0.01 size: 3 time: 12callee size: 4 stack: 0 predicate: (op1 <= 31)
         op0 change 99.990000% of time
         op1 change 99.990000% of time
      FlexCAN_GetMsgBuffRegion/117 function body not available
        loop depth: 0 freq:0.00 size: 4 time: 13 predicate: (op1 <= 31)
      FLEXCAN_ClearMsgBuffIntCmd/147 function body not available
        loop depth: 0 freq:0.00 size: 5 time: 14 predicate: (op1 == 0) && (op1 <= 31)
         op2 is compile time invariant
      FlexCAN_GetMsgBuffRegion/117 function body not available
        loop depth: 0 freq:0.00 size: 4 time: 13 predicate: (op1 <= 31)
      RxFifoOcuppiedLastMsgBuff/21 inlined
        loop depth: 0 freq:0.01 size: 3 time: 12callee size: 3 stack: 0
        Stack frame offset 0, callee self size 0, callee size 0
    FlexCAN_AbortTxTransfer/50 inlined
      loop depth: 0 freq:0.01 size: 4 time: 13callee size:24 stack: 4
      Stack frame offset 0, callee self size 4, callee size 4
      FlexCAN_ClearMsgBuffIntStatusFlag/7 call is unlikely and code size would grow
        loop depth: 0 freq:0.01 size: 3 time: 12callee size: 4 stack: 0 predicate: (op1 <= 31)
      FlexCAN_GetBuffStatusFlag/8 call is unlikely and code size would grow
        loop depth: 1 freq:0.11 size: 4 time: 13callee size: 4 stack: 0 predicate: (op1 <= 31)
         op0 change 10.690000% of time
         op1 change 10.690000% of time
      OsIf_GetElapsed/122 function body not available
        loop depth: 1 freq:0.11 size: 4 time: 13 predicate: (op1 <= 31)
         op0 is compile time invariant
         op1 is compile time invariant
      OsIf_GetCounter/121 function body not available
        loop depth: 0 freq:0.01 size: 3 time: 12 predicate: (op1 <= 31)
         op0 is compile time invariant
      OsIf_MicrosToTicks/120 function body not available
        loop depth: 0 freq:0.01 size: 4 time: 13 predicate: (op1 <= 31)
         op0 is compile time invariant
         op1 is compile time invariant
      FlexCAN_GetMsgBuffRegion/117 function body not available
        loop depth: 0 freq:0.01 size: 4 time: 13 predicate: (op1 <= 31)
    FLEXCAN_ClearMsgBuffIntCmd/147 function body not available
      loop depth: 0 freq:0.06 size: 5 time: 14 predicate: (op1 <= 31)

IPA function summary for FlexCAN_Ip_SetErrorInt_Privileged/98 inlinable
  global time:     18.373233
  self size:       68
  global size:     68
  min size:       12
  self stack:      0
  global stack:    0
    size:18.000000, time:7.709837
    size:3.000000, time:0.927450,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:12.000000, time:1.745003,  nonconst if:(op1 changed)
    size:4.000000, time:0.290890,  executed if:(op1 == 1)
    size:4.000000, time:0.290890,  executed if:(op1 == 0)
  array index:(op0 changed)
  calls:
    FlexCAN_Disable/108 function body not available
      loop depth: 0 freq:0.12 size: 3 time: 12
    FlexCAN_SetErrIntCmd/146 function body not available
      loop depth: 0 freq:0.02 size: 4 time: 13 predicate: (op1 == 1)
       op1 is compile time invariant
    FlexCAN_SetErrIntCmd/146 function body not available
      loop depth: 0 freq:0.02 size: 4 time: 13 predicate: (op1 == 0)
       op1 is compile time invariant
    FlexCAN_SetErrIntCmd/146 function body not available
      loop depth: 0 freq:0.07 size: 4 time: 13 predicate: (op1 == 3)
       op1 is compile time invariant
    FlexCAN_SetErrIntCmd/146 function body not available
      loop depth: 0 freq:0.07 size: 4 time: 13 predicate: (op1 == 2)
       op1 is compile time invariant
    FlexCAN_SetErrIntCmd/146 function body not available
      loop depth: 0 freq:0.07 size: 4 time: 13 predicate: (op1 == 4)
       op1 is compile time invariant
    FlexCAN_Enable/126 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12

IPA function summary for FlexCAN_Ip_DisableInterrupts_Privileged/97 inlinable
  global time:     11.988815
  self size:       16
  global size:     16
  min size:       4
  self stack:      0
  global stack:    0
    size:10.000000, time:7.707401
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_DisableInterrupts/145 function body not available
      loop depth: 0 freq:0.21 size: 2 time: 11

IPA function summary for FlexCAN_Ip_EnableInterrupts_Privileged/96 inlinable
  global time:     12.196216
  self size:       17
  global size:     17
  min size:       6
  self stack:      0
  global stack:    0
    size:10.000000, time:7.707401
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_EnableInterrupts/144 function body not available
      loop depth: 0 freq:0.21 size: 3 time: 12

IPA function summary for FlexCAN_Ip_ClearBuffStatusFlag/95 inlinable
  global time:     12.500000
  self size:       12
  global size:     12
  min size:       6
  self stack:      0
  global stack:    0
    size:5.000000, time:4.500000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_ClearMsgBuffIntStatusFlag/7 call is unlikely and code size would grow
      loop depth: 0 freq:0.50 size: 3 time: 12callee size: 4 stack: 0

IPA function summary for FlexCAN_Ip_GetBuffStatusFlag/94 inlinable
  global time:     13.500000
  self size:       14
  global size:     14
  min size:       8
  self stack:      0
  global stack:    0
    size:6.000000, time:5.000000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_GetBuffStatusFlag/8 call is unlikely and code size would grow
      loop depth: 0 freq:0.50 size: 4 time: 13callee size: 4 stack: 0

IPA function summary for FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/93 inlinable
  global time:     18.658702
  self size:       35
  global size:     37
  min size:       38
  self stack:      0
  global stack:    0
    size:23.000000, time:10.876250
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:2.000000, time:0.247499,  nonconst if:(op1 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_Disable/108 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12
    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_17/143 function body not available
      loop depth: 0 freq:0.12 size: 1 time: 10
    FlexCAN_SetTxArbitrationStartDelay/34 inlined
      loop depth: 0 freq:0.12 size: 3 time: 12callee size: 4 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0
    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_17/142 function body not available
      loop depth: 0 freq:0.12 size: 1 time: 10
    FlexCAN_Enable/126 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12

IPA function summary for FlexCAN_Ip_SetTDCOffset_Privileged/92 inlinable
  global time:     21.656276
  self size:       43
  global size:     47
  min size:       52
  self stack:      0
  global stack:    0
    size:26.000000, time:10.376255
    size:3.000000, time:0.500000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:2.000000, time:0.123754,  nonconst if:(op1 changed)
    size:2.000000, time:0.061877,  executed if:(op1 != 0)
    size:2.000000, time:0.061877,  executed if:(op1 != 0),  nonconst if:(op2 changed) && (op1 != 0)
  array index:(op0 changed)
  calls:
    FlexCAN_Disable/108 function body not available
      loop depth: 0 freq:0.06 size: 3 time: 12
    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_16/141 function body not available
      loop depth: 0 freq:0.06 size: 1 time: 10
    FlexCAN_SetTDCOffset/2 inlined
      loop depth: 0 freq:0.06 size: 4 time: 13callee size: 6 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0
    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_16/140 function body not available
      loop depth: 0 freq:0.06 size: 1 time: 10
    FlexCAN_IsFDAvailable/105 function body not available
      loop depth: 0 freq:0.50 size: 3 time: 12
    FlexCAN_Enable/126 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12

IPA function summary for FlexCAN_Ip_GetBitrateFD/91 inlinable
  global time:     11.750000
  self size:       17
  global size:     28
  min size:       6
  self stack:      0
  global stack:    0
    size:23.000000, time:9.750000
    size:3.000000, time:0.500000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.500000,  nonconst if:(op1 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_GetFDTimeSegments/15 inlined
      loop depth: 0 freq:0.25 size: 3 time: 12callee size:11 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for FlexCAN_Ip_SetBitrateCbt_Privileged/90 inlinable
  global time:     14.831286
  self size:       49
  global size:     57
  min size:       52
  self stack:      0
  global stack:    0
    size:39.000000, time:10.249395
    size:3.000000, time:0.500000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.500000,  nonconst if:(op1 changed)
    size:2.000000, time:0.061877,  nonconst if:(op2 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_Disable/108 function body not available
      loop depth: 0 freq:0.06 size: 3 time: 12
    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_15/139 function body not available
      loop depth: 0 freq:0.03 size: 1 time: 10
    FlexCAN_SetFDTimeSegments/10 call is unlikely and code size would grow
      loop depth: 0 freq:0.03 size: 3 time: 12callee size:14 stack: 0
    FlexCAN_SetFDEnabled/4 inlined
      loop depth: 0 freq:0.03 size: 4 time: 13callee size: 9 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0
    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_15/138 function body not available
      loop depth: 0 freq:0.03 size: 1 time: 10
    FlexCAN_Enable/126 function body not available
      loop depth: 0 freq:0.06 size: 3 time: 12

IPA function summary for FlexCAN_Ip_GetTDCValue/89 inlinable
  global time:     7.500000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:7.000000, time:5.500000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:

IPA function summary for FlexCAN_Ip_GetTDCFail/88 inlinable
  global time:     8.000000
  self size:       12
  global size:     12
  min size:       0
  self stack:      0
  global stack:    0
    size:8.000000, time:6.000000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:

IPA function summary for FlexCAN_Ip_ClearTDCFail/87 inlinable
  global time:     18.000000
  self size:       14
  global size:     14
  min size:       4
  self stack:      0
  global stack:    0
    size:8.000000, time:6.000000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_09/137 function body not available
      loop depth: 0 freq:0.50 size: 1 time: 10
    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_09/136 function body not available
      loop depth: 0 freq:0.50 size: 1 time: 10

IPA function summary for FlexCAN_Ip_GetBitrate/86 inlinable
  global time:     12.352502
  self size:       23
  global size:     44
  min size:       18
  self stack:      0
  global stack:    0
    size:39.000000, time:10.352502
    size:3.000000, time:0.500000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.500000,  nonconst if:(op1 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_GetTimeSegments/14 inlined
      loop depth: 0 freq:0.15 size: 3 time: 12callee size:10 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0
    FlexCAN_GetExtendedTimeSegments/13 inlined
      loop depth: 0 freq:0.10 size: 3 time: 12callee size:11 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for FlexCAN_Ip_SetBitrate_Privileged/85 inlinable
  global time:     14.948181
  self size:       46
  global size:     46
  min size:       28
  self stack:      0
  global stack:    0
    size:27.000000, time:9.438132
    size:3.000000, time:0.500000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.500000,  nonconst if:(op1 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_Disable/108 function body not available
      loop depth: 0 freq:0.06 size: 3 time: 12
    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_14/135 function body not available
      loop depth: 0 freq:0.06 size: 1 time: 10
    FlexCAN_SetTimeSegments/11 call is unlikely and code size would grow
      loop depth: 0 freq:0.04 size: 3 time: 12callee size:13 stack: 0
    FlexCAN_SetExtendedTimeSegments/12 call is unlikely and code size would grow
      loop depth: 0 freq:0.03 size: 3 time: 12callee size:14 stack: 0
    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_14/134 function body not available
      loop depth: 0 freq:0.06 size: 1 time: 10
    FlexCAN_Enable/126 function body not available
      loop depth: 0 freq:0.06 size: 3 time: 12

IPA function summary for FlexCAN_Ip_SetRxMaskType_Privileged/84 inlinable
  global time:     18.534953
  self size:       35
  global size:     38
  min size:       38
  self stack:      0
  global stack:    0
    size:20.000000, time:10.505001
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:2.000000, time:0.247499,  nonconst if:(op1 changed)
    size:2.000000, time:0.123750,  executed if:(op1 != 0)
    size:2.000000, time:0.123750,  executed if:(op1 == 0)
  array index:(op0 changed)
  calls:
    FlexCAN_Disable/108 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12
    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_08/133 function body not available
      loop depth: 0 freq:0.12 size: 1 time: 10
    FlexCAN_SetRxMaskType/35 inlined
      loop depth: 0 freq:0.12 size: 3 time: 12callee size: 5 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0
    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_08/132 function body not available
      loop depth: 0 freq:0.12 size: 1 time: 10
    FlexCAN_Enable/126 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12

IPA function summary for FlexCAN_Ip_SetStopMode_Privileged/83 inlinable
  global time:     15.479977
  self size:       17
  global size:     17
  min size:       12
  self stack:      0
  global stack:    0
    size:7.000000, time:5.500000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_Disable/108 function body not available
      loop depth: 0 freq:0.16 size: 3 time: 12
    FlexCAN_EnterFreezeMode/107 function body not available
      loop depth: 0 freq:0.50 size: 3 time: 12

IPA function summary for FlexCAN_Ip_SetStartMode_Privileged/82 inlinable
  global time:     24.000000
  self size:       17
  global size:     17
  min size:       10
  self stack:      0
  global stack:    0
    size:8.000000, time:6.000000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_ExitFreezeMode/129 function body not available
      loop depth: 0 freq:0.50 size: 3 time: 12
    SchM_Exit_Can_CAN_EXCLUSIVE_AREA_07/131 function body not available
      loop depth: 0 freq:0.50 size: 1 time: 10
    SchM_Enter_Can_CAN_EXCLUSIVE_AREA_07/130 function body not available
      loop depth: 0 freq:0.50 size: 1 time: 10

IPA function summary for FlexCAN_Ip_GetStartMode_Privileged/81 inlinable
  global time:     6.000000
  self size:       7
  global size:     7
  min size:       0
  self stack:      0
  global stack:    0
    size:4.000000, time:4.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  array index:(op0 changed)
  calls:

IPA function summary for FlexCAN_Ip_GetStopMode_Privileged/80 inlinable
  global time:     6.000000
  self size:       7
  global size:     7
  min size:       0
  self stack:      0
  global stack:    0
    size:4.000000, time:4.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  array index:(op0 changed)
  calls:

IPA function summary for FlexCAN_Ip_MainFunctionWrite/79 inlinable
  global time:     20.119945
  self size:       26
  global size:     26
  min size:       22
  self stack:      0
  global stack:    0
    size:11.000000, time:7.494994
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op1 changed) && (op0 changed)
  calls:
    FlexCAN_ClearMsgBuffIntStatusFlag/7 call is unlikely and code size would grow
      loop depth: 0 freq:0.16 size: 3 time: 12callee size: 4 stack: 0
    FlexCAN_GetMsgBuffTimestamp/128 function body not available
      loop depth: 0 freq:0.16 size: 4 time: 13
    FlexCAN_GetBuffStatusFlag/8 call is unlikely and code size would grow
      loop depth: 0 freq:0.50 size: 4 time: 13callee size: 4 stack: 0

IPA function summary for FlexCAN_Ip_MainFunctionBusOff_Privileged/78 inlinable
  global time:     14.325009
  self size:       25
  global size:     25
  min size:       14
  self stack:      0
  global stack:    0
    size:14.000000, time:9.000000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    indirect call loop depth: 0 freq:0.18 size: 7 time: 19

IPA function summary for FlexCAN_Ip_MainFunctionRead/77 inlinable
  global time:     14.572760
  self size:       42
  global size:     42
  min size:       14
  self stack:      0
  global stack:    0
    size:18.000000, time:9.331877
    size:3.000000, time:0.500000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:3.000000, time:0.834997,  nonconst if:(op1 changed)
    size:2.000000, time:0.167499,  executed if:(op1 <= 7),  nonconst if:(op1 changed) && (op1 <= 7)
    size:5.000000, time:0.209385,  executed if:(op1 == 0) && (op1 <= 7)
  array index:(op1 changed) && (op0 changed)
  calls:
    FlexCAN_IRQHandlerRxMB/46 --param max-inline-insns-auto limit reached
      loop depth: 0 freq:0.02 size: 3 time: 12callee size:44 stack:80
    FlexCAN_GetBuffStatusFlag/8 call is unlikely and code size would grow
      loop depth: 0 freq:0.17 size: 4 time: 13callee size: 4 stack: 0
    FlexCAN_IRQHandlerRxFIFO/48 call is unlikely and code size would grow
      loop depth: 0 freq:0.01 size: 3 time: 12callee size:50 stack:80 predicate: (op1 == 0) && (op1 <= 7)
       op1 is compile time invariant

IPA function summary for FlexCAN_Ip_Deinit_Privileged/76 inlinable
  global time:     19.114939
  self size:       19
  global size:     28
  min size:       30
  self stack:      0
  global stack:    0
    size:15.500000, time:7.319984
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_Disable/108 function body not available
      loop depth: 0 freq:0.16 size: 2 time: 11
    FlexCAN_SetRegDefaultVal/36 inlined
      loop depth: 0 freq:0.16 size: 2 time: 11callee size: 9 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0
      FlexCAN_IsFDAvailable/105 function body not available
        loop depth: 0 freq:0.16 size: 3 time: 12
    FlexCAN_EnterFreezeMode/107 function body not available
      loop depth: 0 freq:0.50 size: 3 time: 12

IPA function summary for FlexCAN_Ip_SetRxFifoGlobalMask_Privileged/75 inlinable
  global time:     15.752459
  self size:       31
  global size:     31
  min size:       12
  self stack:      0
  global stack:    0
    size:21.000000, time:10.692500
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_Disable/108 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12
    FlexCAN_Enable/126 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12

IPA function summary for FlexCAN_Ip_SetRxIndividualMask_Privileged/74 inlinable
  global time:     13.559176
  self size:       37
  global size:     37
  min size:       0
  self stack:      0
  global stack:    0
    size:9.000000, time:7.000000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:2.000000, time:0.649999,  nonconst if:(op1 changed)
    size:16.000000, time:2.616350,  executed if:(op1 <= 31)
  array index:(op1 changed) && (op0 changed)
  calls:
    FlexCAN_Disable/108 function body not available
      loop depth: 0 freq:0.05 size: 3 time: 12 predicate: (op1 <= 31)
    FlexCAN_Enable/126 function body not available
      loop depth: 0 freq:0.05 size: 3 time: 12 predicate: (op1 <= 31)

IPA function summary for FlexCAN_Ip_ExitFreezeMode_Privileged/73 inlinable
  global time:     15.000000
  self size:       7
  global size:     7
  min size:       6
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  array index:(op0 changed)
  calls:
    FlexCAN_ExitFreezeMode/129 function body not available
      loop depth: 0 freq:1.00 size: 3 time: 12

IPA function summary for FlexCAN_Ip_EnterFreezeMode_Privileged/72 inlinable
  global time:     15.000000
  self size:       7
  global size:     7
  min size:       6
  self stack:      0
  global stack:    0
    size:1.000000, time:1.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
  array index:(op0 changed)
  calls:
    FlexCAN_EnterFreezeMode/107 function body not available
      loop depth: 0 freq:1.00 size: 3 time: 12

IPA function summary for FlexCAN_Ip_SetRxMbGlobalMask_Privileged/71 inlinable
  global time:     16.252459
  self size:       31
  global size:     31
  min size:       12
  self stack:      0
  global stack:    0
    size:21.000000, time:11.192500
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_Disable/108 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12
    FlexCAN_Enable/126 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12

IPA function summary for FlexCAN_Ip_SendBlocking/70 inlinable
  global time:     58.303207
  self size:       95
  global size:     95
  min size:       94
  self stack:      4
  global stack:    4
    size:42.000000, time:14.172411
    size:3.000000, time:0.500000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op5 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.500000,  nonconst if:(op2 changed)
  array index:(op1 changed) && (op0 changed)
  calls:
    FlexCAN_ClearMsgBuffIntStatusFlag/7 call is unlikely and code size would grow
      loop depth: 0 freq:0.08 size: 3 time: 12callee size: 4 stack: 0
    FlexCAN_GetBuffStatusFlag/8 call is unlikely and code size would grow
      loop depth: 1 freq:0.09 size: 4 time: 13callee size: 4 stack: 0
       op1 change 95.340000% of time
    OsIf_GetElapsed/122 function body not available
      loop depth: 1 freq:0.08 size: 4 time: 13
       op0 is compile time invariant
       op1 is compile time invariant
    OsIf_GetCounter/121 function body not available
      loop depth: 0 freq:0.01 size: 3 time: 12
       op0 is compile time invariant
    OsIf_MicrosToTicks/120 function body not available
      loop depth: 0 freq:0.01 size: 4 time: 13
       op0 is compile time invariant
       op1 is compile time invariant
    FlexCAN_GetMsgBuffRegion/117 function body not available
      loop depth: 0 freq:0.01 size: 4 time: 13
    FlexCAN_ClearMsgBuffIntStatusFlag/7 call is unlikely and code size would grow
      loop depth: 0 freq:0.01 size: 3 time: 12callee size: 4 stack: 0
    FlexCAN_GetBuffStatusFlag/8 call is unlikely and code size would grow
      loop depth: 1 freq:0.77 size: 4 time: 13callee size: 4 stack: 0
    OsIf_GetElapsed/122 function body not available
      loop depth: 1 freq:0.73 size: 4 time: 13
       op0 is compile time invariant
       op1 is compile time invariant
    OsIf_GetCounter/121 function body not available
      loop depth: 0 freq:0.08 size: 3 time: 12
       op0 is compile time invariant
    FlexCAN_StartSendData/44 --param max-inline-insns-auto limit reached
      loop depth: 0 freq:0.25 size: 7 time: 16callee size:35 stack:16
    OsIf_MicrosToTicks/120 function body not available
      loop depth: 0 freq:1.00 size: 4 time: 13
       op1 is compile time invariant

IPA function summary for FlexCAN_BusOff_IRQHandler/69 inlinable
  global time:     20.069901
  self size:       72
  global size:     72
  min size:       42
  self stack:      0
  global stack:    0
    size:47.000000, time:14.578734
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    indirect call loop depth: 0 freq:0.06 size: 7 time: 19
    indirect call loop depth: 0 freq:0.06 size: 7 time: 19
    indirect call loop depth: 0 freq:0.06 size: 7 time: 19

IPA function summary for FlexCAN_Error_IRQHandler/68 inlinable
  global time:     16.336897
  self size:       52
  global size:     52
  min size:       28
  self stack:      0
  global stack:    0
    size:34.000000, time:12.218875
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    indirect call loop depth: 0 freq:0.05 size: 7 time: 19
    indirect call loop depth: 0 freq:0.06 size: 7 time: 19

IPA function summary for FlexCAN_Ip_GetControllerRxErrorCounter/67 inlinable
  global time:     8.000000
  self size:       11
  global size:     11
  min size:       0
  self stack:      0
  global stack:    0
    size:7.000000, time:6.000000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:

IPA function summary for FlexCAN_Ip_GetControllerTxErrorCounter/66 inlinable
  global time:     7.500000
  self size:       10
  global size:     10
  min size:       0
  self stack:      0
  global stack:    0
    size:6.000000, time:5.500000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:

IPA function summary for FlexCAN_Ip_GetErrorStatus/65 inlinable
  global time:     7.500000
  self size:       10
  global size:     10
  min size:       0
  self stack:      0
  global stack:    0
    size:6.000000, time:5.500000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:

IPA function summary for FlexCAN_Ip_ClearErrorStatus/64 inlinable
  global time:     7.500000
  self size:       10
  global size:     10
  min size:       0
  self stack:      0
  global stack:    0
    size:6.000000, time:5.500000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:

IPA function summary for FlexCAN_IRQHandler/63 inlinable
  global time:     47.226070
  self size:       74
  global size:     178
  min size:       354
  self stack:      0
  global stack:    80
    size:111.500000, time:27.189572
    size:3.000000, time:0.500000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:3.000000, time:0.767346,  nonconst if:(op2 changed)
    size:4.000000, time:0.267346,  executed if:(op2 <= 31)
  loop iterations:(op2 changed || op1 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_ClearMsgBuffIntStatusFlag/7 call is unlikely and code size would grow
      loop depth: 1 freq:0.94 size: 3 time: 12callee size: 4 stack: 0
    FlexCAN_ClearMsgBuffIntStatusFlag/7 call is unlikely and code size would grow
      loop depth: 0 freq:0.01 size: 3 time: 12callee size: 4 stack: 0
    FlexCAN_GetMsgBuffIntStatusFlag/30 inlined
      loop depth: 0 freq:0.09 size: 4 time: 13callee size: 4 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0
      FlexCAN_GetMsgBuffIntStatusFlag.part.0/158 inlined
        loop depth: 0 freq:0.04 size: 4 time: 13callee size: 4 stack: 0
        Stack frame offset 0, callee self size 0, callee size 0
    FlexCAN_IRQHandlerTxMB/47 inlined
      loop depth: 0 freq:0.02 size: 3 time: 12callee size:36 stack:80
      Stack frame offset 0, callee self size 80, callee size 80
      FlexCAN_SetMsgBuffIntCmd/114 function body not available
        loop depth: 0 freq:0.00 size: 6 time: 15
         op3 is compile time invariant
      FlexCAN_SetMsgBuffIntCmd/114 function body not available
        loop depth: 0 freq:0.00 size: 6 time: 15
         op3 is compile time invariant
      FlexCAN_ClearMsgBuffIntStatusFlag/7 call is unlikely and code size would grow
        loop depth: 0 freq:0.01 size: 3 time: 12callee size: 4 stack: 0
      FlexCAN_GetMsgBuffTimestamp/128 function body not available
        loop depth: 0 freq:0.01 size: 4 time: 13
      FlexCAN_ClearMsgBuffIntStatusFlag/7 call is unlikely and code size would grow
        loop depth: 0 freq:0.00 size: 3 time: 12callee size: 4 stack: 0
      FlexCAN_GetMsgBuff/124 function body not available
        loop depth: 0 freq:0.01 size: 4 time: 13
         op2 is compile time invariant
      FlexCAN_LockRxMsgBuff/123 function body not available
        loop depth: 0 freq:0.01 size: 3 time: 12
      indirect call loop depth: 0 freq:0.01 size: 7 time: 19
    FlexCAN_IRQHandlerRxMB/46 --param max-inline-insns-auto limit reached
      loop depth: 0 freq:0.02 size: 3 time: 12callee size:44 stack:80
    FlexCAN_IRQHandlerRxFIFO/48 call is unlikely and code size would grow
      loop depth: 0 freq:0.01 size: 3 time: 12callee size:50 stack:80
    FlexCAN_ProcessSpuriousInterruptMB/49 inlined
      loop depth: 0 freq:0.04 size: 4 time: 13callee size:19 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0
      FlexCAN_ClearMsgBuffIntStatusFlag/7 call is unlikely and code size would grow
        loop depth: 1 freq:0.02 size: 3 time: 12callee size: 4 stack: 0
      FlexCAN_GetBuffStatusImask/9 inlined
        loop depth: 1 freq:0.12 size: 4 time: 13callee size: 4 stack: 0
        Stack frame offset 0, callee self size 0, callee size 0
      FlexCAN_GetBuffStatusFlag/8 call is unlikely and code size would grow
        loop depth: 1 freq:0.36 size: 4 time: 13callee size: 4 stack: 0
         op0 change 12.350000% of time
    FlexCAN_GetMsgBuffIntStatusFlag/264 inlined
      loop depth: 1 freq:1.12 size: 4 time: 13callee size: 4 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0
      FlexCAN_GetMsgBuffIntStatusFlag.part.0/265 inlined
        loop depth: 1 freq:0.56 size: 4 time: 13callee size: 4 stack: 0
        Stack frame offset 0, callee self size 0, callee size 0
    FlexCAN_GetMsgBuffIntStatusFlag/266 inlined
      loop depth: 0 freq:0.13 size: 4 time: 13callee size: 4 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0
      FlexCAN_GetMsgBuffIntStatusFlag.part.0/267 inlined
        loop depth: 0 freq:0.07 size: 4 time: 13callee size: 4 stack: 0
        Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for FlexCAN_Ip_GetTransferStatus/61 inlinable
  global time:     10.375007
  self size:       20
  global size:     20
  min size:       0
  self stack:      0
  global stack:    0
    size:9.000000, time:7.000000
    size:3.000000, time:0.500000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:4.000000, time:1.500000,  nonconst if:(op1 changed)
    size:3.000000, time:0.375007,  executed if:(op1 <= 31)
  array index:(op1 changed) && (op0 changed)
  calls:

IPA function summary for FlexCAN_Ip_ConfigRemoteResponseMb/60 inlinable
  global time:     16.657706
  self size:       75
  global size:     75
  min size:       60
  self stack:      16
  global stack:    16
    size:37.000000, time:10.933452
    size:5.000000, time:0.184719,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.500000,  nonconst if:(op2 changed)
    size:0.500000, time:0.062501,  executed if:(not inlined),  nonconst if:(op2[ref offset: 32] changed) && (not inlined)
    size:0.500000, time:0.062501,  nonconst if:(op2[ref offset: 32] changed)
  array index:(op0 changed)
  calls:
    FlexCAN_SetMsgBuffIntCmd/114 function body not available
      loop depth: 0 freq:0.01 size: 7 time: 16
       op3 is compile time invariant
    FlexCAN_SetTxMsgBuff/118 function body not available
      loop depth: 0 freq:0.03 size: 6 time: 15
       op1 is compile time invariant
    FlexCAN_GetMsgBuffRegion/117 function body not available
      loop depth: 0 freq:0.03 size: 4 time: 13
    FlexCAN_ClearMsgBuffIntStatusFlag/7 call is unlikely and code size would grow
      loop depth: 0 freq:0.03 size: 3 time: 12callee size: 4 stack: 0
    FlexCAN_IsMbOutOfRange/116 function body not available
      loop depth: 0 freq:0.06 size: 6 time: 15
    FlexCAN_GetMbPayloadSize/115 function body not available
      loop depth: 0 freq:0.13 size: 4 time: 13

IPA function summary for FlexCAN_Ip_ConfigRxFifo_Privileged/59 inlinable
  global time:     17.173706
  self size:       34
  global size:     34
  min size:       20
  self stack:      0
  global stack:    0
    size:20.000000, time:10.505001
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_Disable/108 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12
    FlexCAN_SetRxFifoFilter/127 function body not available
      loop depth: 0 freq:0.12 size: 4 time: 13
    FlexCAN_Enable/126 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12

IPA function summary for FlexCAN_Ip_RxFifoBlocking/58 inlinable
  global time:     68.215823
  self size:       18
  global size:     90
  min size:       112
  self stack:      0
  global stack:    4
    size:44.000000, time:26.127711
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:2.000000, time:1.500000,  nonconst if:(op0 changed)
    size:1.000000, time:0.164998,  nonconst if:(op2 changed)
  calls:
    FlexCAN_ProccessLegacyRxFIFO/42 inlined
      loop depth: 0 freq:0.16 size: 4 time: 13callee size:37 stack: 4
      Stack frame offset 0, callee self size 4, callee size 4
      FlexCAN_SetMsgBuffIntCmd/114 function body not available
        loop depth: 0 freq:0.03 size: 6 time: 15
         op2 is compile time invariant
         op3 is compile time invariant
      FlexCAN_SetMsgBuffIntCmd/114 function body not available
        loop depth: 0 freq:0.03 size: 6 time: 15
         op2 is compile time invariant
         op3 is compile time invariant
      FlexCAN_SetMsgBuffIntCmd/114 function body not available
        loop depth: 0 freq:0.03 size: 6 time: 15
         op2 is compile time invariant
         op3 is compile time invariant
      OsIf_GetElapsed/122 function body not available
        loop depth: 1 freq:1.46 size: 4 time: 13
         op0 is compile time invariant
         op1 is compile time invariant
      FlexCAN_IRQHandlerRxFIFO/48 call is unlikely and code size would grow
        loop depth: 2 freq:0.23 size: 3 time: 12callee size:50 stack:80
         op0 change 71.460000% of time
      FlexCAN_GetBuffStatusFlag/8 call is unlikely and code size would grow
        loop depth: 2 freq:0.70 size: 4 time: 13callee size: 4 stack: 0
         op0 change 23.580000% of time
      OsIf_GetCounter/121 function body not available
        loop depth: 0 freq:0.16 size: 3 time: 12
         op0 is compile time invariant
      OsIf_MicrosToTicks/120 function body not available
        loop depth: 0 freq:0.16 size: 4 time: 13
         op1 is compile time invariant
    FlexCAN_StartRxMessageFifoData/45 inlined
      loop depth: 0 freq:0.50 size: 4 time: 13callee size: 6 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0
      FlexCAN_StartRxMessageFifoData.part.0/161 --param max-inline-insns-auto limit reached
        loop depth: 0 freq:0.25 size: 4 time: 13callee size:20 stack: 0

IPA function summary for FlexCAN_Ip_RxFifo/57 inlinable
  global time:     11.750000
  self size:       12
  global size:     17
  min size:       16
  self stack:      0
  global stack:    0
    size:8.000000, time:6.000000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:2.000000, time:1.500000,  nonconst if:(op0 changed)
  calls:
    FlexCAN_StartRxMessageFifoData/268 inlined
      loop depth: 0 freq:0.50 size: 4 time: 13callee size: 6 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0
      FlexCAN_StartRxMessageFifoData.part.0/161 call is unlikely and code size would grow
        loop depth: 0 freq:0.25 size: 4 time: 13callee size:20 stack: 0

IPA function summary for FlexCAN_Ip_ReceiveBlocking/56 inlinable
  global time:     80.158218
  self size:       80
  global size:     80
  min size:       34
  self stack:      4
  global stack:    4
    size:28.000000, time:20.554627
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op4 changed)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:6.000000, time:3.755164,  nonconst if:(op3 changed)
    size:2.000000, time:0.138600,  executed if:(op3 == 0)
    size:2.000000, time:0.962002,  executed if:(op3 != 0)
  array index:(op1 changed) && (op0 changed)
  calls:
    FlexCAN_SetMsgBuffIntCmd/114 function body not available
      loop depth: 0 freq:0.06 size: 6 time: 15 predicate: (op3 == 0)
       op3 is compile time invariant
    OsIf_GetElapsed/122 function body not available
      loop depth: 1 freq:1.46 size: 4 time: 13
       op0 is compile time invariant
       op1 is compile time invariant
    FlexCAN_IRQHandlerRxMB/46 --param max-inline-insns-auto limit reached
      loop depth: 1 freq:0.16 size: 3 time: 12callee size:44 stack:80 predicate: (op3 != 0)
    FlexCAN_GetBuffStatusFlag/8 call is unlikely and code size would grow
      loop depth: 1 freq:0.48 size: 4 time: 13callee size: 4 stack: 0 predicate: (op3 != 0)
    OsIf_GetCounter/121 function body not available
      loop depth: 0 freq:0.16 size: 3 time: 12
       op0 is compile time invariant
    FlexCAN_SetMsgBuffIntCmd/114 function body not available
      loop depth: 0 freq:0.08 size: 7 time: 16 predicate: (op3 == 0)
       op3 is compile time invariant
    FlexCAN_StartRxMessageBufferData/43 call is unlikely and code size would grow
      loop depth: 0 freq:0.50 size: 6 time: 15callee size:13 stack: 0
    OsIf_MicrosToTicks/120 function body not available
      loop depth: 0 freq:1.00 size: 4 time: 13
       op1 is compile time invariant

IPA function summary for FlexCAN_Ip_Receive/55 inlinable
  global time:     18.402523
  self size:       28
  global size:     28
  min size:       12
  self stack:      0
  global stack:    0
    size:8.000000, time:7.000000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:2.000000, time:0.500000,  nonconst if:(op3 changed)
    size:1.000000, time:0.082501,  executed if:(op3 == 0)
  array index:(op0 changed)
  calls:
    FlexCAN_SetMsgBuffIntCmd/114 function body not available
      loop depth: 0 freq:0.08 size: 7 time: 16 predicate: (op3 == 0)
       op3 is compile time invariant
    FlexCAN_StartRxMessageBufferData/43 call is unlikely and code size would grow
      loop depth: 0 freq:0.50 size: 6 time: 15callee size:13 stack: 0

IPA function summary for FlexCAN_Ip_ConfigRxMb/54 inlinable
  global time:     22.273693
  self size:       52
  global size:     52
  min size:       48
  self stack:      16
  global stack:    16
    size:21.500000, time:9.895678
    size:4.500000, time:0.679136,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.500000,  nonconst if:(op2 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_SetRxMsgBuff/119 function body not available
      loop depth: 0 freq:0.12 size: 5 time: 14
       op2 is compile time invariant
    FlexCAN_SetRxMsgBuff/119 function body not available
      loop depth: 0 freq:0.12 size: 5 time: 14
       op2 is compile time invariant
    FlexCAN_SetRxMsgBuff/119 function body not available
      loop depth: 0 freq:0.12 size: 5 time: 14
       op2 is compile time invariant
    FlexCAN_ClearMsgBuffIntStatusFlag/7 call is unlikely and code size would grow
      loop depth: 0 freq:0.12 size: 3 time: 12callee size: 4 stack: 0
    FlexCAN_IsMbOutOfRange/116 function body not available
      loop depth: 0 freq:0.25 size: 6 time: 15

IPA function summary for FlexCAN_Ip_Send/53 inlinable
  global time:     12.840162
  self size:       39
  global size:     39
  min size:       28
  self stack:      0
  global stack:    0
    size:19.500000, time:9.281735
    size:3.500000, time:0.520624,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.500000,  nonconst if:(op2 changed)
  array index:(op0 changed)
  calls:
    FlexCAN_SetMsgBuffIntCmd/114 function body not available
      loop depth: 0 freq:0.01 size: 7 time: 16
       op3 is compile time invariant
    FlexCAN_StartSendData/44 --param max-inline-insns-auto limit reached
      loop depth: 0 freq:0.08 size: 7 time: 16callee size:35 stack:16

IPA function summary for FlexCAN_Ip_Init_Privileged/52 inlinable
  global time:     41.348173
  self size:       73
  global size:     154
  min size:       170
  self stack:      0
  global stack:    0
    size:76.500000, time:21.692633
    size:13.000000, time:4.830425,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.500000,  nonconst if:(op2 changed)
    size:0.500000, time:0.125000,  executed if:(not inlined),  nonconst if:(op2[ref offset: 192] changed) && (not inlined)
    size:2.500000, time:0.625000,  nonconst if:(op2[ref offset: 192] changed)
    size:0.500000, time:0.062501,  executed if:(op2[ref offset: 192] != 0) && (not inlined)
    size:5.500000, time:0.687513,  executed if:(op2[ref offset: 192] != 0)
  array index:(op0 changed)
  calls:
    FlexCAN_SetOperationMode/106 function body not available
      loop depth: 0 freq:0.06 size: 3 time: 12
    FlexCAN_SetTimeSegments/11 call is unlikely and code size would grow
      loop depth: 0 freq:0.03 size: 3 time: 12callee size:13 stack: 0
    FlexCAN_SetFDTimeSegments/10 call is unlikely and code size would grow
      loop depth: 0 freq:0.03 size: 3 time: 12callee size:14 stack: 0
    FlexCAN_SetExtendedTimeSegments/12 call is unlikely and code size would grow
      loop depth: 0 freq:0.03 size: 3 time: 12callee size:14 stack: 0
    FlexCAN_EnableExtCbt/17 inlined
      loop depth: 0 freq:0.06 size: 3 time: 12callee size: 4 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0
    FlexCAN_InitController/41 inlined
      loop depth: 0 freq:0.19 size: 4 time: 13callee size:44 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0
      FlexCAN_InitCtroll/40 inlined
        loop depth: 0 freq:0.07 size: 4 time: 13callee size:18 stack: 0
        Stack frame offset 0, callee self size 0, callee size 0
        FlexCAN_Disable/108 function body not available
          loop depth: 0 freq:0.01 size: 2 time: 11
        FlexCAN_EnterFreezeMode/107 function body not available
          loop depth: 0 freq:0.01 size: 2 time: 11
        FlexCAN_SetMaxMsgBuffNum/112 function body not available
          loop depth: 0 freq:0.03 size: 4 time: 13
        FlexCAN_SetPayloadSize/111 function body not available
          loop depth: 0 freq:0.03 size: 3 time: 12
        FlexCAN_Disable/108 function body not available
          loop depth: 0 freq:0.03 size: 2 time: 11
        FlexCAN_EnterFreezeMode/107 function body not available
          loop depth: 0 freq:0.03 size: 2 time: 11
        FlexCAN_InitRxFifo/39 inlined
          loop depth: 0 freq:0.07 size: 4 time: 13callee size: 5 stack: 0
          Stack frame offset 0, callee self size 0, callee size 0
          FlexCAN_EnableRxFifo/113 function body not available
            loop depth: 0 freq:0.02 size: 4 time: 13
      FlexCAN_ConfigCtrlOptions/110 function body not available
        loop depth: 0 freq:0.07 size: 3 time: 12
      FlexCAN_SetFDEnabled/269 inlined
        loop depth: 0 freq:0.02 size: 4 time: 13callee size: 9 stack: 0
        Stack frame offset 0, callee self size 0, callee size 0
      FlexCAN_IsFDAvailable/105 function body not available
        loop depth: 0 freq:0.07 size: 3 time: 12
      FlexCAN_Disable/108 function body not available
        loop depth: 0 freq:0.07 size: 2 time: 11
      FlexCAN_EnterFreezeMode/107 function body not available
        loop depth: 0 freq:0.07 size: 2 time: 11
      FlexCAN_Init/109 function body not available
        loop depth: 0 freq:0.13 size: 3 time: 12
      FlexCAN_SetClkSrc/29 inlined
        loop depth: 0 freq:0.13 size: 3 time: 12callee size: 4 stack: 0
        Stack frame offset 0, callee self size 0, callee size 0
      FlexCAN_Disable/108 function body not available
        loop depth: 0 freq:0.04 size: 3 time: 12
      FlexCAN_EnterFreezeMode/107 function body not available
        loop depth: 0 freq:0.11 size: 3 time: 12
    FlexCAN_IsFDAvailable/105 function body not available
      loop depth: 0 freq:0.13 size: 3 time: 12 predicate: (op2[ref offset: 192] != 0)

IPA function summary for FlexCAN_IRQHandlerRxFIFO/48 inlinable
  global time:     28.799756
  self size:       70
  global size:     101
  min size:       6
  self stack:      80
  global stack:    80
  estimated growth:88
    size:6.000000, time:5.300000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:8.000000, time:4.000000,  nonconst if:(op1 changed)
    size:3.000000, time:0.750000,  executed if:(op1 == 7)
    size:3.000000, time:0.750000,  executed if:(op1 == 6)
    size:26.000000, time:1.321696,  executed if:(op1 == 5)
    size:1.000000, time:0.016698,  executed if:(op1 == 5),  nonconst if:(op0 changed) && (op1 == 5)
  array index:(op0 changed)
  calls:
    FlexCAN_ClearMsgBuffIntStatusFlag/7 call is unlikely and code size would grow
      loop depth: 0 freq:0.25 size: 3 time: 12callee size: 4 stack: 0 predicate: (op1 == 7)
    FlexCAN_ClearMsgBuffIntStatusFlag/7 call is unlikely and code size would grow
      loop depth: 0 freq:0.25 size: 3 time: 12callee size: 4 stack: 0 predicate: (op1 == 6)
    FlexCAN_CompleteRxMessageFifoData/62 inlined
      loop depth: 0 freq:0.02 size: 2 time: 11callee size:18 stack: 0
      Stack frame offset 80, callee self size 0, callee size 0
      FlexCAN_SetMsgBuffIntCmd/114 function body not available
        loop depth: 0 freq:0.00 size: 6 time: 15 predicate: (op1 == 5)
         op2 is compile time invariant
         op3 is compile time invariant
      FlexCAN_SetMsgBuffIntCmd/114 function body not available
        loop depth: 0 freq:0.00 size: 6 time: 15 predicate: (op1 == 5)
         op2 is compile time invariant
         op3 is compile time invariant
      FlexCAN_SetMsgBuffIntCmd/114 function body not available
        loop depth: 0 freq:0.00 size: 6 time: 15 predicate: (op1 == 5)
         op2 is compile time invariant
         op3 is compile time invariant
    FlexCAN_ClearMsgBuffIntStatusFlag/7 call is unlikely and code size would grow
      loop depth: 0 freq:0.05 size: 3 time: 12callee size: 4 stack: 0 predicate: (op1 == 5)
    FlexCAN_ReadRxFifo/125 function body not available
      loop depth: 0 freq:0.05 size: 3 time: 12 predicate: (op1 == 5)
    indirect call loop depth: 0 freq:0.18 size: 7 time: 19predicate: (op1 == 7)
    indirect call loop depth: 0 freq:0.18 size: 7 time: 19predicate: (op1 == 6)
    indirect call loop depth: 0 freq:0.04 size: 7 time: 19predicate: (op1 == 5)

IPA function summary for FlexCAN_IRQHandlerRxMB/46 inlinable
  global time:     93.251900
  self size:       88
  global size:     88
  min size:       52
  self stack:      80
  global stack:    80
  estimated growth:158
    size:52.000000, time:34.265275
    size:3.000000, time:2.000000,  executed if:(not inlined)
  array index:(op0 changed)
  calls:
    FlexCAN_SetMsgBuffIntCmd/114 function body not available
      loop depth: 0 freq:0.14 size: 6 time: 15
       op3 is compile time invariant
    FlexCAN_SetMsgBuffIntCmd/114 function body not available
      loop depth: 0 freq:0.17 size: 6 time: 15
       op3 is compile time invariant
    FlexCAN_GetMsgBuffRegion/117 function body not available
      loop depth: 0 freq:0.17 size: 4 time: 13
    FlexCAN_ClearMsgBuffIntStatusFlag/7 call is unlikely and code size would grow
      loop depth: 0 freq:1.00 size: 3 time: 12callee size: 4 stack: 0
    FlexCAN_GetMsgBuff/124 function body not available
      loop depth: 0 freq:1.00 size: 4 time: 13
    FlexCAN_LockRxMsgBuff/123 function body not available
      loop depth: 0 freq:1.00 size: 3 time: 12
    indirect call loop depth: 0 freq:0.70 size: 7 time: 19

IPA function summary for FlexCAN_StartSendData/44 inlinable
  global time:     19.408763
  self size:       71
  global size:     71
  min size:       39
  self stack:      16
  global stack:    16
  estimated growth:43
    size:38.500000, time:10.595361
    size:6.500000, time:0.385850,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
    size:1.000000, time:0.500000,  nonconst if:(op2 changed)
    size:0.500000, time:0.125000,  executed if:(not inlined),  nonconst if:(op2[ref offset: 32] changed) && (not inlined)
    size:0.500000, time:0.125000,  nonconst if:(op2[ref offset: 32] changed)
  array index:(op1 changed) && (op0 changed)
  calls:
    FlexCAN_SetTxMsgBuff/118 function body not available
      loop depth: 0 freq:0.04 size: 6 time: 15
       op1 is compile time invariant
       op4 is compile time invariant
    FlexCAN_GetMsgBuffRegion/117 function body not available
      loop depth: 0 freq:0.04 size: 4 time: 13
    FlexCAN_ClearMsgBuffIntStatusFlag/7 call is unlikely and code size would grow
      loop depth: 0 freq:0.04 size: 3 time: 12callee size: 4 stack: 0
    FlexCAN_IsMbOutOfRange/116 function body not available
      loop depth: 0 freq:0.13 size: 6 time: 15
    FlexCAN_GetMbPayloadSize/115 function body not available
      loop depth: 0 freq:0.25 size: 4 time: 13

IPA function summary for FlexCAN_StartRxMessageBufferData/43 inlinable
  global time:     19.108755
  self size:       26
  global size:     26
  min size:       16
  self stack:      0
  global stack:    0
  estimated growth:8
    size:16.000000, time:9.608755
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op0 changed)
  array index:(op1 changed) && (op0 changed)
  calls:
    FlexCAN_IsMbOutOfRange/116 function body not available
      loop depth: 0 freq:0.50 size: 6 time: 15

IPA function summary for FlexCAN_SetExtendedTimeSegments/12 inlinable
  global time:     15.750000
  self size:       11
  global size:     28
  min size:       7
  self stack:      0
  global stack:    0
  estimated growth:-1
    size:6.500000, time:5.250000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op1 changed)
    size:1.500000, time:0.750000,  nonconst if:(op0[ref offset: 640] changed)
    size:2.500000, time:1.250000,  nonconst if:(op1[ref offset: 0] changed)
    size:1.500000, time:0.750000,  nonconst if:(op1[ref offset: 64] changed)
    size:1.000000, time:0.500000,  nonconst if:(op1[ref offset: 0] changed || op1[ref offset: 64] changed)
    size:2.500000, time:1.250000,  nonconst if:(op1[ref offset: 32] changed)
    size:1.000000, time:0.500000,  nonconst if:(op1[ref offset: 0] changed || op1[ref offset: 64] changed || op1[ref offset: 32] changed)
    size:2.500000, time:1.250000,  nonconst if:(op1[ref offset: 96] changed)
    size:1.000000, time:0.500000,  nonconst if:(op1[ref offset: 0] changed || op1[ref offset: 64] changed || op1[ref offset: 32] changed || op1[ref offset: 96] changed)
    size:2.500000, time:1.250000,  nonconst if:(op1[ref offset: 128] changed)
    size:1.000000, time:0.500000,  nonconst if:(op1[ref offset: 0] changed || op1[ref offset: 64] changed || op1[ref offset: 32] changed || op1[ref offset: 96] changed || op1[ref offset: 128] changed)
  calls:
    FlexCAN_SetExtendedTimeSegments.part.0/157 inlined
      loop depth: 0 freq:0.50 size: 3 time: 12callee size:13 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for FlexCAN_SetTimeSegments/11 inlinable
  global time:     15.250000
  self size:       11
  global size:     27
  min size:       7
  self stack:      0
  global stack:    0
  estimated growth:-1
    size:6.500000, time:5.250000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op1 changed)
    size:1.500000, time:0.750000,  nonconst if:(op0[ref offset: 32] changed)
    size:1.500000, time:0.750000,  nonconst if:(op1[ref offset: 0] changed)
    size:2.500000, time:1.250000,  nonconst if:(op1[ref offset: 64] changed)
    size:1.000000, time:0.500000,  nonconst if:(op1[ref offset: 0] changed || op1[ref offset: 64] changed)
    size:2.500000, time:1.250000,  nonconst if:(op1[ref offset: 32] changed)
    size:1.000000, time:0.500000,  nonconst if:(op1[ref offset: 0] changed || op1[ref offset: 64] changed || op1[ref offset: 32] changed)
    size:1.500000, time:0.750000,  nonconst if:(op1[ref offset: 96] changed)
    size:1.000000, time:0.500000,  nonconst if:(op1[ref offset: 0] changed || op1[ref offset: 64] changed || op1[ref offset: 32] changed || op1[ref offset: 96] changed)
    size:2.500000, time:1.250000,  nonconst if:(op1[ref offset: 128] changed)
    size:1.000000, time:0.500000,  nonconst if:(op1[ref offset: 0] changed || op1[ref offset: 64] changed || op1[ref offset: 32] changed || op1[ref offset: 96] changed || op1[ref offset: 128] changed)
  calls:
    FlexCAN_SetTimeSegments.part.0/155 inlined
      loop depth: 0 freq:0.50 size: 3 time: 12callee size:13 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for FlexCAN_SetFDTimeSegments/10 inlinable
  global time:     15.750000
  self size:       11
  global size:     28
  min size:       7
  self stack:      0
  global stack:    0
  estimated growth:-1
    size:6.500000, time:5.250000
    size:3.000000, time:1.000000,  executed if:(not inlined)
    size:1.000000, time:1.000000,  nonconst if:(op1 changed)
    size:1.500000, time:0.750000,  nonconst if:(op0[ref offset: 24608] changed)
    size:2.500000, time:1.250000,  nonconst if:(op1[ref offset: 0] changed)
    size:1.500000, time:0.750000,  nonconst if:(op1[ref offset: 64] changed)
    size:1.000000, time:0.500000,  nonconst if:(op1[ref offset: 0] changed || op1[ref offset: 64] changed)
    size:2.500000, time:1.250000,  nonconst if:(op1[ref offset: 32] changed)
    size:1.000000, time:0.500000,  nonconst if:(op1[ref offset: 0] changed || op1[ref offset: 64] changed || op1[ref offset: 32] changed)
    size:2.500000, time:1.250000,  nonconst if:(op1[ref offset: 96] changed)
    size:1.000000, time:0.500000,  nonconst if:(op1[ref offset: 0] changed || op1[ref offset: 64] changed || op1[ref offset: 32] changed || op1[ref offset: 96] changed)
    size:2.500000, time:1.250000,  nonconst if:(op1[ref offset: 128] changed)
    size:1.000000, time:0.500000,  nonconst if:(op1[ref offset: 0] changed || op1[ref offset: 64] changed || op1[ref offset: 32] changed || op1[ref offset: 96] changed || op1[ref offset: 128] changed)
  calls:
    FlexCAN_SetFDTimeSegments.part.0/153 inlined
      loop depth: 0 freq:0.50 size: 3 time: 12callee size:13 stack: 0
      Stack frame offset 0, callee self size 0, callee size 0

IPA function summary for FlexCAN_GetBuffStatusFlag/8 inlinable
  global time:     6.000000
  self size:       9
  global size:     9
  min size:       0
  self stack:      0
  global stack:    0
  estimated growth:9
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:2.000000, time:2.000000,  nonconst if:(op1 changed)
    size:0.500000, time:0.250000,  executed if:(op1 <= 31) && (not inlined),  nonconst if:(op0[ref offset: 384] changed) && (op1 <= 31) && (not inlined)
    size:0.500000, time:0.250000,  executed if:(op1 <= 31),  nonconst if:(op0[ref offset: 384] changed) && (op1 <= 31)
    size:1.000000, time:0.500000,  executed if:(op1 <= 31),  nonconst if:(op1 changed) && (op1 <= 31)
    size:2.000000, time:1.000000,  executed if:(op1 <= 31),  nonconst if:(op1 changed || op0[ref offset: 384] changed) && (op1 <= 31)
  calls:

IPA function summary for FlexCAN_ClearMsgBuffIntStatusFlag/7 inlinable
  global time:     6.500000
  self size:       8
  global size:     8
  min size:       0
  self stack:      0
  global stack:    0
  estimated growth:28
    size:0.000000, time:0.000000
    size:3.000000, time:2.000000,  executed if:(not inlined)
    size:4.000000, time:4.000000,  nonconst if:(op1 changed)
    size:0.500000, time:0.250000,  executed if:(op1 <= 31) && (not inlined)
    size:0.500000, time:0.250000,  executed if:(op1 <= 31)
  calls:

Symbol table:

FlexCAN_SetFDEnabled/269 (FlexCAN_SetFDEnabled) @062c6ee0
  Type: function definition analyzed
  Visibility:
  next sharing asm name: 4
  References: 
  Referring: 
  Function FlexCAN_SetFDEnabled/269 is inline copy in FlexCAN_Ip_Init_Privileged/52
  Clone of FlexCAN_SetFDEnabled/4
  Availability: local
  Function flags: count:4684 (estimated locally) body local optimize_size
  Called by: FlexCAN_InitController/41 (inlined) (4684 (estimated locally),0.02 per call) 
  Calls: 
FlexCAN_StartRxMessageFifoData/268 (FlexCAN_StartRxMessageFifoData) @062ad540
  Type: function definition analyzed
  Visibility:
  next sharing asm name: 45
  References: 
  Referring: 
  Function FlexCAN_StartRxMessageFifoData/268 is inline copy in FlexCAN_Ip_RxFifo/57
  Clone of FlexCAN_StartRxMessageFifoData/45
  Availability: local
  Function flags: count:107374 (estimated locally) body local optimize_size
  Called by: FlexCAN_Ip_RxFifo/57 (inlined) (107374 (estimated locally),0.50 per call) 
  Calls: FlexCAN_StartRxMessageFifoData.part.0/161 (53687 (estimated locally),0.25 per call) 
FlexCAN_GetMsgBuffIntStatusFlag.part.0/267 (FlexCAN_GetMsgBuffIntStatusFlag.part.0) @062b10e0
  Type: function definition analyzed
  Visibility: artificial
  next sharing asm name: 265
  References: 
  Referring: 
  Function FlexCAN_GetMsgBuffIntStatusFlag.part.0/267 is inline copy in FlexCAN_IRQHandler/63
  Clone of FlexCAN_GetMsgBuffIntStatusFlag.part.0/158
  Availability: local
  Function flags: count:14353 (estimated locally) first_run:1 body local split_part optimize_size
  Called by: FlexCAN_GetMsgBuffIntStatusFlag/266 (inlined) (14353 (estimated locally),0.07 per call) 
  Calls: 
FlexCAN_GetMsgBuffIntStatusFlag/266 (FlexCAN_GetMsgBuffIntStatusFlag) @062ce0e0
  Type: function definition analyzed
  Visibility:
  next sharing asm name: 264
  References: 
  Referring: 
  Function FlexCAN_GetMsgBuffIntStatusFlag/266 is inline copy in FlexCAN_IRQHandler/63
  Clone of FlexCAN_GetMsgBuffIntStatusFlag/30
  Availability: local
  Function flags: count:28706 (estimated locally) body local optimize_size
  Called by: FlexCAN_IRQHandler/63 (inlined) (28706 (estimated locally),0.13 per call) 
  Calls: FlexCAN_GetMsgBuffIntStatusFlag.part.0/267 (inlined) (14353 (estimated locally),0.07 per call) 
FlexCAN_GetMsgBuffIntStatusFlag.part.0/265 (FlexCAN_GetMsgBuffIntStatusFlag.part.0) @062c1620
  Type: function definition analyzed
  Visibility: artificial
  next sharing asm name: 158
  previous sharing asm name: 267
  References: 
  Referring: 
  Function FlexCAN_GetMsgBuffIntStatusFlag.part.0/265 is inline copy in FlexCAN_IRQHandler/63
  Clone of FlexCAN_GetMsgBuffIntStatusFlag.part.0/158
  Availability: local
  Function flags: count:119821 (estimated locally) first_run:1 body local split_part optimize_size
  Called by: FlexCAN_GetMsgBuffIntStatusFlag/264 (inlined) (119821 (estimated locally),0.56 per call) 
  Calls: 
FlexCAN_GetMsgBuffIntStatusFlag/264 (FlexCAN_GetMsgBuffIntStatusFlag) @0616fc40
  Type: function definition analyzed
  Visibility:
  next sharing asm name: 30
  previous sharing asm name: 266
  References: 
  Referring: 
  Function FlexCAN_GetMsgBuffIntStatusFlag/264 is inline copy in FlexCAN_IRQHandler/63
  Clone of FlexCAN_GetMsgBuffIntStatusFlag/30
  Availability: local
  Function flags: count:239641 (estimated locally) body local optimize_size
  Called by: FlexCAN_IRQHandler/63 (inlined) (239641 (estimated locally),1.12 per call) 
  Calls: FlexCAN_GetMsgBuffIntStatusFlag.part.0/265 (inlined) (119821 (estimated locally),0.56 per call) 
FlexCAN_StartRxMessageFifoData.part.0/161 (FlexCAN_StartRxMessageFifoData.part.0) @062c10e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: local
  Function flags: count:1073741824 (estimated locally) first_run:1 body local split_part optimize_size
  Called by: FlexCAN_StartRxMessageFifoData/268 (53687 (estimated locally),0.25 per call) FlexCAN_StartRxMessageFifoData/45 (53687 (estimated locally),0.25 per call) 
  Calls: FlexCAN_SetMsgBuffIntCmd/114 (115158811 (estimated locally),0.11 per call) FlexCAN_SetMsgBuffIntCmd/114 (115158811 (estimated locally),0.11 per call) FlexCAN_SetMsgBuffIntCmd/114 (115158811 (estimated locally),0.11 per call) 
FlexCAN_GetMsgBuffIntStatusFlag.part.0/158 (FlexCAN_GetMsgBuffIntStatusFlag.part.0) @062c67e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  previous sharing asm name: 265
  References: 
  Referring: 
  Function FlexCAN_GetMsgBuffIntStatusFlag.part.0/158 is inline copy in FlexCAN_IRQHandler/63
  Availability: local
  Function flags: count:9617 (estimated locally) first_run:1 body local split_part optimize_size
  Called by: FlexCAN_GetMsgBuffIntStatusFlag/30 (inlined) (9617 (estimated locally),0.04 per call) 
  Calls: 
FlexCAN_SetExtendedTimeSegments.part.0/157 (FlexCAN_SetExtendedTimeSegments.part.0) @062c6460
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Function FlexCAN_SetExtendedTimeSegments.part.0/157 is inline copy in FlexCAN_SetExtendedTimeSegments/12
  Availability: local
  Function flags: count:107374 (estimated locally) first_run:1 body local split_part optimize_size
  Called by: FlexCAN_SetExtendedTimeSegments/12 (inlined) (107374 (estimated locally),0.50 per call) 
  Calls: 
FlexCAN_SetTimeSegments.part.0/155 (FlexCAN_SetTimeSegments.part.0) @062c60e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Function FlexCAN_SetTimeSegments.part.0/155 is inline copy in FlexCAN_SetTimeSegments/11
  Availability: local
  Function flags: count:107374 (estimated locally) first_run:1 body local split_part optimize_size
  Called by: FlexCAN_SetTimeSegments/11 (inlined) (107374 (estimated locally),0.50 per call) 
  Calls: 
FlexCAN_SetFDTimeSegments.part.0/153 (FlexCAN_SetFDTimeSegments.part.0) @062c1d20
  Type: function definition analyzed
  Visibility: prevailing_def_ironly artificial
  References: 
  Referring: 
  Function FlexCAN_SetFDTimeSegments.part.0/153 is inline copy in FlexCAN_SetFDTimeSegments/10
  Availability: local
  Function flags: count:107374 (estimated locally) first_run:1 body local split_part optimize_size
  Called by: FlexCAN_SetFDTimeSegments/10 (inlined) (107374 (estimated locally),0.50 per call) 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_20/151 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_20) @0641dc40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_ManualBusOffRecovery/104 (17717 (estimated locally),0.08 per call) 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_20/150 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_20) @0641db60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_ManualBusOffRecovery/104 (17717 (estimated locally),0.08 per call) 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_10/149 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_10) @0641d7e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_SetListenOnlyMode_Privileged/102 (26575 (estimated locally),0.12 per call) 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_10/148 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_10) @0641d700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_SetListenOnlyMode_Privileged/102 (26575 (estimated locally),0.12 per call) 
  Calls: 
FLEXCAN_ClearMsgBuffIntCmd/147 (FLEXCAN_ClearMsgBuffIntCmd) @0641d0e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_AbortTransfer/99 (12823 (estimated locally),0.06 per call) FlexCAN_AbortRxTransfer/51 (574 (estimated locally),0.00 per call) 
  Calls: 
FlexCAN_SetErrIntCmd/146 (FlexCAN_SetErrIntCmd) @0640eee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_SetErrorInt_Privileged/98 (5154 (estimated locally),0.02 per call) FlexCAN_Ip_SetErrorInt_Privileged/98 (5154 (estimated locally),0.02 per call) FlexCAN_Ip_SetErrorInt_Privileged/98 (15617 (estimated locally),0.07 per call) FlexCAN_Ip_SetErrorInt_Privileged/98 (15617 (estimated locally),0.07 per call) FlexCAN_Ip_SetErrorInt_Privileged/98 (15617 (estimated locally),0.07 per call) 
  Calls: 
FlexCAN_DisableInterrupts/145 (FlexCAN_DisableInterrupts) @0640ec40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_DisableInterrupts_Privileged/97 (44539 (estimated locally),0.21 per call) 
  Calls: 
FlexCAN_EnableInterrupts/144 (FlexCAN_EnableInterrupts) @0640ea80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_EnableInterrupts_Privileged/96 (44539 (estimated locally),0.21 per call) 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_17/143 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_17) @0640e620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/93 (26575 (estimated locally),0.12 per call) 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_17/142 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_17) @0640e540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/93 (26575 (estimated locally),0.12 per call) 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_16/141 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_16) @0640e2a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_SetTDCOffset_Privileged/92 (13288 (estimated locally),0.06 per call) 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_16/140 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_16) @0640e1c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_SetTDCOffset_Privileged/92 (13288 (estimated locally),0.06 per call) 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_15/139 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_15) @063fdd20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_SetBitrateCbt_Privileged/90 (6644 (estimated locally),0.03 per call) 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_15/138 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_15) @063fdc40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_SetBitrateCbt_Privileged/90 (6644 (estimated locally),0.03 per call) 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_09/137 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_09) @063fd8c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_ClearTDCFail/87 (107374 (estimated locally),0.50 per call) 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_09/136 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_09) @063fd7e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_ClearTDCFail/87 (107374 (estimated locally),0.50 per call) 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_14/135 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_14) @063fd2a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_SetBitrate_Privileged/85 (13288 (estimated locally),0.06 per call) 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_14/134 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_14) @063fd1c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_SetBitrate_Privileged/85 (13288 (estimated locally),0.06 per call) 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_08/133 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_08) @063e7ee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_SetRxMaskType_Privileged/84 (26575 (estimated locally),0.12 per call) 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_08/132 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_08) @063e7e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_SetRxMaskType_Privileged/84 (26575 (estimated locally),0.12 per call) 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_07/131 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_07) @063e7b60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_SetStartMode_Privileged/82 (107374 (estimated locally),0.50 per call) 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_07/130 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_07) @063e7a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_SetStartMode_Privileged/82 (107374 (estimated locally),0.50 per call) 
  Calls: 
FlexCAN_ExitFreezeMode/129 (FlexCAN_ExitFreezeMode) @063ceee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_SetStartMode_Privileged/82 (107374 (estimated locally),0.50 per call) FlexCAN_Ip_ExitFreezeMode_Privileged/73 (1073741824 (estimated locally),1.00 per call) 
  Calls: 
FlexCAN_GetMsgBuffTimestamp/128 (FlexCAN_GetMsgBuffTimestamp) @063ce000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_MainFunctionWrite/79 (35433 (estimated locally),0.16 per call) FlexCAN_IRQHandlerTxMB/47 (1946 (estimated locally),0.01 per call) 
  Calls: 
FlexCAN_SetRxFifoFilter/127 (FlexCAN_SetRxFifoFilter) @063ae9a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_ConfigRxFifo_Privileged/59 (26575 (estimated locally),0.12 per call) 
  Calls: 
FlexCAN_Enable/126 (FlexCAN_Enable) @063ae8c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_SetListenOnlyMode_Privileged/102 (27380 (estimated locally),0.13 per call) FlexCAN_Ip_SetRxMb15Mask_Privileged/101 (27380 (estimated locally),0.13 per call) FlexCAN_Ip_SetRxMb14Mask_Privileged/100 (27380 (estimated locally),0.13 per call) FlexCAN_Ip_SetErrorInt_Privileged/98 (27380 (estimated locally),0.13 per call) FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/93 (27380 (estimated locally),0.13 per call) FlexCAN_Ip_SetTDCOffset_Privileged/92 (27380 (estimated locally),0.13 per call) FlexCAN_Ip_SetBitrateCbt_Privileged/90 (13690 (estimated locally),0.06 per call) FlexCAN_Ip_SetBitrate_Privileged/85 (13690 (estimated locally),0.06 per call) FlexCAN_Ip_SetRxMaskType_Privileged/84 (27380 (estimated locally),0.13 per call) FlexCAN_Ip_SetRxFifoGlobalMask_Privileged/75 (27380 (estimated locally),0.13 per call) FlexCAN_Ip_SetRxIndividualMask_Privileged/74 (11568 (estimated locally),0.05 per call) FlexCAN_Ip_SetRxMbGlobalMask_Privileged/71 (27380 (estimated locally),0.13 per call) FlexCAN_Ip_ConfigRxFifo_Privileged/59 (27380 (estimated locally),0.13 per call) 
  Calls: 
FlexCAN_ReadRxFifo/125 (FlexCAN_ReadRxFifo) @063ae620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_IRQHandlerRxFIFO/48 (54331336 (estimated locally),0.05 per call) 
  Calls: 
FlexCAN_GetMsgBuff/124 (FlexCAN_GetMsgBuff) @0639dee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_IRQHandlerTxMB/47 (1946 (estimated locally),0.01 per call) FlexCAN_IRQHandlerRxMB/46 (1073741823 (estimated locally),1.00 per call) 
  Calls: 
FlexCAN_LockRxMsgBuff/123 (FlexCAN_LockRxMsgBuff) @0639de00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_IRQHandlerTxMB/47 (1946 (estimated locally),0.01 per call) FlexCAN_IRQHandlerRxMB/46 (1073741823 (estimated locally),1.00 per call) 
  Calls: 
OsIf_GetElapsed/122 (OsIf_GetElapsed) @0639da80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_ManualBusOffRecovery/104 (156507 (estimated locally),0.73 per call) FlexCAN_Ip_SendBlocking/70 (17560 (estimated locally),0.08 per call) FlexCAN_Ip_SendBlocking/70 (156507 (estimated locally),0.73 per call) FlexCAN_Ip_ReceiveBlocking/56 (313013 (estimated locally),1.46 per call) FlexCAN_ProccessLegacyRxFIFO/42 (313009 (estimated locally),1.46 per call) FlexCAN_AbortTxTransfer/50 (22924 (estimated locally),0.11 per call) 
  Calls: 
OsIf_GetCounter/121 (OsIf_GetCounter) @0639d9a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_ManualBusOffRecovery/104 (17717 (estimated locally),0.08 per call) FlexCAN_Ip_SendBlocking/70 (1988 (estimated locally),0.01 per call) FlexCAN_Ip_SendBlocking/70 (17717 (estimated locally),0.08 per call) FlexCAN_Ip_ReceiveBlocking/56 (35433 (estimated locally),0.16 per call) FlexCAN_ProccessLegacyRxFIFO/42 (35433 (estimated locally),0.16 per call) FlexCAN_AbortTxTransfer/50 (2595 (estimated locally),0.01 per call) 
  Calls: 
OsIf_MicrosToTicks/120 (OsIf_MicrosToTicks) @0639d8c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_ManualBusOffRecovery/104 (214748 (estimated locally),1.00 per call) FlexCAN_Ip_SendBlocking/70 (1988 (estimated locally),0.01 per call) FlexCAN_Ip_SendBlocking/70 (214748 (estimated locally),1.00 per call) FlexCAN_Ip_ReceiveBlocking/56 (214748 (estimated locally),1.00 per call) FlexCAN_ProccessLegacyRxFIFO/42 (35433 (estimated locally),0.16 per call) FlexCAN_AbortTxTransfer/50 (2595 (estimated locally),0.01 per call) 
  Calls: 
FlexCAN_SetRxMsgBuff/119 (FlexCAN_SetRxMsgBuff) @0639d460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_ConfigRxMb/54 (25646 (estimated locally),0.12 per call) FlexCAN_Ip_ConfigRxMb/54 (25646 (estimated locally),0.12 per call) FlexCAN_Ip_ConfigRxMb/54 (25646 (estimated locally),0.12 per call) 
  Calls: 
FlexCAN_SetTxMsgBuff/118 (FlexCAN_SetTxMsgBuff) @0639d1c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_ConfigRemoteResponseMb/60 (6412 (estimated locally),0.03 per call) FlexCAN_StartSendData/44 (8335 (estimated locally),0.04 per call) 
  Calls: 
FlexCAN_GetMsgBuffRegion/117 (FlexCAN_GetMsgBuffRegion) @0639d0e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_SendBlocking/70 (1988 (estimated locally),0.01 per call) FlexCAN_Ip_ConfigRemoteResponseMb/60 (6412 (estimated locally),0.03 per call) FlexCAN_AbortRxTransfer/51 (856 (estimated locally),0.00 per call) FlexCAN_AbortRxTransfer/51 (574 (estimated locally),0.00 per call) FlexCAN_IRQHandlerRxMB/46 (177167401 (estimated locally),0.17 per call) FlexCAN_AbortTxTransfer/50 (2595 (estimated locally),0.01 per call) FlexCAN_StartSendData/44 (8335 (estimated locally),0.04 per call) 
  Calls: 
FlexCAN_IsMbOutOfRange/116 (FlexCAN_IsMbOutOfRange) @0639d000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_ConfigRemoteResponseMb/60 (13422 (estimated locally),0.06 per call) FlexCAN_Ip_ConfigRxMb/54 (53687 (estimated locally),0.25 per call) FlexCAN_StartSendData/44 (26844 (estimated locally),0.13 per call) FlexCAN_StartRxMessageBufferData/43 (107374 (estimated locally),0.50 per call) 
  Calls: 
FlexCAN_GetMbPayloadSize/115 (FlexCAN_GetMbPayloadSize) @06389ee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_ConfigRemoteResponseMb/60 (26844 (estimated locally),0.13 per call) FlexCAN_StartSendData/44 (53687 (estimated locally),0.25 per call) 
  Calls: 
FlexCAN_SetMsgBuffIntCmd/114 (FlexCAN_SetMsgBuffIntCmd) @06389c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_ConfigRemoteResponseMb/60 (2116 (estimated locally),0.01 per call) FlexCAN_Ip_ReceiveBlocking/56 (12047 (estimated locally),0.06 per call) FlexCAN_Ip_ReceiveBlocking/56 (17717 (estimated locally),0.08 per call) FlexCAN_Ip_Receive/55 (17717 (estimated locally),0.08 per call) FlexCAN_Ip_Send/53 (2923 (estimated locally),0.01 per call) FlexCAN_IRQHandlerTxMB/47 (536 (estimated locally),0.00 per call) FlexCAN_IRQHandlerTxMB/47 (642 (estimated locally),0.00 per call) FlexCAN_ProccessLegacyRxFIFO/42 (5889 (estimated locally),0.03 per call) FlexCAN_ProccessLegacyRxFIFO/42 (5889 (estimated locally),0.03 per call) FlexCAN_ProccessLegacyRxFIFO/42 (5889 (estimated locally),0.03 per call) FlexCAN_IRQHandlerRxMB/46 (147934780 (estimated locally),0.14 per call) FlexCAN_IRQHandlerRxMB/46 (177167401 (estimated locally),0.17 per call) FlexCAN_CompleteRxMessageFifoData/62 (2958306 (estimated locally),0.00 per call) FlexCAN_CompleteRxMessageFifoData/62 (2958306 (estimated locally),0.00 per call) FlexCAN_CompleteRxMessageFifoData/62 (2958306 (estimated locally),0.00 per call) FlexCAN_StartRxMessageFifoData.part.0/161 (115158811 (estimated locally),0.11 per call) FlexCAN_StartRxMessageFifoData.part.0/161 (115158811 (estimated locally),0.11 per call) FlexCAN_StartRxMessageFifoData.part.0/161 (115158811 (estimated locally),0.11 per call) 
  Calls: 
FlexCAN_EnableRxFifo/113 (FlexCAN_EnableRxFifo) @06389700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_InitRxFifo/39 (4684 (estimated locally),0.02 per call) 
  Calls: 
FlexCAN_SetMaxMsgBuffNum/112 (FlexCAN_SetMaxMsgBuffNum) @06389460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_InitCtroll/40 (7097 (estimated locally),0.03 per call) 
  Calls: 
FlexCAN_SetPayloadSize/111 (FlexCAN_SetPayloadSize) @06389380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_InitCtroll/40 (7097 (estimated locally),0.03 per call) 
  Calls: 
FlexCAN_ConfigCtrlOptions/110 (FlexCAN_ConfigCtrlOptions) @0637f540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_InitController/41 (14193 (estimated locally),0.07 per call) 
  Calls: 
FlexCAN_Init/109 (FlexCAN_Init) @0637f2a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_InitController/41 (28387 (estimated locally),0.13 per call) 
  Calls: 
FlexCAN_Disable/108 (FlexCAN_Disable) @0637f000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_SetListenOnlyMode_Privileged/102 (27380 (estimated locally),0.13 per call) FlexCAN_Ip_SetRxMb15Mask_Privileged/101 (27380 (estimated locally),0.13 per call) FlexCAN_Ip_SetRxMb14Mask_Privileged/100 (27380 (estimated locally),0.13 per call) FlexCAN_Ip_SetErrorInt_Privileged/98 (25394 (estimated locally),0.12 per call) FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/93 (27380 (estimated locally),0.13 per call) FlexCAN_Ip_SetTDCOffset_Privileged/92 (13690 (estimated locally),0.06 per call) FlexCAN_Ip_SetBitrateCbt_Privileged/90 (13690 (estimated locally),0.06 per call) FlexCAN_Ip_SetBitrate_Privileged/85 (13690 (estimated locally),0.06 per call) FlexCAN_Ip_SetRxMaskType_Privileged/84 (27380 (estimated locally),0.13 per call) FlexCAN_Ip_SetStopMode_Privileged/83 (35433 (estimated locally),0.16 per call) FlexCAN_Ip_Deinit_Privileged/76 (35433 (estimated locally),0.16 per call) FlexCAN_Ip_SetRxFifoGlobalMask_Privileged/75 (27380 (estimated locally),0.13 per call) FlexCAN_Ip_SetRxIndividualMask_Privileged/74 (11568 (estimated locally),0.05 per call) FlexCAN_Ip_SetRxMbGlobalMask_Privileged/71 (27380 (estimated locally),0.13 per call) FlexCAN_Ip_ConfigRxFifo_Privileged/59 (27380 (estimated locally),0.13 per call) FlexCAN_InitController/41 (14193 (estimated locally),0.07 per call) FlexCAN_InitController/41 (7840 (estimated locally),0.04 per call) FlexCAN_InitCtroll/40 (2342 (estimated locally),0.01 per call) FlexCAN_InitCtroll/40 (7097 (estimated locally),0.03 per call) 
  Calls: 
FlexCAN_EnterFreezeMode/107 (FlexCAN_EnterFreezeMode) @0637fee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_SetStopMode_Privileged/83 (107374 (estimated locally),0.50 per call) FlexCAN_Ip_Deinit_Privileged/76 (107374 (estimated locally),0.50 per call) FlexCAN_Ip_EnterFreezeMode_Privileged/72 (1073741824 (estimated locally),1.00 per call) FlexCAN_InitController/41 (14193 (estimated locally),0.07 per call) FlexCAN_InitController/41 (23756 (estimated locally),0.11 per call) FlexCAN_InitCtroll/40 (2342 (estimated locally),0.01 per call) FlexCAN_InitCtroll/40 (7097 (estimated locally),0.03 per call) 
  Calls: 
FlexCAN_SetOperationMode/106 (FlexCAN_SetOperationMode) @0637fc40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_Init_Privileged/52 (13288 (estimated locally),0.06 per call) 
  Calls: 
FlexCAN_IsFDAvailable/105 (FlexCAN_IsFDAvailable) @0637fb60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: FlexCAN_Ip_SetTDCOffset_Privileged/92 (107374 (estimated locally),0.50 per call) FlexCAN_Ip_Init_Privileged/52 (26844 (estimated locally),0.13 per call) FlexCAN_InitController/41 (14193 (estimated locally),0.07 per call) FlexCAN_SetRegDefaultVal/36 (35433 (estimated locally),0.16 per call) 
  Calls: 
FlexCAN_Ip_ManualBusOffRecovery/104 (FlexCAN_Ip_ManualBusOffRecovery) @0637f700
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: OsIf_GetElapsed/122 (156507 (estimated locally),0.73 per call) OsIf_GetCounter/121 (17717 (estimated locally),0.08 per call) SchM_Exit_Can_CAN_EXCLUSIVE_AREA_20/151 (17717 (estimated locally),0.08 per call) SchM_Enter_Can_CAN_EXCLUSIVE_AREA_20/150 (17717 (estimated locally),0.08 per call) OsIf_MicrosToTicks/120 (214748 (estimated locally),1.00 per call) 
FlexCAN_Ip_GetListenOnlyMode/103 (FlexCAN_Ip_GetListenOnlyMode) @0637f460
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
FlexCAN_Ip_SetListenOnlyMode_Privileged/102 (FlexCAN_Ip_SetListenOnlyMode_Privileged) @0637f1c0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_Disable/108 (27380 (estimated locally),0.13 per call) SchM_Exit_Can_CAN_EXCLUSIVE_AREA_10/149 (26575 (estimated locally),0.12 per call) FlexCAN_SetListenOnlyMode/5 (inlined) (26575 (estimated locally),0.12 per call) SchM_Enter_Can_CAN_EXCLUSIVE_AREA_10/148 (26575 (estimated locally),0.12 per call) FlexCAN_Enable/126 (27380 (estimated locally),0.13 per call) 
FlexCAN_Ip_SetRxMb15Mask_Privileged/101 (FlexCAN_Ip_SetRxMb15Mask_Privileged) @06202d20
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_Disable/108 (27380 (estimated locally),0.13 per call) FlexCAN_Enable/126 (27380 (estimated locally),0.13 per call) 
FlexCAN_Ip_SetRxMb14Mask_Privileged/100 (FlexCAN_Ip_SetRxMb14Mask_Privileged) @062027e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_Disable/108 (27380 (estimated locally),0.13 per call) FlexCAN_Enable/126 (27380 (estimated locally),0.13 per call) 
FlexCAN_Ip_AbortTransfer/99 (FlexCAN_Ip_AbortTransfer) @062022a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_AbortRxTransfer/51 (inlined) (2595 (estimated locally),0.01 per call) FlexCAN_AbortTxTransfer/50 (inlined) (2595 (estimated locally),0.01 per call) FLEXCAN_ClearMsgBuffIntCmd/147 (12823 (estimated locally),0.06 per call) 
FlexCAN_Ip_SetErrorInt_Privileged/98 (FlexCAN_Ip_SetErrorInt_Privileged) @06202ee0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_Disable/108 (25394 (estimated locally),0.12 per call) FlexCAN_SetErrIntCmd/146 (5154 (estimated locally),0.02 per call) FlexCAN_SetErrIntCmd/146 (5154 (estimated locally),0.02 per call) FlexCAN_SetErrIntCmd/146 (15617 (estimated locally),0.07 per call) FlexCAN_SetErrIntCmd/146 (15617 (estimated locally),0.07 per call) FlexCAN_SetErrIntCmd/146 (15617 (estimated locally),0.07 per call) FlexCAN_Enable/126 (27380 (estimated locally),0.13 per call) 
FlexCAN_Ip_DisableInterrupts_Privileged/97 (FlexCAN_Ip_DisableInterrupts_Privileged) @06202c40
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_DisableInterrupts/145 (44539 (estimated locally),0.21 per call) 
FlexCAN_Ip_EnableInterrupts_Privileged/96 (FlexCAN_Ip_EnableInterrupts_Privileged) @062029a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_EnableInterrupts/144 (44539 (estimated locally),0.21 per call) 
FlexCAN_Ip_ClearBuffStatusFlag/95 (FlexCAN_Ip_ClearBuffStatusFlag) @06202700
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_ClearMsgBuffIntStatusFlag/7 (107374 (estimated locally),0.50 per call) 
FlexCAN_Ip_GetBuffStatusFlag/94 (FlexCAN_Ip_GetBuffStatusFlag) @06202460
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_GetBuffStatusFlag/8 (107374 (estimated locally),0.50 per call) 
FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/93 (FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged) @062021c0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_Disable/108 (27380 (estimated locally),0.13 per call) SchM_Exit_Can_CAN_EXCLUSIVE_AREA_17/143 (26575 (estimated locally),0.12 per call) FlexCAN_SetTxArbitrationStartDelay/34 (inlined) (26575 (estimated locally),0.12 per call) SchM_Enter_Can_CAN_EXCLUSIVE_AREA_17/142 (26575 (estimated locally),0.12 per call) FlexCAN_Enable/126 (27380 (estimated locally),0.13 per call) 
FlexCAN_Ip_SetTDCOffset_Privileged/92 (FlexCAN_Ip_SetTDCOffset_Privileged) @061f7d20
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_Disable/108 (13690 (estimated locally),0.06 per call) SchM_Exit_Can_CAN_EXCLUSIVE_AREA_16/141 (13288 (estimated locally),0.06 per call) FlexCAN_SetTDCOffset/2 (inlined) (13288 (estimated locally),0.06 per call) SchM_Enter_Can_CAN_EXCLUSIVE_AREA_16/140 (13288 (estimated locally),0.06 per call) FlexCAN_IsFDAvailable/105 (107374 (estimated locally),0.50 per call) FlexCAN_Enable/126 (27380 (estimated locally),0.13 per call) 
FlexCAN_Ip_GetBitrateFD/91 (FlexCAN_Ip_GetBitrateFD) @061f77e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_GetFDTimeSegments/15 (inlined) (53687 (estimated locally),0.25 per call) 
FlexCAN_Ip_SetBitrateCbt_Privileged/90 (FlexCAN_Ip_SetBitrateCbt_Privileged) @061f72a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_Disable/108 (13690 (estimated locally),0.06 per call) SchM_Exit_Can_CAN_EXCLUSIVE_AREA_15/139 (6644 (estimated locally),0.03 per call) FlexCAN_SetFDTimeSegments/10 (6644 (estimated locally),0.03 per call) FlexCAN_SetFDEnabled/4 (inlined) (6644 (estimated locally),0.03 per call) SchM_Enter_Can_CAN_EXCLUSIVE_AREA_15/138 (6644 (estimated locally),0.03 per call) FlexCAN_Enable/126 (13690 (estimated locally),0.06 per call) 
FlexCAN_Ip_GetTDCValue/89 (FlexCAN_Ip_GetTDCValue) @061f7ee0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: 
FlexCAN_Ip_GetTDCFail/88 (FlexCAN_Ip_GetTDCFail) @061f7c40
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: 
FlexCAN_Ip_ClearTDCFail/87 (FlexCAN_Ip_ClearTDCFail) @061f79a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: SchM_Exit_Can_CAN_EXCLUSIVE_AREA_09/137 (107374 (estimated locally),0.50 per call) SchM_Enter_Can_CAN_EXCLUSIVE_AREA_09/136 (107374 (estimated locally),0.50 per call) 
FlexCAN_Ip_GetBitrate/86 (FlexCAN_Ip_GetBitrate) @061f7700
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_GetTimeSegments/14 (inlined) (31675 (estimated locally),0.15 per call) FlexCAN_GetExtendedTimeSegments/13 (inlined) (22012 (estimated locally),0.10 per call) 
FlexCAN_Ip_SetBitrate_Privileged/85 (FlexCAN_Ip_SetBitrate_Privileged) @061f7460
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_Disable/108 (13690 (estimated locally),0.06 per call) SchM_Exit_Can_CAN_EXCLUSIVE_AREA_14/135 (13288 (estimated locally),0.06 per call) FlexCAN_SetTimeSegments/11 (7840 (estimated locally),0.04 per call) FlexCAN_SetExtendedTimeSegments/12 (5448 (estimated locally),0.03 per call) SchM_Enter_Can_CAN_EXCLUSIVE_AREA_14/134 (13288 (estimated locally),0.06 per call) FlexCAN_Enable/126 (13690 (estimated locally),0.06 per call) 
FlexCAN_Ip_SetRxMaskType_Privileged/84 (FlexCAN_Ip_SetRxMaskType_Privileged) @061f71c0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_Disable/108 (27380 (estimated locally),0.13 per call) SchM_Exit_Can_CAN_EXCLUSIVE_AREA_08/133 (26575 (estimated locally),0.12 per call) FlexCAN_SetRxMaskType/35 (inlined) (26575 (estimated locally),0.12 per call) SchM_Enter_Can_CAN_EXCLUSIVE_AREA_08/132 (26575 (estimated locally),0.12 per call) FlexCAN_Enable/126 (27380 (estimated locally),0.13 per call) 
FlexCAN_Ip_SetStopMode_Privileged/83 (FlexCAN_Ip_SetStopMode_Privileged) @061edd20
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_Disable/108 (35433 (estimated locally),0.16 per call) FlexCAN_EnterFreezeMode/107 (107374 (estimated locally),0.50 per call) 
FlexCAN_Ip_SetStartMode_Privileged/82 (FlexCAN_Ip_SetStartMode_Privileged) @061ed7e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_ExitFreezeMode/129 (107374 (estimated locally),0.50 per call) SchM_Exit_Can_CAN_EXCLUSIVE_AREA_07/131 (107374 (estimated locally),0.50 per call) SchM_Enter_Can_CAN_EXCLUSIVE_AREA_07/130 (107374 (estimated locally),0.50 per call) 
FlexCAN_Ip_GetStartMode_Privileged/81 (FlexCAN_Ip_GetStartMode_Privileged) @061ed2a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
FlexCAN_Ip_GetStopMode_Privileged/80 (FlexCAN_Ip_GetStopMode_Privileged) @061edee0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: 
FlexCAN_Ip_MainFunctionWrite/79 (FlexCAN_Ip_MainFunctionWrite) @061edc40
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_ClearMsgBuffIntStatusFlag/7 (35433 (estimated locally),0.16 per call) FlexCAN_GetMsgBuffTimestamp/128 (35433 (estimated locally),0.16 per call) FlexCAN_GetBuffStatusFlag/8 (107374 (estimated locally),0.50 per call) 
FlexCAN_Ip_MainFunctionBusOff_Privileged/78 (FlexCAN_Ip_MainFunctionBusOff_Privileged) @061ed9a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: 
   Indirect call(37581 (estimated locally),0.18 per call) 
FlexCAN_Ip_MainFunctionRead/77 (FlexCAN_Ip_MainFunctionRead) @061ed700
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_IRQHandlerRxMB/46 (3613 (estimated locally),0.02 per call) FlexCAN_GetBuffStatusFlag/8 (35702 (estimated locally),0.17 per call) FlexCAN_IRQHandlerRxFIFO/48 (2968 (estimated locally),0.01 per call) 
FlexCAN_Ip_Deinit_Privileged/76 (FlexCAN_Ip_Deinit_Privileged) @061ed460
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (write)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_Disable/108 (35433 (estimated locally),0.16 per call) FlexCAN_SetRegDefaultVal/36 (inlined) (35433 (estimated locally),0.16 per call) FlexCAN_EnterFreezeMode/107 (107374 (estimated locally),0.50 per call) 
FlexCAN_Ip_SetRxFifoGlobalMask_Privileged/75 (FlexCAN_Ip_SetRxFifoGlobalMask_Privileged) @061ed1c0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_Disable/108 (27380 (estimated locally),0.13 per call) FlexCAN_Enable/126 (27380 (estimated locally),0.13 per call) 
FlexCAN_Ip_SetRxIndividualMask_Privileged/74 (FlexCAN_Ip_SetRxIndividualMask_Privileged) @061dcd20
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_Disable/108 (11568 (estimated locally),0.05 per call) FlexCAN_Enable/126 (11568 (estimated locally),0.05 per call) 
FlexCAN_Ip_ExitFreezeMode_Privileged/73 (FlexCAN_Ip_ExitFreezeMode_Privileged) @061dc7e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_ExitFreezeMode/129 (1073741824 (estimated locally),1.00 per call) 
FlexCAN_Ip_EnterFreezeMode_Privileged/72 (FlexCAN_Ip_EnterFreezeMode_Privileged) @061dc2a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: count:1073741824 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_EnterFreezeMode/107 (1073741824 (estimated locally),1.00 per call) 
FlexCAN_Ip_SetRxMbGlobalMask_Privileged/71 (FlexCAN_Ip_SetRxMbGlobalMask_Privileged) @061dcee0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_Disable/108 (27380 (estimated locally),0.13 per call) FlexCAN_Enable/126 (27380 (estimated locally),0.13 per call) 
FlexCAN_Ip_SendBlocking/70 (FlexCAN_Ip_SendBlocking) @061dcc40
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_ClearMsgBuffIntStatusFlag/7 (17717 (estimated locally),0.08 per call) FlexCAN_GetBuffStatusFlag/8 (18582 (estimated locally),0.09 per call) OsIf_GetElapsed/122 (17560 (estimated locally),0.08 per call) OsIf_GetCounter/121 (1988 (estimated locally),0.01 per call) OsIf_MicrosToTicks/120 (1988 (estimated locally),0.01 per call) FlexCAN_GetMsgBuffRegion/117 (1988 (estimated locally),0.01 per call) FlexCAN_ClearMsgBuffIntStatusFlag/7 (1988 (estimated locally),0.01 per call) FlexCAN_GetBuffStatusFlag/8 (165615 (estimated locally),0.77 per call) OsIf_GetElapsed/122 (156507 (estimated locally),0.73 per call) OsIf_GetCounter/121 (17717 (estimated locally),0.08 per call) FlexCAN_StartSendData/44 (53687 (estimated locally),0.25 per call) OsIf_MicrosToTicks/120 (214748 (estimated locally),1.00 per call) 
FlexCAN_BusOff_IRQHandler/69 (FlexCAN_BusOff_IRQHandler) @061dc9a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: 
   Indirect call(13153 (estimated locally),0.06 per call) 
   Indirect call(13153 (estimated locally),0.06 per call) 
   Indirect call(13153 (estimated locally),0.06 per call) 
FlexCAN_Error_IRQHandler/68 (FlexCAN_Error_IRQHandler) @061dc700
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: 
   Indirect call(10786 (estimated locally),0.05 per call) 
   Indirect call(13153 (estimated locally),0.06 per call) 
FlexCAN_Ip_GetControllerRxErrorCounter/67 (FlexCAN_Ip_GetControllerRxErrorCounter) @061dc460
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: 
FlexCAN_Ip_GetControllerTxErrorCounter/66 (FlexCAN_Ip_GetControllerTxErrorCounter) @061dc1c0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: 
FlexCAN_Ip_GetErrorStatus/65 (FlexCAN_Ip_GetErrorStatus) @061cdd20
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: 
FlexCAN_Ip_ClearErrorStatus/64 (FlexCAN_Ip_ClearErrorStatus) @061cd7e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: 
FlexCAN_IRQHandler/63 (FlexCAN_IRQHandler) @061cd2a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_ClearMsgBuffIntStatusFlag/7 (202115 (estimated locally),0.94 per call) FlexCAN_ClearMsgBuffIntStatusFlag/7 (3173 (estimated locally),0.01 per call) FlexCAN_GetMsgBuffIntStatusFlag/30 (inlined) (19233 (estimated locally),0.09 per call) FlexCAN_IRQHandlerTxMB/47 (inlined) (3893 (estimated locally),0.02 per call) FlexCAN_IRQHandlerRxMB/46 (3251 (estimated locally),0.02 per call) FlexCAN_IRQHandlerRxFIFO/48 (3173 (estimated locally),0.01 per call) FlexCAN_ProcessSpuriousInterruptMB/49 (inlined) (9473 (estimated locally),0.04 per call) FlexCAN_GetMsgBuffIntStatusFlag/264 (inlined) (239641 (estimated locally),1.12 per call) FlexCAN_GetMsgBuffIntStatusFlag/266 (inlined) (28706 (estimated locally),0.13 per call) 
FlexCAN_CompleteRxMessageFifoData/62 (FlexCAN_CompleteRxMessageFifoData) @061cdee0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Function FlexCAN_CompleteRxMessageFifoData/62 is inline copy in FlexCAN_IRQHandlerRxFIFO/48
  Availability: local
  Function flags: count:17929341 (estimated locally) body local optimize_size
  Called by: FlexCAN_IRQHandlerRxFIFO/48 (inlined) (17929341 (estimated locally),0.02 per call) 
  Calls: FlexCAN_SetMsgBuffIntCmd/114 (2958306 (estimated locally),0.00 per call) FlexCAN_SetMsgBuffIntCmd/114 (2958306 (estimated locally),0.00 per call) FlexCAN_SetMsgBuffIntCmd/114 (2958306 (estimated locally),0.00 per call) 
FlexCAN_Ip_GetTransferStatus/61 (FlexCAN_Ip_GetTransferStatus) @061cdc40
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: 
FlexCAN_Ip_ConfigRemoteResponseMb/60 (FlexCAN_Ip_ConfigRemoteResponseMb) @061cd9a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_SetMsgBuffIntCmd/114 (2116 (estimated locally),0.01 per call) FlexCAN_SetTxMsgBuff/118 (6412 (estimated locally),0.03 per call) FlexCAN_GetMsgBuffRegion/117 (6412 (estimated locally),0.03 per call) FlexCAN_ClearMsgBuffIntStatusFlag/7 (6412 (estimated locally),0.03 per call) FlexCAN_IsMbOutOfRange/116 (13422 (estimated locally),0.06 per call) FlexCAN_GetMbPayloadSize/115 (26844 (estimated locally),0.13 per call) 
FlexCAN_Ip_ConfigRxFifo_Privileged/59 (FlexCAN_Ip_ConfigRxFifo_Privileged) @061cd700
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_Disable/108 (27380 (estimated locally),0.13 per call) FlexCAN_SetRxFifoFilter/127 (26575 (estimated locally),0.12 per call) FlexCAN_Enable/126 (27380 (estimated locally),0.13 per call) 
FlexCAN_Ip_RxFifoBlocking/58 (FlexCAN_Ip_RxFifoBlocking) @061cd460
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_ProccessLegacyRxFIFO/42 (inlined) (35433 (estimated locally),0.16 per call) FlexCAN_StartRxMessageFifoData/45 (inlined) (107374 (estimated locally),0.50 per call) 
FlexCAN_Ip_RxFifo/57 (FlexCAN_Ip_RxFifo) @061cd1c0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_StartRxMessageFifoData/268 (inlined) (107374 (estimated locally),0.50 per call) 
FlexCAN_Ip_ReceiveBlocking/56 (FlexCAN_Ip_ReceiveBlocking) @061bbd20
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxState/38 (read)Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_SetMsgBuffIntCmd/114 (12047 (estimated locally),0.06 per call) OsIf_GetElapsed/122 (313013 (estimated locally),1.46 per call) FlexCAN_IRQHandlerRxMB/46 (34087 (estimated locally),0.16 per call) FlexCAN_GetBuffStatusFlag/8 (103294 (estimated locally),0.48 per call) OsIf_GetCounter/121 (35433 (estimated locally),0.16 per call) FlexCAN_SetMsgBuffIntCmd/114 (17717 (estimated locally),0.08 per call) FlexCAN_StartRxMessageBufferData/43 (107374 (estimated locally),0.50 per call) OsIf_MicrosToTicks/120 (214748 (estimated locally),1.00 per call) 
FlexCAN_Ip_Receive/55 (FlexCAN_Ip_Receive) @061bb7e0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_SetMsgBuffIntCmd/114 (17717 (estimated locally),0.08 per call) FlexCAN_StartRxMessageBufferData/43 (107374 (estimated locally),0.50 per call) 
FlexCAN_Ip_ConfigRxMb/54 (FlexCAN_Ip_ConfigRxMb) @061bb2a0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_SetRxMsgBuff/119 (25646 (estimated locally),0.12 per call) FlexCAN_SetRxMsgBuff/119 (25646 (estimated locally),0.12 per call) FlexCAN_SetRxMsgBuff/119 (25646 (estimated locally),0.12 per call) FlexCAN_ClearMsgBuffIntStatusFlag/7 (25646 (estimated locally),0.12 per call) FlexCAN_IsMbOutOfRange/116 (53687 (estimated locally),0.25 per call) 
FlexCAN_Ip_Send/53 (FlexCAN_Ip_Send) @061bbee0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_SetMsgBuffIntCmd/114 (2923 (estimated locally),0.01 per call) FlexCAN_StartSendData/44 (17717 (estimated locally),0.08 per call) 
FlexCAN_Ip_Init_Privileged/52 (FlexCAN_Ip_Init_Privileged) @061bbc40
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (write)
  Referring: 
  Availability: available
  Function flags: count:214748 (estimated locally) body optimize_size
  Called by: 
  Calls: FlexCAN_SetOperationMode/106 (13288 (estimated locally),0.06 per call) FlexCAN_SetTimeSegments/11 (6644 (estimated locally),0.03 per call) FlexCAN_SetFDTimeSegments/10 (6644 (estimated locally),0.03 per call) FlexCAN_SetExtendedTimeSegments/12 (6644 (estimated locally),0.03 per call) FlexCAN_EnableExtCbt/17 (inlined) (13288 (estimated locally),0.06 per call) FlexCAN_InitController/41 (inlined) (40265 (estimated locally),0.19 per call) FlexCAN_IsFDAvailable/105 (26844 (estimated locally),0.13 per call) 
FlexCAN_AbortRxTransfer/51 (FlexCAN_AbortRxTransfer) @061bb9a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Function FlexCAN_AbortRxTransfer/51 is inline copy in FlexCAN_Ip_AbortTransfer/99
  Availability: local
  Function flags: count:2595 (estimated locally) body local optimize_size
  Called by: FlexCAN_Ip_AbortTransfer/99 (inlined) (2595 (estimated locally),0.01 per call) 
  Calls: FlexCAN_ClearMsgBuffIntStatusFlag/7 (2595 (estimated locally),0.01 per call) FlexCAN_GetMsgBuffRegion/117 (856 (estimated locally),0.00 per call) FLEXCAN_ClearMsgBuffIntCmd/147 (574 (estimated locally),0.00 per call) FlexCAN_GetMsgBuffRegion/117 (574 (estimated locally),0.00 per call) RxFifoOcuppiedLastMsgBuff/21 (inlined) (1739 (estimated locally),0.01 per call) 
FlexCAN_AbortTxTransfer/50 (FlexCAN_AbortTxTransfer) @061bb700
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Function FlexCAN_AbortTxTransfer/50 is inline copy in FlexCAN_Ip_AbortTransfer/99
  Availability: local
  Function flags: count:2595 (estimated locally) body local optimize_size
  Called by: FlexCAN_Ip_AbortTransfer/99 (inlined) (2595 (estimated locally),0.01 per call) 
  Calls: FlexCAN_ClearMsgBuffIntStatusFlag/7 (2595 (estimated locally),0.01 per call) FlexCAN_GetBuffStatusFlag/8 (24258 (estimated locally),0.11 per call) OsIf_GetElapsed/122 (22924 (estimated locally),0.11 per call) OsIf_GetCounter/121 (2595 (estimated locally),0.01 per call) OsIf_MicrosToTicks/120 (2595 (estimated locally),0.01 per call) FlexCAN_GetMsgBuffRegion/117 (2595 (estimated locally),0.01 per call) 
FlexCAN_ProcessSpuriousInterruptMB/49 (FlexCAN_ProcessSpuriousInterruptMB) @061bb460
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Function FlexCAN_ProcessSpuriousInterruptMB/49 is inline copy in FlexCAN_IRQHandler/63
  Availability: local
  Function flags: count:9473 (estimated locally) body local optimize_size
  Called by: FlexCAN_IRQHandler/63 (inlined) (9473 (estimated locally),0.04 per call) 
  Calls: FlexCAN_ClearMsgBuffIntStatusFlag/7 (4173 (estimated locally),0.02 per call) FlexCAN_GetBuffStatusImask/9 (inlined) (25293 (estimated locally),0.12 per call) FlexCAN_GetBuffStatusFlag/8 (76645 (estimated locally),0.36 per call) 
FlexCAN_IRQHandlerRxFIFO/48 (FlexCAN_IRQHandlerRxFIFO) @061bb1c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: local
  Function flags: count:1073741823 (estimated locally) body local optimize_size
  Called by: FlexCAN_Ip_MainFunctionRead/77 (2968 (estimated locally),0.01 per call) FlexCAN_IRQHandler/63 (3173 (estimated locally),0.01 per call) FlexCAN_ProccessLegacyRxFIFO/42 (49581 (estimated locally),0.23 per call) 
  Calls: FlexCAN_ClearMsgBuffIntStatusFlag/7 (268435456 (estimated locally),0.25 per call) FlexCAN_ClearMsgBuffIntStatusFlag/7 (268435456 (estimated locally),0.25 per call) FlexCAN_CompleteRxMessageFifoData/62 (inlined) (17929341 (estimated locally),0.02 per call) FlexCAN_ClearMsgBuffIntStatusFlag/7 (54331336 (estimated locally),0.05 per call) FlexCAN_ReadRxFifo/125 (54331336 (estimated locally),0.05 per call) 
   Indirect call(187904819 (estimated locally),0.18 per call) 
   Indirect call(187904819 (estimated locally),0.18 per call) 
   Indirect call(38031935 (estimated locally),0.04 per call) 
FlexCAN_IRQHandlerTxMB/47 (FlexCAN_IRQHandlerTxMB) @062d9d20
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Function FlexCAN_IRQHandlerTxMB/47 is inline copy in FlexCAN_IRQHandler/63
  Availability: local
  Function flags: count:3893 (estimated locally) body local optimize_size
  Called by: FlexCAN_IRQHandler/63 (inlined) (3893 (estimated locally),0.02 per call) 
  Calls: FlexCAN_SetMsgBuffIntCmd/114 (536 (estimated locally),0.00 per call) FlexCAN_SetMsgBuffIntCmd/114 (642 (estimated locally),0.00 per call) FlexCAN_ClearMsgBuffIntStatusFlag/7 (1946 (estimated locally),0.01 per call) FlexCAN_GetMsgBuffTimestamp/128 (1946 (estimated locally),0.01 per call) FlexCAN_ClearMsgBuffIntStatusFlag/7 (394 (estimated locally),0.00 per call) FlexCAN_GetMsgBuff/124 (1946 (estimated locally),0.01 per call) FlexCAN_LockRxMsgBuff/123 (1946 (estimated locally),0.01 per call) 
   Indirect call(2725 (estimated locally),0.01 per call) 
FlexCAN_IRQHandlerRxMB/46 (FlexCAN_IRQHandlerRxMB) @062d97e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: local
  Function flags: count:1073741823 (estimated locally) body local optimize_size
  Called by: FlexCAN_Ip_MainFunctionRead/77 (3613 (estimated locally),0.02 per call) FlexCAN_IRQHandler/63 (3251 (estimated locally),0.02 per call) FlexCAN_Ip_ReceiveBlocking/56 (34087 (estimated locally),0.16 per call) 
  Calls: FlexCAN_SetMsgBuffIntCmd/114 (147934780 (estimated locally),0.14 per call) FlexCAN_SetMsgBuffIntCmd/114 (177167401 (estimated locally),0.17 per call) FlexCAN_GetMsgBuffRegion/117 (177167401 (estimated locally),0.17 per call) FlexCAN_ClearMsgBuffIntStatusFlag/7 (1073741823 (estimated locally),1.00 per call) FlexCAN_GetMsgBuff/124 (1073741823 (estimated locally),1.00 per call) FlexCAN_LockRxMsgBuff/123 (1073741823 (estimated locally),1.00 per call) 
   Indirect call(751619277 (estimated locally),0.70 per call) 
FlexCAN_StartRxMessageFifoData/45 (FlexCAN_StartRxMessageFifoData) @062d92a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  previous sharing asm name: 268
  References: 
  Referring: 
  Function FlexCAN_StartRxMessageFifoData/45 is inline copy in FlexCAN_Ip_RxFifoBlocking/58
  Availability: local
  Function flags: count:107374 (estimated locally) body local optimize_size
  Called by: FlexCAN_Ip_RxFifoBlocking/58 (inlined) (107374 (estimated locally),0.50 per call) 
  Calls: FlexCAN_StartRxMessageFifoData.part.0/161 (53687 (estimated locally),0.25 per call) 
FlexCAN_StartSendData/44 (FlexCAN_StartSendData) @062d9ee0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Flexcan_Ip_apxState/38 (read)Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Availability: local
  Function flags: count:214748 (estimated locally) body local optimize_size
  Called by: FlexCAN_Ip_SendBlocking/70 (53687 (estimated locally),0.25 per call) FlexCAN_Ip_Send/53 (17717 (estimated locally),0.08 per call) 
  Calls: FlexCAN_SetTxMsgBuff/118 (8335 (estimated locally),0.04 per call) FlexCAN_GetMsgBuffRegion/117 (8335 (estimated locally),0.04 per call) FlexCAN_ClearMsgBuffIntStatusFlag/7 (8335 (estimated locally),0.04 per call) FlexCAN_IsMbOutOfRange/116 (26844 (estimated locally),0.13 per call) FlexCAN_GetMbPayloadSize/115 (53687 (estimated locally),0.25 per call) 
FlexCAN_StartRxMessageBufferData/43 (FlexCAN_StartRxMessageBufferData) @062d9c40
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Flexcan_Ip_apxBase/37 (read)Flexcan_Ip_apxState/38 (read)
  Referring: 
  Availability: local
  Function flags: count:214748 (estimated locally) body local optimize_size
  Called by: FlexCAN_Ip_ReceiveBlocking/56 (107374 (estimated locally),0.50 per call) FlexCAN_Ip_Receive/55 (107374 (estimated locally),0.50 per call) 
  Calls: FlexCAN_IsMbOutOfRange/116 (107374 (estimated locally),0.50 per call) 
FlexCAN_ProccessLegacyRxFIFO/42 (FlexCAN_ProccessLegacyRxFIFO) @062d99a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Flexcan_Ip_apxState/38 (read)Flexcan_Ip_apxBase/37 (read)
  Referring: 
  Function FlexCAN_ProccessLegacyRxFIFO/42 is inline copy in FlexCAN_Ip_RxFifoBlocking/58
  Availability: local
  Function flags: count:35433 (estimated locally) body local optimize_size
  Called by: FlexCAN_Ip_RxFifoBlocking/58 (inlined) (35433 (estimated locally),0.16 per call) 
  Calls: FlexCAN_SetMsgBuffIntCmd/114 (5889 (estimated locally),0.03 per call) FlexCAN_SetMsgBuffIntCmd/114 (5889 (estimated locally),0.03 per call) FlexCAN_SetMsgBuffIntCmd/114 (5889 (estimated locally),0.03 per call) OsIf_GetElapsed/122 (313009 (estimated locally),1.46 per call) FlexCAN_IRQHandlerRxFIFO/48 (49581 (estimated locally),0.23 per call) FlexCAN_GetBuffStatusFlag/8 (150245 (estimated locally),0.70 per call) OsIf_GetCounter/121 (35433 (estimated locally),0.16 per call) OsIf_MicrosToTicks/120 (35433 (estimated locally),0.16 per call) 
FlexCAN_InitController/41 (FlexCAN_InitController) @062d9700
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function FlexCAN_InitController/41 is inline copy in FlexCAN_Ip_Init_Privileged/52
  Availability: local
  Function flags: count:40265 (estimated locally) body local optimize_size
  Called by: FlexCAN_Ip_Init_Privileged/52 (inlined) (40265 (estimated locally),0.19 per call) 
  Calls: FlexCAN_InitCtroll/40 (inlined) (14193 (estimated locally),0.07 per call) FlexCAN_ConfigCtrlOptions/110 (14193 (estimated locally),0.07 per call) FlexCAN_SetFDEnabled/269 (inlined) (4684 (estimated locally),0.02 per call) FlexCAN_IsFDAvailable/105 (14193 (estimated locally),0.07 per call) FlexCAN_Disable/108 (14193 (estimated locally),0.07 per call) FlexCAN_EnterFreezeMode/107 (14193 (estimated locally),0.07 per call) FlexCAN_Init/109 (28387 (estimated locally),0.13 per call) FlexCAN_SetClkSrc/29 (inlined) (28387 (estimated locally),0.13 per call) FlexCAN_Disable/108 (7840 (estimated locally),0.04 per call) FlexCAN_EnterFreezeMode/107 (23756 (estimated locally),0.11 per call) 
FlexCAN_InitCtroll/40 (FlexCAN_InitCtroll) @062d9460
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function FlexCAN_InitCtroll/40 is inline copy in FlexCAN_Ip_Init_Privileged/52
  Availability: local
  Function flags: count:14193 (estimated locally) body local optimize_size
  Called by: FlexCAN_InitController/41 (inlined) (14193 (estimated locally),0.07 per call) 
  Calls: FlexCAN_Disable/108 (2342 (estimated locally),0.01 per call) FlexCAN_EnterFreezeMode/107 (2342 (estimated locally),0.01 per call) FlexCAN_SetMaxMsgBuffNum/112 (7097 (estimated locally),0.03 per call) FlexCAN_SetPayloadSize/111 (7097 (estimated locally),0.03 per call) FlexCAN_Disable/108 (7097 (estimated locally),0.03 per call) FlexCAN_EnterFreezeMode/107 (7097 (estimated locally),0.03 per call) FlexCAN_InitRxFifo/39 (inlined) (14193 (estimated locally),0.07 per call) 
FlexCAN_InitRxFifo/39 (FlexCAN_InitRxFifo) @062d91c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function FlexCAN_InitRxFifo/39 is inline copy in FlexCAN_Ip_Init_Privileged/52
  Availability: local
  Function flags: count:14193 (estimated locally) body local optimize_size
  Called by: FlexCAN_InitCtroll/40 (inlined) (14193 (estimated locally),0.07 per call) 
  Calls: FlexCAN_EnableRxFifo/113 (4684 (estimated locally),0.02 per call) 
Flexcan_Ip_apxState/38 (Flexcan_Ip_apxState) @0618a678
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: FlexCAN_IRQHandlerTxMB/47 (read)FlexCAN_AbortRxTransfer/51 (read)FlexCAN_CompleteRxMessageFifoData/62 (read)FlexCAN_Ip_Init_Privileged/52 (write)FlexCAN_Ip_Send/53 (read)FlexCAN_StartRxMessageFifoData.part.0/161 (read)FlexCAN_Ip_ConfigRxMb/54 (read)FlexCAN_StartSendData/44 (read)FlexCAN_Ip_DisableInterrupts_Privileged/97 (read)FlexCAN_IRQHandlerRxMB/46 (read)FlexCAN_AbortTxTransfer/50 (read)FlexCAN_ProcessSpuriousInterruptMB/49 (read)FlexCAN_Ip_Receive/55 (read)FlexCAN_Ip_ReceiveBlocking/56 (read)FlexCAN_Ip_ConfigRemoteResponseMb/60 (read)FlexCAN_IRQHandlerRxFIFO/48 (read)FlexCAN_ProccessLegacyRxFIFO/42 (read)FlexCAN_Ip_GetTransferStatus/61 (read)FlexCAN_IRQHandler/63 (read)FlexCAN_Error_IRQHandler/68 (read)FlexCAN_BusOff_IRQHandler/69 (read)FlexCAN_Ip_SendBlocking/70 (read)FlexCAN_Ip_Deinit_Privileged/76 (write)FlexCAN_Ip_MainFunctionRead/77 (read)FlexCAN_Ip_MainFunctionBusOff_Privileged/78 (read)FlexCAN_Ip_MainFunctionWrite/79 (read)FlexCAN_Ip_EnableInterrupts_Privileged/96 (read)FlexCAN_StartRxMessageBufferData/43 (read)FlexCAN_Ip_AbortTransfer/99 (read)
  Availability: available
  Varpool flags:
Flexcan_Ip_apxBase/37 (Flexcan_Ip_apxBase) @0618a5e8
  Type: variable definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: FlexCAN_IRQHandlerTxMB/47 (read)FlexCAN_AbortRxTransfer/51 (read)FlexCAN_CompleteRxMessageFifoData/62 (read)FlexCAN_Ip_Init_Privileged/52 (read)FlexCAN_Ip_Send/53 (read)FlexCAN_StartRxMessageFifoData.part.0/161 (read)FlexCAN_Ip_ConfigRxMb/54 (read)FlexCAN_StartSendData/44 (read)FlexCAN_Ip_GetListenOnlyMode/103 (read)FlexCAN_IRQHandlerRxMB/46 (read)FlexCAN_AbortTxTransfer/50 (read)FlexCAN_ProcessSpuriousInterruptMB/49 (read)FlexCAN_Ip_Receive/55 (read)FlexCAN_Ip_ReceiveBlocking/56 (read)FlexCAN_Ip_ConfigRxFifo_Privileged/59 (read)FlexCAN_IRQHandlerRxFIFO/48 (read)FlexCAN_Ip_SetListenOnlyMode_Privileged/102 (read)FlexCAN_Ip_ConfigRemoteResponseMb/60 (read)FlexCAN_IRQHandler/63 (read)FlexCAN_Ip_ClearErrorStatus/64 (read)FlexCAN_Ip_GetErrorStatus/65 (read)FlexCAN_Ip_GetControllerTxErrorCounter/66 (read)FlexCAN_Ip_GetControllerRxErrorCounter/67 (read)FlexCAN_Error_IRQHandler/68 (read)FlexCAN_BusOff_IRQHandler/69 (read)FlexCAN_Ip_SendBlocking/70 (read)FlexCAN_Ip_SetRxMbGlobalMask_Privileged/71 (read)FlexCAN_Ip_EnterFreezeMode_Privileged/72 (read)FlexCAN_Ip_ExitFreezeMode_Privileged/73 (read)FlexCAN_Ip_SetRxIndividualMask_Privileged/74 (read)FlexCAN_Ip_SetRxFifoGlobalMask_Privileged/75 (read)FlexCAN_Ip_Deinit_Privileged/76 (read)FlexCAN_Ip_MainFunctionRead/77 (read)FlexCAN_Ip_MainFunctionBusOff_Privileged/78 (read)FlexCAN_Ip_MainFunctionWrite/79 (read)FlexCAN_Ip_GetStopMode_Privileged/80 (read)FlexCAN_Ip_GetStartMode_Privileged/81 (read)FlexCAN_Ip_SetStartMode_Privileged/82 (read)FlexCAN_Ip_SetStopMode_Privileged/83 (read)FlexCAN_Ip_SetRxMaskType_Privileged/84 (read)FlexCAN_Ip_SetBitrate_Privileged/85 (read)FlexCAN_Ip_GetBitrate/86 (read)FlexCAN_Ip_ClearTDCFail/87 (read)FlexCAN_Ip_GetTDCFail/88 (read)FlexCAN_Ip_GetTDCValue/89 (read)FlexCAN_Ip_SetBitrateCbt_Privileged/90 (read)FlexCAN_Ip_GetBitrateFD/91 (read)FlexCAN_Ip_SetTDCOffset_Privileged/92 (read)FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/93 (read)FlexCAN_Ip_GetBuffStatusFlag/94 (read)FlexCAN_Ip_ClearBuffStatusFlag/95 (read)FlexCAN_Ip_EnableInterrupts_Privileged/96 (read)FlexCAN_Ip_DisableInterrupts_Privileged/97 (read)FlexCAN_StartRxMessageBufferData/43 (read)FlexCAN_ProccessLegacyRxFIFO/42 (read)FlexCAN_Ip_SetErrorInt_Privileged/98 (read)FlexCAN_Ip_AbortTransfer/99 (read)FlexCAN_Ip_SetRxMb14Mask_Privileged/100 (read)FlexCAN_Ip_SetRxMb15Mask_Privileged/101 (read)FlexCAN_Ip_ManualBusOffRecovery/104 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
FlexCAN_SetRegDefaultVal/36 (FlexCAN_SetRegDefaultVal) @062cec40
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function FlexCAN_SetRegDefaultVal/36 is inline copy in FlexCAN_Ip_Deinit_Privileged/76
  Availability: local
  Function flags: count:35433 (estimated locally) body local optimize_size
  Called by: FlexCAN_Ip_Deinit_Privileged/76 (inlined) (35433 (estimated locally),0.16 per call) 
  Calls: FlexCAN_IsFDAvailable/105 (35433 (estimated locally),0.16 per call) 
FlexCAN_SetRxMaskType/35 (FlexCAN_SetRxMaskType) @062ce8c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function FlexCAN_SetRxMaskType/35 is inline copy in FlexCAN_Ip_SetRxMaskType_Privileged/84
  Availability: local
  Function flags: count:26575 (estimated locally) body local optimize_size
  Called by: FlexCAN_Ip_SetRxMaskType_Privileged/84 (inlined) (26575 (estimated locally),0.12 per call) 
  Calls: 
FlexCAN_SetTxArbitrationStartDelay/34 (FlexCAN_SetTxArbitrationStartDelay) @062ce460
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function FlexCAN_SetTxArbitrationStartDelay/34 is inline copy in FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/93
  Availability: local
  Function flags: count:26575 (estimated locally) body local optimize_size
  Called by: FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/93 (inlined) (26575 (estimated locally),0.12 per call) 
  Calls: 
FlexCAN_GetMsgBuffIntStatusFlag/30 (FlexCAN_GetMsgBuffIntStatusFlag) @062c98c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  previous sharing asm name: 264
  References: 
  Referring: 
  Function FlexCAN_GetMsgBuffIntStatusFlag/30 is inline copy in FlexCAN_IRQHandler/63
  Availability: local
  Function flags: count:19233 (estimated locally) body local optimize_size
  Called by: FlexCAN_IRQHandler/63 (inlined) (19233 (estimated locally),0.09 per call) 
  Calls: FlexCAN_GetMsgBuffIntStatusFlag.part.0/158 (inlined) (9617 (estimated locally),0.04 per call) 
FlexCAN_SetClkSrc/29 (FlexCAN_SetClkSrc) @062c9620
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function FlexCAN_SetClkSrc/29 is inline copy in FlexCAN_Ip_Init_Privileged/52
  Availability: local
  Function flags: count:28387 (estimated locally) body local optimize_size
  Called by: FlexCAN_InitController/41 (inlined) (28387 (estimated locally),0.13 per call) 
  Calls: 
RxFifoOcuppiedLastMsgBuff/21 (RxFifoOcuppiedLastMsgBuff) @062c18c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function RxFifoOcuppiedLastMsgBuff/21 is inline copy in FlexCAN_Ip_AbortTransfer/99
  Availability: local
  Function flags: count:1739 (estimated locally) body local optimize_size
  Called by: FlexCAN_AbortRxTransfer/51 (inlined) (1739 (estimated locally),0.01 per call) 
  Calls: 
FlexCAN_EnableExtCbt/17 (FlexCAN_EnableExtCbt) @062bbc40
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function FlexCAN_EnableExtCbt/17 is inline copy in FlexCAN_Ip_Init_Privileged/52
  Availability: local
  Function flags: count:13288 (estimated locally) body local optimize_size
  Called by: FlexCAN_Ip_Init_Privileged/52 (inlined) (13288 (estimated locally),0.06 per call) 
  Calls: 
FlexCAN_GetFDTimeSegments/15 (FlexCAN_GetFDTimeSegments) @062bb620
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function FlexCAN_GetFDTimeSegments/15 is inline copy in FlexCAN_Ip_GetBitrateFD/91
  Availability: local
  Function flags: count:53687 (estimated locally) body local optimize_size
  Called by: FlexCAN_Ip_GetBitrateFD/91 (inlined) (53687 (estimated locally),0.25 per call) 
  Calls: 
FlexCAN_GetTimeSegments/14 (FlexCAN_GetTimeSegments) @062bb380
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function FlexCAN_GetTimeSegments/14 is inline copy in FlexCAN_Ip_GetBitrate/86
  Availability: local
  Function flags: count:31675 (estimated locally) body local optimize_size
  Called by: FlexCAN_Ip_GetBitrate/86 (inlined) (31675 (estimated locally),0.15 per call) 
  Calls: 
FlexCAN_GetExtendedTimeSegments/13 (FlexCAN_GetExtendedTimeSegments) @062bb0e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function FlexCAN_GetExtendedTimeSegments/13 is inline copy in FlexCAN_Ip_GetBitrate/86
  Availability: local
  Function flags: count:22012 (estimated locally) body local optimize_size
  Called by: FlexCAN_Ip_GetBitrate/86 (inlined) (22012 (estimated locally),0.10 per call) 
  Calls: 
FlexCAN_SetExtendedTimeSegments/12 (FlexCAN_SetExtendedTimeSegments) @062b6e00
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: count:214748 (estimated locally) body local optimize_size
  Called by: FlexCAN_Ip_SetBitrate_Privileged/85 (5448 (estimated locally),0.03 per call) FlexCAN_Ip_Init_Privileged/52 (6644 (estimated locally),0.03 per call) 
  Calls: FlexCAN_SetExtendedTimeSegments.part.0/157 (inlined) (107374 (estimated locally),0.50 per call) 
FlexCAN_SetTimeSegments/11 (FlexCAN_SetTimeSegments) @062b6700
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: count:214748 (estimated locally) body local optimize_size
  Called by: FlexCAN_Ip_SetBitrate_Privileged/85 (7840 (estimated locally),0.04 per call) FlexCAN_Ip_Init_Privileged/52 (6644 (estimated locally),0.03 per call) 
  Calls: FlexCAN_SetTimeSegments.part.0/155 (inlined) (107374 (estimated locally),0.50 per call) 
FlexCAN_SetFDTimeSegments/10 (FlexCAN_SetFDTimeSegments) @062b6000
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: count:214748 (estimated locally) body local optimize_size
  Called by: FlexCAN_Ip_SetBitrateCbt_Privileged/90 (6644 (estimated locally),0.03 per call) FlexCAN_Ip_Init_Privileged/52 (6644 (estimated locally),0.03 per call) 
  Calls: FlexCAN_SetFDTimeSegments.part.0/153 (inlined) (107374 (estimated locally),0.50 per call) 
FlexCAN_GetBuffStatusImask/9 (FlexCAN_GetBuffStatusImask) @062b18c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function FlexCAN_GetBuffStatusImask/9 is inline copy in FlexCAN_IRQHandler/63
  Availability: local
  Function flags: count:25293 (estimated locally) body local optimize_size
  Called by: FlexCAN_ProcessSpuriousInterruptMB/49 (inlined) (25293 (estimated locally),0.12 per call) 
  Calls: 
FlexCAN_GetBuffStatusFlag/8 (FlexCAN_GetBuffStatusFlag) @062b1620
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: FlexCAN_Ip_GetBuffStatusFlag/94 (107374 (estimated locally),0.50 per call) FlexCAN_Ip_MainFunctionWrite/79 (107374 (estimated locally),0.50 per call) FlexCAN_Ip_MainFunctionRead/77 (35702 (estimated locally),0.17 per call) FlexCAN_Ip_SendBlocking/70 (18582 (estimated locally),0.09 per call) FlexCAN_Ip_SendBlocking/70 (165615 (estimated locally),0.77 per call) FlexCAN_Ip_ReceiveBlocking/56 (103294 (estimated locally),0.48 per call) FlexCAN_ProccessLegacyRxFIFO/42 (150245 (estimated locally),0.70 per call) FlexCAN_AbortTxTransfer/50 (24258 (estimated locally),0.11 per call) FlexCAN_ProcessSpuriousInterruptMB/49 (76645 (estimated locally),0.36 per call) 
  Calls: 
FlexCAN_ClearMsgBuffIntStatusFlag/7 (FlexCAN_ClearMsgBuffIntStatusFlag) @062b1380
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: count:1073741824 (estimated locally) body local optimize_size
  Called by: FlexCAN_Ip_ClearBuffStatusFlag/95 (107374 (estimated locally),0.50 per call) FlexCAN_Ip_MainFunctionWrite/79 (35433 (estimated locally),0.16 per call) FlexCAN_Ip_SendBlocking/70 (17717 (estimated locally),0.08 per call) FlexCAN_Ip_SendBlocking/70 (1988 (estimated locally),0.01 per call) FlexCAN_IRQHandler/63 (202115 (estimated locally),0.94 per call) FlexCAN_IRQHandler/63 (3173 (estimated locally),0.01 per call) FlexCAN_Ip_ConfigRemoteResponseMb/60 (6412 (estimated locally),0.03 per call) FlexCAN_Ip_ConfigRxMb/54 (25646 (estimated locally),0.12 per call) FlexCAN_AbortRxTransfer/51 (2595 (estimated locally),0.01 per call) FlexCAN_IRQHandlerTxMB/47 (1946 (estimated locally),0.01 per call) FlexCAN_IRQHandlerTxMB/47 (394 (estimated locally),0.00 per call) FlexCAN_IRQHandlerRxFIFO/48 (268435456 (estimated locally),0.25 per call) FlexCAN_IRQHandlerRxFIFO/48 (268435456 (estimated locally),0.25 per call) FlexCAN_IRQHandlerRxFIFO/48 (54331336 (estimated locally),0.05 per call) FlexCAN_IRQHandlerRxMB/46 (1073741823 (estimated locally),1.00 per call) FlexCAN_AbortTxTransfer/50 (2595 (estimated locally),0.01 per call) FlexCAN_StartSendData/44 (8335 (estimated locally),0.04 per call) FlexCAN_ProcessSpuriousInterruptMB/49 (4173 (estimated locally),0.02 per call) 
  Calls: 
FlexCAN_SetListenOnlyMode/5 (FlexCAN_SetListenOnlyMode) @062add20
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function FlexCAN_SetListenOnlyMode/5 is inline copy in FlexCAN_Ip_SetListenOnlyMode_Privileged/102
  Availability: local
  Function flags: count:26575 (estimated locally) body local optimize_size
  Called by: FlexCAN_Ip_SetListenOnlyMode_Privileged/102 (inlined) (26575 (estimated locally),0.12 per call) 
  Calls: 
FlexCAN_SetFDEnabled/4 (FlexCAN_SetFDEnabled) @062ad9a0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  previous sharing asm name: 269
  References: 
  Referring: 
  Function FlexCAN_SetFDEnabled/4 is inline copy in FlexCAN_Ip_SetBitrateCbt_Privileged/90
  Availability: local
  Function flags: count:6644 (estimated locally) body local optimize_size
  Called by: FlexCAN_Ip_SetBitrateCbt_Privileged/90 (inlined) (6644 (estimated locally),0.03 per call) 
  Calls: 
FlexCAN_SetTDCOffset/2 (FlexCAN_SetTDCOffset) @062ad0e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Function FlexCAN_SetTDCOffset/2 is inline copy in FlexCAN_Ip_SetTDCOffset_Privileged/92
  Availability: local
  Function flags: count:13288 (estimated locally) body local optimize_size
  Called by: FlexCAN_Ip_SetTDCOffset_Privileged/92 (inlined) (13288 (estimated locally),0.06 per call) 
  Calls: 

;; Function FlexCAN_ClearMsgBuffIntStatusFlag (FlexCAN_ClearMsgBuffIntStatusFlag, funcdef_no=7, decl_uid=6670, cgraph_uid=8, symbol_order=7)

FlexCAN_ClearMsgBuffIntStatusFlag (struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  uint32 flag;
  long unsigned int _1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _1 = msgBuffIdx_3(D) & 31;
  flag_4 = 1 << _1;
  # DEBUG flag => flag_4
  # DEBUG BEGIN_STMT
  if (msgBuffIdx_3(D) <= 31)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  base_6(D)->IFLAG1 ={v} flag_4;

  <bb 4> [local count: 1073741824]:
  return;

}



;; Function FlexCAN_GetBuffStatusFlag (FlexCAN_GetBuffStatusFlag, funcdef_no=8, decl_uid=6675, cgraph_uid=9, symbol_order=8)

FlexCAN_GetBuffStatusFlag (const struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  uint32 flag;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  uint8 _10;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG flag => 0
  # DEBUG BEGIN_STMT
  if (msgBuffIdx_6(D) <= 31)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  _1 ={v} base_8(D)->IFLAG1;
  _2 = msgBuffIdx_6(D);
  _3 = 1 << _2;
  _4 = _1 & _3;
  flag_9 = _4 >> _2;
  # DEBUG flag => flag_9

  <bb 4> [local count: 1073741824]:
  # flag_5 = PHI <0(2), flag_9(3)>
  # DEBUG flag => flag_5
  # DEBUG BEGIN_STMT
  _10 = (uint8) flag_5;
  return _10;

}



;; Function FlexCAN_StartRxMessageBufferData (FlexCAN_StartRxMessageBufferData, funcdef_no=41, decl_uid=6950, cgraph_uid=42, symbol_order=43)

FlexCAN_StartRxMessageBufferData (uint8 instance, uint8 mb_idx, struct Flexcan_Ip_MsgBuffType * data, boolean isPolling)
{
  volatile boolean x;
  struct Flexcan_Ip_StateType * state;
  const struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType result;
  int _1;
  _Bool _2;
  _Bool _3;
  long unsigned int _4;
  _Bool _5;
  int _6;
  <unnamed type> _7;
  _Bool x.0_21;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  # DEBUG result => 0
  # DEBUG BEGIN_STMT
  _1 = (int) instance_10(D);
  base_12 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_12
  # DEBUG BEGIN_STMT
  state_13 = Flexcan_Ip_apxState[_1];
  # DEBUG state => state_13
  # DEBUG BEGIN_STMT
  _2 = instance_10(D) <= 2;
  x ={v} _2;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_21 ={v} x;
  if (x.0_21 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 8> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 9> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _3 = state_13->bIsLegacyFifoEn;
  _4 = state_13->u32MaxMbNum;
  _5 = FlexCAN_IsMbOutOfRange (base_12, mb_idx_14(D), _3, _4);
  if (_5 != 0)
    goto <bb 7>; [35.00%]
  else
    goto <bb 5>; [65.00%]

  <bb 5> [local count: 69793]:
  # DEBUG BEGIN_STMT
  _6 = (int) mb_idx_14(D);
  _7 ={v} state_13->mbs[_6].state;
  if (_7 != 0)
    goto <bb 7>; [35.00%]
  else
    goto <bb 6>; [65.00%]

  <bb 6> [local count: 45366]:
  # DEBUG BEGIN_STMT
  state_13->mbs[_6].state ={v} 1;
  # DEBUG BEGIN_STMT
  state_13->mbs[_6].pMBmessage = data_17(D);
  # DEBUG BEGIN_STMT
  state_13->mbs[_6].isPolling = isPolling_19(D);

  <bb 7> [local count: 107374]:
  # result_8 = PHI <4(4), 2(5), 0(6)>
  # DEBUG result => result_8
  # DEBUG BEGIN_STMT
  return result_8;

}



;; Function FlexCAN_StartSendData (FlexCAN_StartSendData, funcdef_no=42, decl_uid=6956, cgraph_uid=43, symbol_order=44)

FlexCAN_StartSendData (uint8 Flexcan_Ip_u8Instance, uint8 mb_idx, const struct Flexcan_Ip_DataInfoType * tx_info, uint32 msg_id, const uint8 * mb_data)
{
  volatile boolean x;
  volatile boolean x;
  volatile boolean x;
  volatile uint32 * pMbAddr;
  struct FLEXCAN_Type * base;
  struct Flexcan_Ip_StateType * state;
  struct Flexcan_Ip_MsbuffCodeStatusType cs;
  Flexcan_Ip_StatusType eResult;
  int _1;
  _Bool _2;
  _Bool _3;
  long unsigned int _4;
  unsigned char _5;
  long unsigned int _6;
  unsigned char _7;
  _Bool _8;
  _Bool _9;
  long unsigned int _10;
  _Bool _11;
  int _12;
  <unnamed type> _13;
  _Bool _14;
  _Bool _15;
  long unsigned int _16;
  <unnamed type> _17;
  _Bool _18;
  unsigned char _19;
  _Bool _20;
  _Bool x.0_50;
  _Bool x.0_51;
  _Bool x.0_52;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  # DEBUG eResult => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) Flexcan_Ip_u8Instance_24(D);
  state_26 = Flexcan_Ip_apxState[_1];
  # DEBUG state => state_26
  # DEBUG BEGIN_STMT
  base_27 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_27
  # DEBUG BEGIN_STMT
  # DEBUG pMbAddr => 0B
  # DEBUG BEGIN_STMT
  _2 = Flexcan_Ip_u8Instance_24(D) <= 2;
  x ={v} _2;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_52 ={v} x;
  if (x.0_52 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 17>; [50.00%]

  <bb 17> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 20> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _3 = tx_info_28(D) != 0B;
  x ={v} _3;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_51 ={v} x;
  if (x.0_51 != 0)
    goto <bb 6>; [50.00%]
  else
    goto <bb 16>; [50.00%]

  <bb 16> [local count: 53687]:

  <bb 5> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 19> [local count: 536870913]:
  goto <bb 5>; [100.00%]

  <bb 6> [local count: 53687]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _4 = tx_info_28(D)->data_length;
  _5 = (unsigned char) _4;
  _6 = (long unsigned int) mb_idx_29(D);
  _7 = FlexCAN_GetMbPayloadSize (base_27, _6);
  _8 = _5 <= _7;
  x ={v} _8;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_50 ={v} x;
  if (x.0_50 != 0)
    goto <bb 8>; [50.00%]
  else
    goto <bb 15>; [50.00%]

  <bb 15> [local count: 26844]:

  <bb 7> [local count: 268435456]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 18> [local count: 268435456]:
  goto <bb 7>; [100.00%]

  <bb 8> [local count: 26844]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _9 = state_26->bIsLegacyFifoEn;
  _10 = state_26->u32MaxMbNum;
  _11 = FlexCAN_IsMbOutOfRange (base_27, mb_idx_29(D), _9, _10);
  if (_11 != 0)
    goto <bb 14>; [35.00%]
  else
    goto <bb 9>; [65.00%]

  <bb 9> [local count: 17448]:
  # DEBUG BEGIN_STMT
  _12 = (int) mb_idx_29(D);
  _13 ={v} state_26->mbs[_12].state;
  if (_13 != 0)
    goto <bb 14>; [52.23%]
  else
    goto <bb 10>; [47.77%]

  <bb 10> [local count: 8335]:
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (base_27, _6);
  # DEBUG BEGIN_STMT
  state_26->mbs[_12].state ={v} 2;
  # DEBUG BEGIN_STMT
  state_26->mbs[_12].time_stamp = 0;
  # DEBUG BEGIN_STMT
  _14 = tx_info_28(D)->is_polling;
  state_26->mbs[_12].isPolling = _14;
  # DEBUG BEGIN_STMT
  _15 = tx_info_28(D)->is_remote;
  state_26->mbs[_12].isRemote = _15;
  # DEBUG BEGIN_STMT
  _16 = tx_info_28(D)->data_length;
  cs.dataLen = _16;
  # DEBUG BEGIN_STMT
  _17 = tx_info_28(D)->msg_id_type;
  cs.msgIdType = _17;
  # DEBUG BEGIN_STMT
  _18 = tx_info_28(D)->fd_enable;
  cs.fd_enable = _18;
  # DEBUG BEGIN_STMT
  _19 = tx_info_28(D)->fd_padding;
  cs.fd_padding = _19;
  # DEBUG BEGIN_STMT
  _20 = tx_info_28(D)->enable_brs;
  cs.enable_brs = _20;
  # DEBUG BEGIN_STMT
  if (_15 != 0)
    goto <bb 11>; [50.00%]
  else
    goto <bb 12>; [50.00%]

  <bb 11> [local count: 4168]:
  # DEBUG BEGIN_STMT
  cs.code = 28;
  goto <bb 13>; [100.00%]

  <bb 12> [local count: 4168]:
  # DEBUG BEGIN_STMT
  cs.code = 12;

  <bb 13> [local count: 8335]:
  # DEBUG BEGIN_STMT
  pMbAddr_45 = FlexCAN_GetMsgBuffRegion (base_27, _6);
  # DEBUG pMbAddr => pMbAddr_45
  # DEBUG BEGIN_STMT
  FlexCAN_SetTxMsgBuff (pMbAddr_45, &cs, msg_id_46(D), mb_data_47(D), 0);

  <bb 14> [local count: 26844]:
  # eResult_21 = PHI <4(8), 2(9), 0(13)>
  # DEBUG eResult => eResult_21
  # DEBUG BEGIN_STMT
  cs ={v} {CLOBBER};
  return eResult_21;

}



;; Function FlexCAN_IRQHandlerRxMB (FlexCAN_IRQHandlerRxMB, funcdef_no=44, decl_uid=6965, cgraph_uid=45, symbol_order=46)

FlexCAN_IRQHandlerRxMB (uint8 instance, uint32 mb_idx)
{
  volatile uint32 * flexcan_mb;
  boolean bIsCriticalSectionNeeded;
  boolean bCurrentIntStat;
  struct Flexcan_Ip_MsgBuffType data;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  int _1;
  struct Flexcan_Ip_MsgBuffType * _2;
  _Bool _3;
  _Bool _4;
  struct Flexcan_Ip_MsgBuffType * _5;
  _Bool _6;
  struct Flexcan_Ip_MsgBuffType * _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  void (*<T620>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _15;
  <unnamed type> _16;
  _Bool _17;
  _Bool _18;
  _Bool _19;
  _Bool _20;
  long unsigned int vol.6_50;

  <bb 2> [local count: 1073741823]:
  # DEBUG BEGIN_STMT
  _1 = (int) instance_28(D);
  base_30 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_30
  # DEBUG BEGIN_STMT
  state_31 = Flexcan_Ip_apxState[_1];
  # DEBUG state => state_31
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG bCurrentIntStat => 0
  # DEBUG BEGIN_STMT
  _2 = state_31->mbs[mb_idx_32(D)].pMBmessage;
  if (_2 == 0B)
    goto <bb 3>; [30.00%]
  else
    goto <bb 4>; [70.00%]

  <bb 3> [local count: 322122547]:
  # DEBUG BEGIN_STMT
  state_31->mbs[mb_idx_32(D)].pMBmessage = &data;

  <bb 4> [local count: 1073741823]:
  # DEBUG BEGIN_STMT
  # DEBUG bIsCriticalSectionNeeded => 0
  # DEBUG BEGIN_STMT
  _3 = state_31->mbs[mb_idx_32(D)].isPolling;
  if (_3 != 0)
    goto <bb 5>; [50.00%]
  else
    goto <bb 7>; [50.00%]

  <bb 5> [local count: 536870911]:
  # DEBUG BEGIN_STMT
  _4 = state_31->bIsLegacyFifoEn;
  if (_4 != 0)
    goto <bb 6>; [50.00%]
  else
    goto <bb 7>; [50.00%]

  <bb 6> [local count: 268435456]:
  # DEBUG BEGIN_STMT
  # DEBUG bIsCriticalSectionNeeded => 1
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" cpsid i");

  <bb 7> [local count: 1073741823]:
  # bIsCriticalSectionNeeded_21 = PHI <0(4), 0(5), 1(6)>
  # DEBUG bIsCriticalSectionNeeded => bIsCriticalSectionNeeded_21
  # DEBUG BEGIN_STMT
  FlexCAN_LockRxMsgBuff (base_30, mb_idx_32(D));
  # DEBUG BEGIN_STMT
  _5 = state_31->mbs[mb_idx_32(D)].pMBmessage;
  FlexCAN_GetMsgBuff (base_30, mb_idx_32(D), _5);
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (base_30, mb_idx_32(D));
  # DEBUG BEGIN_STMT
  _6 = state_31->bIsLegacyFifoEn;
  if (_6 != 0)
    goto <bb 8>; [50.00%]
  else
    goto <bb 10>; [50.00%]

  <bb 8> [local count: 536870911]:
  _7 = state_31->mbs[mb_idx_32(D)].pMBmessage;
  _8 = _7->cs;
  _9 = _8 >> 24;
  _10 = _9 & 15;
  if (_10 == 0)
    goto <bb 9>; [33.00%]
  else
    goto <bb 10>; [67.00%]

  <bb 9> [local count: 177167401]:
  # DEBUG BEGIN_STMT
  flexcan_mb_39 = FlexCAN_GetMsgBuffRegion (base_30, mb_idx_32(D));
  # DEBUG flexcan_mb => flexcan_mb_39
  # DEBUG BEGIN_STMT
  _11 ={v} *flexcan_mb_39;
  _12 = _11 & 4043309055;
  *flexcan_mb_39 ={v} _12;
  # DEBUG BEGIN_STMT
  _13 ={v} *flexcan_mb_39;
  _14 = _13 | 67108864;
  *flexcan_mb_39 ={v} _14;
  goto <bb 11>; [100.00%]

  <bb 10> [local count: 896574422]:
  # DEBUG BEGIN_STMT
  # DEBUG base => base_30
  # DEBUG INLINE_ENTRY FlexCAN_UnlockRxMsgBuff
  # DEBUG BEGIN_STMT
  vol.6_50 ={v} MEM[(const struct FLEXCAN_Type *)base_30].TIMER;

  <bb 11> [local count: 1073741823]:
  # DEBUG base => NULL
  # DEBUG BEGIN_STMT
  if (bIsCriticalSectionNeeded_21 != 0)
    goto <bb 12>; [50.00%]
  else
    goto <bb 13>; [50.00%]

  <bb 12> [local count: 536870911]:
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" cpsie i");

  <bb 13> [local count: 1073741823]:
  # DEBUG BEGIN_STMT
  state_31->mbs[mb_idx_32(D)].state ={v} 0;
  # DEBUG BEGIN_STMT
  bCurrentIntStat_44 = state_31->mbs[mb_idx_32(D)].isPolling;
  # DEBUG bCurrentIntStat => bCurrentIntStat_44
  # DEBUG BEGIN_STMT
  _15 = state_31->callback;
  if (_15 != 0B)
    goto <bb 14>; [70.00%]
  else
    goto <bb 15>; [30.00%]

  <bb 14> [local count: 751619277]:
  # DEBUG BEGIN_STMT
  _15 (instance_28(D), 0, mb_idx_32(D), state_31);

  <bb 15> [local count: 1073741823]:
  # DEBUG BEGIN_STMT
  _16 ={v} state_31->mbs[mb_idx_32(D)].state;
  if (_16 == 0)
    goto <bb 16>; [50.00%]
  else
    goto <bb 18>; [50.00%]

  <bb 16> [local count: 536870911]:
  _17 = state_31->mbs[mb_idx_32(D)].isPolling;
  if (_17 != 0)
    goto <bb 18>; [67.00%]
  else
    goto <bb 17>; [33.00%]

  <bb 17> [local count: 177167401]:
  # DEBUG BEGIN_STMT
  state_31->mbs[mb_idx_32(D)].isPolling = 1;
  # DEBUG BEGIN_STMT
  _18 = state_31->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_30, instance_28(D), mb_idx_32(D), 0, _18);
  goto <bb 21>; [100.00%]

  <bb 18> [local count: 896574422]:
  # DEBUG BEGIN_STMT
  if (bCurrentIntStat_44 != 0)
    goto <bb 21>; [50.00%]
  else
    goto <bb 19>; [50.00%]

  <bb 19> [local count: 448287211]:
  _19 = state_31->mbs[mb_idx_32(D)].isPolling;
  if (_19 != 0)
    goto <bb 20>; [33.00%]
  else
    goto <bb 21>; [67.00%]

  <bb 20> [local count: 147934780]:
  # DEBUG BEGIN_STMT
  _20 = state_31->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_30, instance_28(D), mb_idx_32(D), 0, _20);

  <bb 21> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  data ={v} {CLOBBER};
  return;

}



;; Function FlexCAN_IRQHandlerRxFIFO (FlexCAN_IRQHandlerRxFIFO, funcdef_no=46, decl_uid=6971, cgraph_uid=47, symbol_order=48)


Symbols to be put in SSA form
{ D.8222 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 23
Number of blocks to update: 22 ( 96%)


Merging blocks 9 and 16
Removing basic block 15
Removing basic block 17
Merging blocks 18 and 19
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18
;;
;; Loop 1
;;  header 10, latch 10
;;  depth 1, outer 0
;;  nodes: 10
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 18 5 14 16 }
;; 5 succs { 6 18 }
;; 6 succs { 7 8 }
;; 7 succs { 8 }
;; 8 succs { 9 18 }
;; 9 succs { 11 10 }
;; 10 succs { 10 }
;; 11 succs { 12 13 }
;; 12 succs { 13 }
;; 13 succs { 18 }
;; 14 succs { 15 18 }
;; 15 succs { 18 }
;; 16 succs { 17 18 }
;; 17 succs { 18 }
;; 18 succs { 1 }
FlexCAN_IRQHandlerRxFIFO (uint8 instance, uint32 mb_idx)
{
  struct FLEXCAN_Type * base;
  struct Flexcan_Ip_StateType * state;
  volatile boolean x;
  struct Flexcan_Ip_MsgBuffType data;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  int _1;
  struct Flexcan_Ip_MsgBuffType * _2;
  <unnamed type> _3;
  struct Flexcan_Ip_MsgBuffType * _4;
  void (*<T620>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _5;
  <unnamed type> _6;
  void (*<T620>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _7;
  void (*<T620>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _8;
  int _29;
  _Bool _32;
  _Bool x.0_33;
  <unnamed type> _34;
  _Bool _35;
  _Bool _36;
  _Bool _37;

  <bb 2> [local count: 12860702]:
  # DEBUG BEGIN_STMT
  _1 = (int) instance_12(D);
  base_14 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_14
  # DEBUG BEGIN_STMT
  state_15 = Flexcan_Ip_apxState[_1];
  # DEBUG state => state_15
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = state_15->mbs[0].pMBmessage;
  if (_2 == 0B)
    goto <bb 3>; [30.00%]
  else
    goto <bb 4>; [70.00%]

  <bb 3> [local count: 3858211]:
  # DEBUG BEGIN_STMT
  state_15->mbs[0].pMBmessage = &data;

  <bb 4> [local count: 12860702]:
  # DEBUG BEGIN_STMT
  switch (mb_idx_17(D)) <default: <L17> [25.00%], case 5: <L2> [25.00%], case 6: <L9> [25.00%], case 7: <L12> [25.00%]>

  <bb 5> [local count: 3215175]:
<L2>:
  # DEBUG BEGIN_STMT
  _3 ={v} state_15->mbs[0].state;
  if (_3 == 1)
    goto <bb 6>; [20.24%]
  else
    goto <bb 18>; [79.76%]

  <bb 6> [local count: 650752]:
  # DEBUG BEGIN_STMT
  _4 = state_15->mbs[0].pMBmessage;
  FlexCAN_ReadRxFifo (base_14, _4);
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (base_14, mb_idx_17(D));
  # DEBUG BEGIN_STMT
  state_15->mbs[0].state ={v} 0;
  # DEBUG BEGIN_STMT
  _5 = state_15->callback;
  if (_5 != 0B)
    goto <bb 7>; [70.00%]
  else
    goto <bb 8>; [30.00%]

  <bb 7> [local count: 455526]:
  # DEBUG BEGIN_STMT
  _5 (instance_12(D), 1, 0, state_15);

  <bb 8> [local count: 650752]:
  # DEBUG BEGIN_STMT
  _6 ={v} state_15->mbs[0].state;
  if (_6 == 0)
    goto <bb 9>; [33.00%]
  else
    goto <bb 18>; [67.00%]

  <bb 9> [local count: 214748]:
  # DEBUG BEGIN_STMT
  state_15->mbs[0].isPolling = 1;
  # DEBUG BEGIN_STMT
  # DEBUG instance => instance_12(D)
  # DEBUG INLINE_ENTRY FlexCAN_CompleteRxMessageFifoData
  # DEBUG BEGIN_STMT
  _29 = (int) instance_12(D);
  base_30 = Flexcan_Ip_apxBase[_29];
  # DEBUG base => base_30
  # DEBUG BEGIN_STMT
  state_31 = Flexcan_Ip_apxState[_29];
  # DEBUG state => state_31
  # DEBUG BEGIN_STMT
  _32 = instance_12(D) <= 2;
  x ={v} _32;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_33 ={v} x;
  if (x.0_33 != 0)
    goto <bb 11>; [50.00%]
  else
    goto <bb 10>; [50.00%]

  <bb 10> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 10>; [100.00%]

  <bb 11> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _34 = state_31->transferType;
  if (_34 == 0)
    goto <bb 12>; [33.00%]
  else
    goto <bb 13>; [67.00%]

  <bb 12> [local count: 35433]:
  # DEBUG BEGIN_STMT
  _35 = state_31->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_30, instance_12(D), 5, 0, _35);
  # DEBUG BEGIN_STMT
  _36 = state_31->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_30, instance_12(D), 6, 0, _36);
  # DEBUG BEGIN_STMT
  _37 = state_31->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_30, instance_12(D), 7, 0, _37);

  <bb 13> [local count: 107374]:
  # DEBUG BEGIN_STMT
  state_31->mbs[0].pMBmessage = 0B;
  # DEBUG BEGIN_STMT
  state_31->mbs[0].state ={v} 0;
  goto <bb 18>; [100.00%]

  <bb 14> [local count: 3215175]:
<L9>:
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (base_14, mb_idx_17(D));
  # DEBUG BEGIN_STMT
  _7 = state_15->callback;
  if (_7 != 0B)
    goto <bb 15>; [70.00%]
  else
    goto <bb 18>; [30.00%]

  <bb 15> [local count: 2250623]:
  # DEBUG BEGIN_STMT
  _7 (instance_12(D), 2, 0, state_15);
  goto <bb 18>; [100.00%]

  <bb 16> [local count: 3215175]:
<L12>:
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (base_14, mb_idx_17(D));
  # DEBUG BEGIN_STMT
  _8 = state_15->callback;
  if (_8 != 0B)
    goto <bb 17>; [70.00%]
  else
    goto <bb 18>; [30.00%]

  <bb 17> [local count: 2250623]:
  # DEBUG BEGIN_STMT
  _8 (instance_12(D), 3, 0, state_15);

  <bb 18> [local count: 12753328]:
<L17>:
  # DEBUG instance => NULL
  # DEBUG x => NULL
  # DEBUG state => NULL
  # DEBUG base => NULL
  data ={v} {CLOBBER};
  return;

}



;; Function FlexCAN_SetFDTimeSegments (FlexCAN_SetFDTimeSegments, funcdef_no=10, decl_uid=6685, cgraph_uid=11, symbol_order=10)


Symbols to be put in SSA form
{ D.8192 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 10
Number of blocks to update: 9 ( 90%)


Merging blocks 3 and 6
Removing basic block 4
Removing basic block 5
Removing basic block 8
Merging blocks 9 and 7
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;;
;; Loop 1
;;  header 3, latch 3
;;  depth 1, outer 0
;;  nodes: 3
;; 2 succs { 4 3 }
;; 3 succs { 3 }
;; 4 succs { 1 }
FlexCAN_SetFDTimeSegments (struct FLEXCAN_Type * base, const struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  volatile boolean x;
  _Bool _1;
  _Bool x.0_6;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _25;
  long unsigned int _26;
  long unsigned int _27;
  long unsigned int _28;
  long unsigned int _29;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  _1 = timeSeg_2(D) != 0B;
  x ={v} _1;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_6 ={v} x;
  if (x.0_6 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG base => base_5(D)
  # DEBUG timeSeg => timeSeg_2(D)
  # DEBUG INLINE_ENTRY FlexCAN_SetFDTimeSegments
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _8 ={v} base_5(D)->FDCBT;
  _9 = _8 & 3221783320;
  base_5(D)->FDCBT ={v} _9;
  # DEBUG BEGIN_STMT
  _10 ={v} base_5(D)->FDCBT;
  _11 = timeSeg_2(D)->propSeg;
  _12 = _11 << 10;
  _13 = _12 & 31744;
  _14 = timeSeg_2(D)->phaseSeg2;
  _15 = _14 & 7;
  _16 = _13 | _15;
  _17 = timeSeg_2(D)->phaseSeg1;
  _18 = _17 << 5;
  _19 = _18 & 255;
  _20 = _16 | _19;
  _21 = timeSeg_2(D)->preDivider;
  _22 = _21 << 20;
  _23 = _22 & 1072693248;
  _24 = _20 | _23;
  _25 = timeSeg_2(D)->rJumpwidth;
  _26 = _25 << 16;
  _27 = _26 & 458752;
  _28 = _24 | _27;
  _29 = _10 | _28;
  base_5(D)->FDCBT ={v} _29;
  # DEBUG base => NULL
  # DEBUG timeSeg => NULL
  # DEBUG x => NULL
  return;

}



;; Function FlexCAN_SetTimeSegments (FlexCAN_SetTimeSegments, funcdef_no=11, decl_uid=6689, cgraph_uid=12, symbol_order=11)


Symbols to be put in SSA form
{ D.8193 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 10
Number of blocks to update: 9 ( 90%)


Merging blocks 3 and 6
Removing basic block 4
Removing basic block 5
Removing basic block 8
Merging blocks 9 and 7
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;;
;; Loop 1
;;  header 3, latch 3
;;  depth 1, outer 0
;;  nodes: 3
;; 2 succs { 4 3 }
;; 3 succs { 3 }
;; 4 succs { 1 }
FlexCAN_SetTimeSegments (struct FLEXCAN_Type * base, const struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  volatile boolean x;
  _Bool _1;
  _Bool x.0_6;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _25;
  long unsigned int _26;
  long unsigned int _27;
  long unsigned int _28;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  _1 = timeSeg_2(D) != 0B;
  x ={v} _1;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_6 ={v} x;
  if (x.0_6 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG base => base_5(D)
  # DEBUG timeSeg => timeSeg_2(D)
  # DEBUG INLINE_ENTRY FlexCAN_SetTimeSegments
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _8 ={v} base_5(D)->CTRL1;
  _9 = _8 & 65528;
  base_5(D)->CTRL1 ={v} _9;
  # DEBUG BEGIN_STMT
  _10 ={v} base_5(D)->CTRL1;
  _11 = timeSeg_2(D)->propSeg;
  _12 = _11 & 7;
  _13 = timeSeg_2(D)->phaseSeg2;
  _14 = _13 << 16;
  _15 = _14 & 458752;
  _16 = _12 | _15;
  _17 = timeSeg_2(D)->phaseSeg1;
  _18 = _17 << 19;
  _19 = _18 & 3670016;
  _20 = _16 | _19;
  _21 = timeSeg_2(D)->preDivider;
  _22 = _21 << 24;
  _23 = _20 | _22;
  _24 = timeSeg_2(D)->rJumpwidth;
  _25 = _24 << 22;
  _26 = _25 & 12582912;
  _27 = _23 | _26;
  _28 = _10 | _27;
  base_5(D)->CTRL1 ={v} _28;
  # DEBUG base => NULL
  # DEBUG timeSeg => NULL
  # DEBUG x => NULL
  return;

}



;; Function FlexCAN_SetExtendedTimeSegments (FlexCAN_SetExtendedTimeSegments, funcdef_no=12, decl_uid=6693, cgraph_uid=13, symbol_order=12)


Symbols to be put in SSA form
{ D.8194 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 10
Number of blocks to update: 9 ( 90%)


Merging blocks 3 and 6
Removing basic block 4
Removing basic block 5
Removing basic block 8
Merging blocks 9 and 7
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;;
;; Loop 1
;;  header 3, latch 3
;;  depth 1, outer 0
;;  nodes: 3
;; 2 succs { 4 3 }
;; 3 succs { 3 }
;; 4 succs { 1 }
FlexCAN_SetExtendedTimeSegments (struct FLEXCAN_Type * base, const struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  volatile boolean x;
  _Bool _1;
  _Bool x.0_6;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _25;
  long unsigned int _26;
  long unsigned int _27;
  long unsigned int _28;
  long unsigned int _29;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  _1 = timeSeg_2(D) != 0B;
  x ={v} _1;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_6 ={v} x;
  if (x.0_6 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG base => base_5(D)
  # DEBUG timeSeg => timeSeg_2(D)
  # DEBUG INLINE_ENTRY FlexCAN_SetExtendedTimeSegments
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _8 ={v} base_5(D)->CBT;
  _9 = _8 & 2147483648;
  base_5(D)->CBT ={v} _9;
  # DEBUG BEGIN_STMT
  _10 ={v} base_5(D)->CBT;
  _11 = timeSeg_2(D)->propSeg;
  _12 = _11 << 10;
  _13 = _12 & 65535;
  _14 = timeSeg_2(D)->phaseSeg2;
  _15 = _14 & 31;
  _16 = _13 | _15;
  _17 = timeSeg_2(D)->phaseSeg1;
  _18 = _17 << 5;
  _19 = _18 & 992;
  _20 = _16 | _19;
  _21 = timeSeg_2(D)->preDivider;
  _22 = _21 << 21;
  _23 = _22 & 2145386496;
  _24 = _20 | _23;
  _25 = timeSeg_2(D)->rJumpwidth;
  _26 = _25 << 16;
  _27 = _26 & 2031616;
  _28 = _24 | _27;
  _29 = _10 | _28;
  base_5(D)->CBT ={v} _29;
  # DEBUG base => NULL
  # DEBUG timeSeg => NULL
  # DEBUG x => NULL
  return;

}



;; Function FlexCAN_StartRxMessageFifoData.part.0 (FlexCAN_StartRxMessageFifoData.part.0, funcdef_no=107, decl_uid=8346, cgraph_uid=160, symbol_order=161)

FlexCAN_StartRxMessageFifoData.part.0 (uint8 instance, struct Flexcan_Ip_MsgBuffType * data)
{
  struct FLEXCAN_Type * base;
  struct Flexcan_Ip_StateType * state;
  Flexcan_Ip_StatusType eResult;
  volatile boolean x;
  int _2;
  _Bool _5;
  <unnamed type> _6;
  <unnamed type> _7;
  _Bool _9;
  _Bool _10;
  _Bool _11;

  <bb 9> [local count: 1073741824]:

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _2 = (int) instance_1(D);
  base_3 = Flexcan_Ip_apxBase[_2];
  # DEBUG base => base_3
  # DEBUG BEGIN_STMT
  state_4 = Flexcan_Ip_apxState[_2];
  # DEBUG state => state_4
  # DEBUG BEGIN_STMT
  _5 = state_4->bIsLegacyFifoEn;
  if (_5 != 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 3> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  _6 ={v} state_4->mbs[0].state;
  if (_6 != 0)
    goto <bb 8>; [35.00%]
  else
    goto <bb 4>; [65.00%]

  <bb 4> [local count: 348966093]:
  # DEBUG BEGIN_STMT
  state_4->mbs[0].state ={v} 1;
  # DEBUG BEGIN_STMT
  _7 = state_4->transferType;
  if (_7 == 1)
    goto <bb 5>; [34.00%]
  else
    goto <bb 6>; [66.00%]

  <bb 5> [local count: 118648472]:
  # DEBUG BEGIN_STMT
  state_4->mbs[0].isPolling = 1;

  <bb 6> [local count: 348966093]:
  # DEBUG BEGIN_STMT
  state_4->mbs[0].pMBmessage = data_8(D);
  # DEBUG BEGIN_STMT
  if (_7 == 0)
    goto <bb 7>; [33.00%]
  else
    goto <bb 8>; [67.00%]

  <bb 7> [local count: 115158811]:
  # DEBUG BEGIN_STMT
  state_4->mbs[0].isPolling = 0;
  # DEBUG BEGIN_STMT
  _9 = state_4->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_3, instance_1(D), 6, 1, _9);
  # DEBUG BEGIN_STMT
  _10 = state_4->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_3, instance_1(D), 7, 1, _10);
  # DEBUG BEGIN_STMT
  _11 = state_4->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_3, instance_1(D), 5, 1, _11);

  <bb 8> [local count: 1073741824]:
  # eResult_12 = PHI <1(2), 2(3), 0(6), 0(7)>
  # DEBUG eResult => eResult_12
  # DEBUG BEGIN_STMT
  return eResult_12;

}



;; Function FlexCAN_Ip_Init_Privileged (FlexCAN_Ip_Init_Privileged, funcdef_no=50, decl_uid=6369, cgraph_uid=51, symbol_order=52)


Symbols to be put in SSA form
{ D.8226 D.8611 D.8622 D.8626 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 61
Number of blocks to update: 60 ( 98%)


Merging blocks 3 and 23
Merging blocks 5 and 22
Merging blocks 8 and 21
Merging blocks 9 and 25
Merging blocks 10 and 58
Removing basic block 18
Removing basic block 19
Removing basic block 20
Merging blocks 29 and 36
Merging blocks 32 and 40
Merging blocks 33 and 46
Merging blocks 34 and 24
Merging blocks 38 and 35
Removing basic block 39
Merging blocks 48 and 54
Merging blocks 52 and 45
Merging blocks 56 and 53
Merging blocks 60 and 57
;; 5 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42
;;
;; Loop 1
;;  header 40, latch 39
;;  depth 1, outer 0
;;  nodes: 40 39
;;
;; Loop 4
;;  header 8, latch 8
;;  depth 1, outer 0
;;  nodes: 8
;;
;; Loop 2
;;  header 5, latch 5
;;  depth 1, outer 0
;;  nodes: 5
;;
;; Loop 3
;;  header 3, latch 3
;;  depth 1, outer 0
;;  nodes: 3
;; 2 succs { 4 3 }
;; 3 succs { 3 }
;; 4 succs { 6 5 }
;; 5 succs { 5 }
;; 6 succs { 7 9 }
;; 7 succs { 9 8 }
;; 8 succs { 8 }
;; 9 succs { 10 13 }
;; 10 succs { 11 12 }
;; 11 succs { 12 }
;; 12 succs { 13 32 }
;; 13 succs { 15 14 }
;; 14 succs { 15 }
;; 15 succs { 16 17 }
;; 16 succs { 32 }
;; 17 succs { 18 23 }
;; 18 succs { 20 19 }
;; 19 succs { 20 }
;; 20 succs { 22 21 }
;; 21 succs { 22 }
;; 22 succs { 23 }
;; 23 succs { 24 25 }
;; 24 succs { 25 }
;; 25 succs { 26 27 }
;; 26 succs { 27 }
;; 27 succs { 28 29 }
;; 28 succs { 31 }
;; 29 succs { 30 31 }
;; 30 succs { 31 }
;; 31 succs { 32 }
;; 32 succs { 33 42 }
;; 33 succs { 35 34 }
;; 34 succs { 35 }
;; 35 succs { 36 37 }
;; 36 succs { 38 }
;; 37 succs { 38 }
;; 38 succs { 40 }
;; 39 succs { 40 }
;; 40 succs { 39 41 }
;; 41 succs { 42 }
;; 42 succs { 1 }
FlexCAN_Ip_Init_Privileged (uint8 Flexcan_Ip_u8Instance, struct Flexcan_Ip_StateType * Flexcan_Ip_pState, const struct Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
  Flexcan_Ip_StatusType eResult;
  Flexcan_Ip_StatusType D.8626;
  Flexcan_Ip_StatusType eResult;
  Flexcan_Ip_StatusType D.8622;
  Flexcan_Ip_StatusType eResult;
  Flexcan_Ip_StatusType D.8611;
  volatile boolean x;
  volatile boolean x;
  volatile boolean x;
  uint32 i;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType eResult;
  int _1;
  _Bool _2;
  _Bool _3;
  _Bool _4;
  _Bool _5;
  _Bool _6;
  _Bool _7;
  _Bool _8;
  _Bool _9;
  const struct Flexcan_Ip_TimeSegmentType * _10;
  const struct Flexcan_Ip_TimeSegmentType * _11;
  const struct Flexcan_Ip_TimeSegmentType * _12;
  <unnamed type> _13;
  <unnamed type> _14;
  void (*<T626>) (uint8, Flexcan_Ip_EventType, uint32, const struct Flexcan_Ip_StateType *) _15;
  void (*<T626>) (uint8, Flexcan_Ip_EventType, uint32, const struct Flexcan_Ip_StateType *) _16;
  _Bool _17;
  long unsigned int _18;
  _Bool x.0_51;
  _Bool x.0_52;
  _Bool x.0_53;
  long unsigned int _57;
  signed int _58;
  _Bool _62;
  long unsigned int _63;
  long unsigned int _64;
  _Bool _66;
  _Bool _67;
  _Bool _68;
  long unsigned int _69;
  long unsigned int _72;
  long unsigned int _73;
  long unsigned int iftmp.1_74;
  long unsigned int _75;
  long unsigned int _76;
  long unsigned int _77;
  long unsigned int iftmp.2_78;
  long unsigned int _79;
  long unsigned int _80;
  long unsigned int _81;
  long unsigned int iftmp.3_82;
  long unsigned int _83;
  long unsigned int _84;
  long unsigned int _85;
  <unnamed type> _86;
  long unsigned int _87;
  long unsigned int _88;
  long unsigned int _89;
  const struct Flexcan_Ip_PayloadSizeType * _91;
  long unsigned int _92;
  _Bool _95;
  <unnamed type> _96;
  long unsigned int _99;
  long unsigned int _100;
  long unsigned int iftmp.5_101;
  long unsigned int _102;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  # DEBUG eResult => 0
  # DEBUG BEGIN_STMT
  _1 = (int) Flexcan_Ip_u8Instance_24(D);
  pBase_26 = Flexcan_Ip_apxBase[_1];
  # DEBUG pBase => pBase_26
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _2 = Flexcan_Ip_u8Instance_24(D) <= 2;
  x ={v} _2;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_52 ={v} x;
  if (x.0_52 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _3 = Flexcan_Ip_pData_27(D) != 0B;
  x ={v} _3;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_51 ={v} x;
  if (x.0_51 != 0)
    goto <bb 6>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 5> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 5>; [100.00%]

  <bb 6> [local count: 53687]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _4 = Flexcan_Ip_pData_27(D)->fd_enable;
  if (_4 != 0)
    goto <bb 7>; [50.00%]
  else
    goto <bb 9>; [50.00%]

  <bb 7> [local count: 26844]:
  # DEBUG BEGIN_STMT
  _5 = FlexCAN_IsFDAvailable (pBase_26);
  _6 = Flexcan_Ip_pData_27(D)->fd_enable;
  _7 = _5 == _6;
  x ={v} _7;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_53 ={v} x;
  if (x.0_53 != 0)
    goto <bb 9>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 8> [local count: 134217728]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 8>; [100.00%]

  <bb 9> [local count: 40265]:
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  # DEBUG pBase => pBase_26
  # DEBUG Flexcan_Ip_pData => Flexcan_Ip_pData_27(D)
  # DEBUG INLINE_ENTRY FlexCAN_InitController
  # DEBUG BEGIN_STMT
  # DEBUG eResult => 0
  # DEBUG BEGIN_STMT
  # DEBUG pBase => pBase_26
  # DEBUG INLINE_ENTRY FlexCAN_IsEnabled
  # DEBUG BEGIN_STMT
  _57 ={v} MEM[(const struct FLEXCAN_Type *)pBase_26].MCR;
  _58 = (signed int) _57;
  # DEBUG pBase => NULL
  if (_58 >= 0)
    goto <bb 10>; [59.00%]
  else
    goto <bb 13>; [41.00%]

  <bb 10> [local count: 23756]:
  # DEBUG BEGIN_STMT
  eResult_59 = FlexCAN_EnterFreezeMode (pBase_26);
  # DEBUG eResult => eResult_59
  # DEBUG BEGIN_STMT
  if (eResult_59 == 0)
    goto <bb 11>; [33.00%]
  else
    goto <bb 12>; [67.00%]

  <bb 11> [local count: 7840]:
  # DEBUG BEGIN_STMT
  eResult_60 = FlexCAN_Disable (pBase_26);
  # DEBUG eResult => eResult_60

  <bb 12> [local count: 23756]:
  # eResult_61 = PHI <eResult_59(10), eResult_60(11)>
  # DEBUG eResult => eResult_61
  # DEBUG BEGIN_STMT
  if (eResult_61 == 0)
    goto <bb 13>; [50.00%]
  else
    goto <bb 32>; [50.00%]

  <bb 13> [local count: 28387]:
  # DEBUG eResult => NULL
  # DEBUG BEGIN_STMT
  _62 = Flexcan_Ip_pData_27(D)->is_pe_clock;
  # DEBUG base => pBase_26
  # DEBUG enable => _62
  # DEBUG INLINE_ENTRY FlexCAN_SetClkSrc
  # DEBUG BEGIN_STMT
  _72 ={v} pBase_26->CTRL1;
  _73 = _72 & 4294959103;
  if (_62 != 0)
    goto <bb 15>; [50.00%]
  else
    goto <bb 14>; [50.00%]

  <bb 14> [local count: 14194]:

  <bb 15> [local count: 28387]:
  # iftmp.1_74 = PHI <8192(13), 0(14)>
  _75 = _73 | iftmp.1_74;
  pBase_26->CTRL1 ={v} _75;
  # DEBUG base => NULL
  # DEBUG enable => NULL
  # DEBUG BEGIN_STMT
  _63 ={v} pBase_26->MCR;
  _64 = _63 & 2147483647;
  pBase_26->MCR ={v} _64;
  # DEBUG BEGIN_STMT
  eResult_65 = FlexCAN_Init (pBase_26);
  # DEBUG eResult => eResult_65
  # DEBUG BEGIN_STMT
  if (eResult_65 != 0)
    goto <bb 16>; [50.00%]
  else
    goto <bb 17>; [50.00%]

  <bb 16> [local count: 14194]:
  # DEBUG BEGIN_STMT
  FlexCAN_EnterFreezeMode (pBase_26);
  # DEBUG BEGIN_STMT
  FlexCAN_Disable (pBase_26);
  goto <bb 32>; [100.00%]

  <bb 17> [local count: 14194]:
  # DEBUG BEGIN_STMT
  _66 = FlexCAN_IsFDAvailable (pBase_26);
  if (_66 != 0)
    goto <bb 18>; [33.00%]
  else
    goto <bb 23>; [67.00%]

  <bb 18> [local count: 4684]:
  # DEBUG BEGIN_STMT
  _67 = Flexcan_Ip_pData_27(D)->fd_enable;
  _68 = Flexcan_Ip_pData_27(D)->bitRateSwitch;
  # DEBUG base => pBase_26
  # DEBUG enableFD => _67
  # DEBUG enableBRS => _68
  # DEBUG INLINE_ENTRY FlexCAN_SetFDEnabled
  # DEBUG BEGIN_STMT
  _76 ={v} pBase_26->MCR;
  _77 = _76 & 4294965247;
  if (_67 != 0)
    goto <bb 20>; [50.00%]
  else
    goto <bb 19>; [50.00%]

  <bb 19> [local count: 2342]:

  <bb 20> [local count: 4684]:
  # iftmp.2_78 = PHI <2048(18), 0(19)>
  _79 = _77 | iftmp.2_78;
  pBase_26->MCR ={v} _79;
  # DEBUG BEGIN_STMT
  _80 ={v} pBase_26->FDCTRL;
  _81 = _80 & 2147483647;
  if (_68 != 0)
    goto <bb 22>; [50.00%]
  else
    goto <bb 21>; [50.00%]

  <bb 21> [local count: 2342]:

  <bb 22> [local count: 4684]:
  # iftmp.3_82 = PHI <2147483648(20), 0(21)>
  _83 = _81 | iftmp.3_82;
  pBase_26->FDCTRL ={v} _83;
  # DEBUG BEGIN_STMT
  _84 ={v} pBase_26->FDCTRL;
  _85 = _84 & 4294926591;
  pBase_26->FDCTRL ={v} _85;

  <bb 23> [local count: 14194]:
  # DEBUG base => NULL
  # DEBUG enableFD => NULL
  # DEBUG enableBRS => NULL
  # DEBUG BEGIN_STMT
  _69 = Flexcan_Ip_pData_27(D)->ctrlOptions;
  FlexCAN_ConfigCtrlOptions (pBase_26, _69);
  # DEBUG BEGIN_STMT
  # DEBUG pBase => pBase_26
  # DEBUG Flexcan_Ip_pData => Flexcan_Ip_pData_27(D)
  # DEBUG INLINE_ENTRY FlexCAN_InitCtroll
  # DEBUG BEGIN_STMT
  # DEBUG eResult => 0
  # DEBUG BEGIN_STMT
  _86 = Flexcan_Ip_pData_27(D)->flexcanMode;
  if (_86 != 2)
    goto <bb 24>; [66.00%]
  else
    goto <bb 25>; [34.00%]

  <bb 24> [local count: 9368]:
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_26
  # DEBUG enable => 0
  # DEBUG INLINE_ENTRY FlexCAN_SetSelfReception
  # DEBUG BEGIN_STMT
  _87 ={v} pBase_26->MCR;
  _88 = _87 & 4294836223;
  _89 = _88 | 131072;
  pBase_26->MCR ={v} _89;

  <bb 25> [local count: 14194]:
  # DEBUG base => NULL
  # DEBUG enable => NULL
  # DEBUG BEGIN_STMT
  # DEBUG pBase => pBase_26
  # DEBUG Flexcan_Ip_pData => Flexcan_Ip_pData_27(D)
  # DEBUG INLINE_ENTRY FlexCAN_InitRxFifo
  # DEBUG BEGIN_STMT
  # DEBUG eResult => 0
  # DEBUG BEGIN_STMT
  _95 = Flexcan_Ip_pData_27(D)->is_rx_fifo_needed;
  if (_95 != 0)
    goto <bb 26>; [33.00%]
  else
    goto <bb 27>; [67.00%]

  <bb 26> [local count: 4684]:
  # DEBUG BEGIN_STMT
  _96 = Flexcan_Ip_pData_27(D)->num_id_filters;
  eResult_97 = FlexCAN_EnableRxFifo (pBase_26, _96);
  # DEBUG eResult => eResult_97

  <bb 27> [local count: 14194]:
  # eResult_98 = PHI <0(25), eResult_97(26)>
  # DEBUG eResult => eResult_98
  # DEBUG BEGIN_STMT
  _122 = eResult_98;
  # DEBUG pBase => NULL
  # DEBUG Flexcan_Ip_pData => NULL
  # DEBUG eResult => NULL
  eResult_90 = _122;
  # DEBUG eResult => eResult_90
  # DEBUG BEGIN_STMT
  if (eResult_90 != 0)
    goto <bb 28>; [50.00%]
  else
    goto <bb 29>; [50.00%]

  <bb 28> [local count: 7097]:
  # DEBUG BEGIN_STMT
  FlexCAN_EnterFreezeMode (pBase_26);
  # DEBUG BEGIN_STMT
  FlexCAN_Disable (pBase_26);
  goto <bb 31>; [100.00%]

  <bb 29> [local count: 7097]:
  # DEBUG BEGIN_STMT
  _91 = &Flexcan_Ip_pData_27(D)->payload;
  FlexCAN_SetPayloadSize (pBase_26, _91);
  # DEBUG BEGIN_STMT
  _92 = Flexcan_Ip_pData_27(D)->max_num_mb;
  eResult_93 = FlexCAN_SetMaxMsgBuffNum (pBase_26, _92);
  # DEBUG eResult => eResult_93
  # DEBUG BEGIN_STMT
  if (eResult_93 != 0)
    goto <bb 30>; [33.00%]
  else
    goto <bb 31>; [67.00%]

  <bb 30> [local count: 2342]:
  # DEBUG BEGIN_STMT
  FlexCAN_EnterFreezeMode (pBase_26);
  # DEBUG BEGIN_STMT
  FlexCAN_Disable (pBase_26);

  <bb 31> [local count: 14194]:
  # eResult_94 = PHI <eResult_90(28), eResult_93(29), eResult_93(30)>
  # DEBUG eResult => eResult_94
  # DEBUG BEGIN_STMT
  _129 = eResult_94;
  # DEBUG pBase => NULL
  # DEBUG Flexcan_Ip_pData => NULL
  # DEBUG eResult => NULL
  eResult_70 = _129;
  # DEBUG eResult => eResult_70

  <bb 32> [local count: 40265]:
  # eResult_71 = PHI <eResult_61(12), eResult_65(16), eResult_70(31)>
  # DEBUG eResult => eResult_71
  # DEBUG BEGIN_STMT
  _132 = eResult_71;
  # DEBUG pBase => NULL
  # DEBUG Flexcan_Ip_pData => NULL
  # DEBUG eResult => NULL
  eResult_30 = _132;
  # DEBUG eResult => eResult_30
  # DEBUG BEGIN_STMT
  if (eResult_30 == 0)
    goto <bb 33>; [33.00%]
  else
    goto <bb 42>; [67.00%]

  <bb 33> [local count: 13288]:
  # DEBUG BEGIN_STMT
  _8 = Flexcan_Ip_pData_27(D)->fd_enable;
  # DEBUG base => pBase_26
  # DEBUG enableCBT => _8
  # DEBUG INLINE_ENTRY FlexCAN_EnableExtCbt
  # DEBUG BEGIN_STMT
  _99 ={v} pBase_26->CBT;
  _100 = _99 & 2147483647;
  if (_8 != 0)
    goto <bb 35>; [50.00%]
  else
    goto <bb 34>; [50.00%]

  <bb 34> [local count: 6644]:

  <bb 35> [local count: 13288]:
  # iftmp.5_101 = PHI <2147483648(33), 0(34)>
  _102 = _100 | iftmp.5_101;
  pBase_26->CBT ={v} _102;
  # DEBUG base => NULL
  # DEBUG enableCBT => NULL
  # DEBUG BEGIN_STMT
  _9 = Flexcan_Ip_pData_27(D)->fd_enable;
  if (_9 != 0)
    goto <bb 36>; [50.00%]
  else
    goto <bb 37>; [50.00%]

  <bb 36> [local count: 6644]:
  # DEBUG BEGIN_STMT
  _10 = &Flexcan_Ip_pData_27(D)->bitrate;
  FlexCAN_SetExtendedTimeSegments (pBase_26, _10);
  # DEBUG BEGIN_STMT
  _11 = &Flexcan_Ip_pData_27(D)->bitrate_cbt;
  FlexCAN_SetFDTimeSegments (pBase_26, _11);
  goto <bb 38>; [100.00%]

  <bb 37> [local count: 6644]:
  # DEBUG BEGIN_STMT
  _12 = &Flexcan_Ip_pData_27(D)->bitrate;
  FlexCAN_SetTimeSegments (pBase_26, _12);

  <bb 38> [local count: 13288]:
  # DEBUG BEGIN_STMT
  _13 = Flexcan_Ip_pData_27(D)->flexcanMode;
  FlexCAN_SetOperationMode (pBase_26, _13);
  # DEBUG BEGIN_STMT
  # DEBUG i => 0
  goto <bb 40>; [100.00%]

  <bb 39> [local count: 425245]:
  # DEBUG BEGIN_STMT
  Flexcan_Ip_pState_36(D)->mbs[i_19].isPolling = 1;
  # DEBUG BEGIN_STMT
  Flexcan_Ip_pState_36(D)->mbs[i_19].pMBmessage = 0B;
  # DEBUG BEGIN_STMT
  Flexcan_Ip_pState_36(D)->mbs[i_19].state ={v} 0;
  # DEBUG BEGIN_STMT
  Flexcan_Ip_pState_36(D)->mbs[i_19].time_stamp = 0;
  # DEBUG BEGIN_STMT
  i_50 = i_19 + 1;
  # DEBUG i => i_50

  <bb 40> [local count: 438532]:
  # i_19 = PHI <0(38), i_50(39)>
  # DEBUG i => i_19
  # DEBUG BEGIN_STMT
  if (i_19 != 32)
    goto <bb 39>; [96.97%]
  else
    goto <bb 41>; [3.03%]

  <bb 41> [local count: 13288]:
  # DEBUG BEGIN_STMT
  _14 = Flexcan_Ip_pData_27(D)->transfer_type;
  Flexcan_Ip_pState_36(D)->transferType = _14;
  # DEBUG BEGIN_STMT
  _15 = Flexcan_Ip_pData_27(D)->Callback;
  Flexcan_Ip_pState_36(D)->callback = _15;
  # DEBUG BEGIN_STMT
  Flexcan_Ip_pState_36(D)->callbackParam = 0B;
  # DEBUG BEGIN_STMT
  _16 = Flexcan_Ip_pData_27(D)->ErrorCallback;
  Flexcan_Ip_pState_36(D)->error_callback = _16;
  # DEBUG BEGIN_STMT
  Flexcan_Ip_pState_36(D)->errorCallbackParam = 0B;
  # DEBUG BEGIN_STMT
  _17 = Flexcan_Ip_pData_27(D)->is_rx_fifo_needed;
  Flexcan_Ip_pState_36(D)->bIsLegacyFifoEn = _17;
  # DEBUG BEGIN_STMT
  _18 = Flexcan_Ip_pData_27(D)->max_num_mb;
  Flexcan_Ip_pState_36(D)->u32MaxMbNum = _18;
  # DEBUG BEGIN_STMT
  Flexcan_Ip_pState_36(D)->isIntActive = 1;
  # DEBUG BEGIN_STMT
  Flexcan_Ip_apxState[_1] = Flexcan_Ip_pState_36(D);

  <bb 42> [local count: 40265]:
  # DEBUG BEGIN_STMT
  return eResult_30;

}



;; Function FlexCAN_Ip_Send (FlexCAN_Ip_Send, funcdef_no=51, decl_uid=6442, cgraph_uid=52, symbol_order=53)

FlexCAN_Ip_Send (uint8 instance, uint8 mb_idx, const struct Flexcan_Ip_DataInfoType * tx_info, uint32 msg_id, const uint8 * mb_data)
{
  volatile boolean x;
  volatile boolean x;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType result;
  int _1;
  _Bool _2;
  _Bool _3;
  _Bool _4;
  long unsigned int _5;
  _Bool _6;
  long unsigned int _21;
  long unsigned int _22;
  _Bool x.0_23;
  _Bool x.0_24;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  # DEBUG result => 1
  # DEBUG BEGIN_STMT
  _1 = (int) instance_9(D);
  base_11 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_11
  # DEBUG BEGIN_STMT
  state_12 = Flexcan_Ip_apxState[_1];
  # DEBUG state => state_12
  # DEBUG BEGIN_STMT
  _2 = instance_9(D) <= 2;
  x ={v} _2;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_24 ={v} x;
  if (x.0_24 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 12>; [50.00%]

  <bb 12> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 14> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _3 = tx_info_13(D) != 0B;
  x ={v} _3;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_23 ={v} x;
  if (x.0_23 != 0)
    goto <bb 6>; [50.00%]
  else
    goto <bb 11>; [50.00%]

  <bb 11> [local count: 53687]:

  <bb 5> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 13> [local count: 536870913]:
  goto <bb 5>; [100.00%]

  <bb 6> [local count: 53687]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  # DEBUG base => base_11
  # DEBUG INLINE_ENTRY FlexCAN_IsListenOnlyModeEnabled
  # DEBUG BEGIN_STMT
  _21 ={v} MEM[(const struct FLEXCAN_Type *)base_11].CTRL1;
  _22 = _21 & 8;
  # DEBUG base => NULL
  if (_22 == 0)
    goto <bb 7>; [33.00%]
  else
    goto <bb 10>; [67.00%]

  <bb 7> [local count: 17717]:
  # DEBUG BEGIN_STMT
  result_18 = FlexCAN_StartSendData (instance_9(D), mb_idx_14(D), tx_info_13(D), msg_id_15(D), mb_data_16(D));
  # DEBUG result => result_18
  # DEBUG BEGIN_STMT
  if (result_18 == 0)
    goto <bb 8>; [50.00%]
  else
    goto <bb 10>; [50.00%]

  <bb 8> [local count: 8858]:
  _4 = tx_info_13(D)->is_polling;
  if (_4 != 0)
    goto <bb 10>; [67.00%]
  else
    goto <bb 9>; [33.00%]

  <bb 9> [local count: 2923]:
  # DEBUG BEGIN_STMT
  _5 = (long unsigned int) mb_idx_14(D);
  _6 = state_12->isIntActive;
  result_20 = FlexCAN_SetMsgBuffIntCmd (base_11, instance_9(D), _5, 1, _6);
  # DEBUG result => result_20

  <bb 10> [local count: 53687]:
  # result_7 = PHI <1(6), result_18(7), 0(8), result_20(9)>
  # DEBUG result => result_7
  # DEBUG BEGIN_STMT
  return result_7;

}



;; Function FlexCAN_Ip_ConfigRxMb (FlexCAN_Ip_ConfigRxMb, funcdef_no=52, decl_uid=6466, cgraph_uid=53, symbol_order=54)

FlexCAN_Ip_ConfigRxMb (uint8 instance, uint8 mb_idx, const struct Flexcan_Ip_DataInfoType * rx_info, uint32 msg_id)
{
  volatile boolean x;
  volatile boolean x;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  struct Flexcan_Ip_MsbuffCodeStatusType cs;
  Flexcan_Ip_StatusType eResult;
  int _1;
  _Bool _2;
  _Bool _3;
  _Bool _4;
  long unsigned int _5;
  _Bool _6;
  long unsigned int _7;
  long unsigned int _8;
  <unnamed type> _9;
  _Bool _10;
  _Bool x.0_32;
  _Bool x.0_33;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  # DEBUG eResult => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) instance_13(D);
  base_15 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_15
  # DEBUG BEGIN_STMT
  state_16 = Flexcan_Ip_apxState[_1];
  # DEBUG state => state_16
  # DEBUG BEGIN_STMT
  _2 = instance_13(D) <= 2;
  x ={v} _2;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_33 ={v} x;
  if (x.0_33 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 10>; [50.00%]

  <bb 10> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 12> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _3 = rx_info_17(D) != 0B;
  x ={v} _3;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_32 ={v} x;
  if (x.0_32 != 0)
    goto <bb 6>; [50.00%]
  else
    goto <bb 9>; [50.00%]

  <bb 9> [local count: 53687]:

  <bb 5> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 11> [local count: 536870913]:
  goto <bb 5>; [100.00%]

  <bb 6> [local count: 53687]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _4 = state_16->bIsLegacyFifoEn;
  _5 = state_16->u32MaxMbNum;
  _6 = FlexCAN_IsMbOutOfRange (base_15, mb_idx_18(D), _4, _5);
  if (_6 != 0)
    goto <bb 8>; [52.23%]
  else
    goto <bb 7>; [47.77%]

  <bb 7> [local count: 25646]:
  # DEBUG BEGIN_STMT
  _7 = (long unsigned int) mb_idx_18(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (base_15, _7);
  # DEBUG BEGIN_STMT
  _8 = rx_info_17(D)->data_length;
  cs.dataLen = _8;
  # DEBUG BEGIN_STMT
  _9 = rx_info_17(D)->msg_id_type;
  cs.msgIdType = _9;
  # DEBUG BEGIN_STMT
  _10 = rx_info_17(D)->fd_enable;
  cs.fd_enable = _10;
  # DEBUG BEGIN_STMT
  cs.code = 15;
  # DEBUG BEGIN_STMT
  FlexCAN_SetRxMsgBuff (base_15, _7, &cs, msg_id_25(D));
  # DEBUG BEGIN_STMT
  cs.code = 0;
  # DEBUG BEGIN_STMT
  FlexCAN_SetRxMsgBuff (base_15, _7, &cs, msg_id_25(D));
  # DEBUG BEGIN_STMT
  cs.code = 4;
  # DEBUG BEGIN_STMT
  FlexCAN_SetRxMsgBuff (base_15, _7, &cs, msg_id_25(D));

  <bb 8> [local count: 53687]:
  # eResult_11 = PHI <4(6), 0(7)>
  # DEBUG eResult => eResult_11
  # DEBUG BEGIN_STMT
  cs ={v} {CLOBBER};
  return eResult_11;

}



;; Function FlexCAN_Ip_Receive (FlexCAN_Ip_Receive, funcdef_no=53, decl_uid=6454, cgraph_uid=54, symbol_order=55)

FlexCAN_Ip_Receive (uint8 instance, uint8 mb_idx, struct Flexcan_Ip_MsgBuffType * data, boolean isPolling)
{
  volatile boolean x;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType result;
  int _1;
  _Bool _2;
  long unsigned int _3;
  _Bool _4;
  _Bool x.0_18;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) instance_7(D);
  base_9 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_9
  # DEBUG BEGIN_STMT
  state_10 = Flexcan_Ip_apxState[_1];
  # DEBUG state => state_10
  # DEBUG BEGIN_STMT
  _2 = instance_7(D) <= 2;
  x ={v} _2;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_18 ={v} x;
  if (x.0_18 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 8> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 9> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  result_15 = FlexCAN_StartRxMessageBufferData (instance_7(D), mb_idx_11(D), data_12(D), isPolling_13(D));
  # DEBUG result => result_15
  # DEBUG BEGIN_STMT
  if (result_15 == 0)
    goto <bb 5>; [50.00%]
  else
    goto <bb 7>; [50.00%]

  <bb 5> [local count: 53687]:
  if (isPolling_13(D) != 0)
    goto <bb 7>; [67.00%]
  else
    goto <bb 6>; [33.00%]

  <bb 6> [local count: 17717]:
  # DEBUG BEGIN_STMT
  _3 = (long unsigned int) mb_idx_11(D);
  _4 = state_10->isIntActive;
  result_17 = FlexCAN_SetMsgBuffIntCmd (base_9, instance_7(D), _3, 1, _4);
  # DEBUG result => result_17

  <bb 7> [local count: 107374]:
  # result_5 = PHI <result_15(4), 0(5), result_17(6)>
  # DEBUG result => result_5
  # DEBUG BEGIN_STMT
  return result_5;

}



;; Function FlexCAN_Ip_ReceiveBlocking (FlexCAN_Ip_ReceiveBlocking, funcdef_no=54, decl_uid=6513, cgraph_uid=55, symbol_order=56)

FlexCAN_Ip_ReceiveBlocking (uint8 instance, uint8 mb_idx, struct Flexcan_Ip_MsgBuffType * data, boolean isPolling, uint32 u32TimeoutMs)
{
  volatile boolean x;
  struct FLEXCAN_Type * base;
  struct Flexcan_Ip_StateType * state;
  uint32 mS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  Flexcan_Ip_StatusType result;
  long unsigned int _1;
  _Bool _2;
  int _3;
  long unsigned int _4;
  _Bool _5;
  long unsigned int _6;
  long unsigned int _7;
  unsigned char _8;
  int _9;
  <unnamed type> _10;
  long unsigned int _11;
  _Bool _12;
  int _13;
  <unnamed type> _14;
  long unsigned int _45;
  _Bool x.0_50;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  timeStart = 0;
  # DEBUG BEGIN_STMT
  # DEBUG timeElapsed => 0
  # DEBUG BEGIN_STMT
  _1 = u32TimeoutMs_27(D) * 1000;
  mS2Ticks_29 = OsIf_MicrosToTicks (_1, 0);
  # DEBUG mS2Ticks => mS2Ticks_29
  # DEBUG BEGIN_STMT
  _2 = instance_30(D) <= 2;
  x ={v} _2;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_50 ={v} x;
  if (x.0_50 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 22>; [50.00%]

  <bb 22> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 24> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _3 = (int) instance_30(D);
  state_31 = Flexcan_Ip_apxState[_3];
  # DEBUG state => state_31
  # DEBUG BEGIN_STMT
  base_32 = Flexcan_Ip_apxBase[_3];
  # DEBUG base => base_32
  # DEBUG BEGIN_STMT
  result_37 = FlexCAN_StartRxMessageBufferData (instance_30(D), mb_idx_33(D), data_34(D), isPolling_35(D));
  # DEBUG result => result_37
  # DEBUG BEGIN_STMT
  if (result_37 == 0)
    goto <bb 5>; [50.00%]
  else
    goto <bb 7>; [50.00%]

  <bb 5> [local count: 53687]:
  if (isPolling_35(D) != 0)
    goto <bb 7>; [67.00%]
  else
    goto <bb 6>; [33.00%]

  <bb 6> [local count: 17717]:
  # DEBUG BEGIN_STMT
  _4 = (long unsigned int) mb_idx_33(D);
  _5 = state_31->isIntActive;
  result_39 = FlexCAN_SetMsgBuffIntCmd (base_32, instance_30(D), _4, 1, _5);
  # DEBUG result => result_39

  <bb 7> [local count: 107374]:
  # result_15 = PHI <result_37(4), 0(5), result_39(6)>
  # DEBUG result => result_15
  # DEBUG BEGIN_STMT
  if (result_15 == 0)
    goto <bb 8>; [33.00%]
  else
    goto <bb 14>; [67.00%]

  <bb 8> [local count: 35433]:
  # DEBUG BEGIN_STMT
  _6 = OsIf_GetCounter (0);
  timeStart = _6;
  # DEBUG BEGIN_STMT
  goto <bb 13>; [100.00%]

  <bb 9> [local count: 313013]:
  # DEBUG BEGIN_STMT
  if (isPolling_35(D) != 0)
    goto <bb 10>; [33.00%]
  else
    goto <bb 12>; [67.00%]

  <bb 10> [local count: 103294]:
  # DEBUG BEGIN_STMT
  _7 = (long unsigned int) mb_idx_33(D);
  _8 = FlexCAN_GetBuffStatusFlag (base_32, _7);
  if (_8 != 0)
    goto <bb 11>; [33.00%]
  else
    goto <bb 12>; [67.00%]

  <bb 11> [local count: 34087]:
  # DEBUG BEGIN_STMT
  FlexCAN_IRQHandlerRxMB (instance_30(D), _7);

  <bb 12> [local count: 313013]:
  # DEBUG BEGIN_STMT
  _45 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_46 = timeElapsed_18 + _45;
  # DEBUG timeElapsed => timeElapsed_46
  # DEBUG BEGIN_STMT
  if (mS2Ticks_29 <= timeElapsed_46)
    goto <bb 14>; [5.50%]
  else
    goto <bb 23>; [94.50%]

  <bb 23> [local count: 295797]:

  <bb 13> [local count: 331231]:
  # timeElapsed_18 = PHI <0(8), timeElapsed_46(23)>
  # DEBUG timeElapsed => timeElapsed_18
  # DEBUG BEGIN_STMT
  _9 = (int) mb_idx_33(D);
  _10 ={v} state_31->mbs[_9].state;
  if (_10 == 1)
    goto <bb 9>; [94.50%]
  else
    goto <bb 14>; [5.50%]

  <bb 14> [local count: 107374]:
  # result_16 = PHI <result_15(7), 3(12), 0(13)>
  # DEBUG result => result_16
  # DEBUG BEGIN_STMT
  if (result_16 == 3)
    goto <bb 15>; [34.00%]
  else
    goto <bb 17>; [66.00%]

  <bb 15> [local count: 36507]:
  if (isPolling_35(D) != 0)
    goto <bb 17>; [67.00%]
  else
    goto <bb 16>; [33.00%]

  <bb 16> [local count: 12047]:
  # DEBUG BEGIN_STMT
  _11 = (long unsigned int) mb_idx_33(D);
  _12 = state_31->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_32, instance_30(D), _11, 0, _12);

  <bb 17> [local count: 107374]:
  # DEBUG BEGIN_STMT
  if (result_16 != 4)
    goto <bb 18>; [66.00%]
  else
    goto <bb 21>; [34.00%]

  <bb 18> [local count: 70867]:
  if (result_16 != 2)
    goto <bb 19>; [66.00%]
  else
    goto <bb 21>; [34.00%]

  <bb 19> [local count: 46772]:
  # DEBUG BEGIN_STMT
  _13 = (int) mb_idx_33(D);
  _14 ={v} state_31->mbs[_13].state;
  if (_14 == 0)
    goto <bb 21>; [65.00%]
  else
    goto <bb 20>; [35.00%]

  <bb 20> [local count: 16370]:
  # DEBUG BEGIN_STMT
  state_31->mbs[_13].state ={v} 0;
  # DEBUG BEGIN_STMT
  # DEBUG result => 3

  <bb 21> [local count: 107374]:
  # result_17 = PHI <result_16(17), result_16(18), 0(19), 3(20)>
  # DEBUG result => result_17
  # DEBUG BEGIN_STMT
  timeStart ={v} {CLOBBER};
  return result_17;

}



;; Function FlexCAN_Ip_RxFifo (FlexCAN_Ip_RxFifo, funcdef_no=55, decl_uid=6457, cgraph_uid=56, symbol_order=57)


Symbols to be put in SSA form
{ D.8231 D.8652 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 13
Number of blocks to update: 12 ( 92%)


Merging blocks 3 and 6
Removing basic block 4
Removing basic block 5
Removing basic block 9
Merging blocks 10 and 11
Merging blocks 12 and 7
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;;
;; Loop 2
;;  header 5, latch 5
;;  depth 1, outer 0
;;  nodes: 5
;;
;; Loop 1
;;  header 3, latch 3
;;  depth 1, outer 0
;;  nodes: 3
;; 2 succs { 4 3 }
;; 3 succs { 3 }
;; 4 succs { 6 5 }
;; 5 succs { 5 }
;; 6 succs { 1 }
FlexCAN_Ip_RxFifo (uint8 instance, struct Flexcan_Ip_MsgBuffType * data)
{
  Flexcan_Ip_StatusType eResult;
  volatile boolean x;
  Flexcan_Ip_StatusType D.8652;
  volatile boolean x;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  _Bool x.0_7;
  _Bool _9;
  _Bool x.0_10;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  # DEBUG result => 0
  # DEBUG BEGIN_STMT
  _1 = instance_2(D) <= 2;
  x ={v} _1;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_7 ={v} x;
  if (x.0_7 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  # DEBUG instance => instance_2(D)
  # DEBUG data => data_4(D)
  # DEBUG INLINE_ENTRY FlexCAN_StartRxMessageFifoData
  # DEBUG BEGIN_STMT
  # DEBUG base => 0B
  # DEBUG BEGIN_STMT
  # DEBUG state => 0B
  # DEBUG BEGIN_STMT
  # DEBUG eResult => 0
  # DEBUG BEGIN_STMT
  _9 = instance_2(D) <= 2;
  x ={v} _9;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_10 ={v} x;
  if (x.0_10 != 0)
    goto <bb 6>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 5> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 5>; [100.00%]

  <bb 6> [local count: 53687]:
  eResult_11 = FlexCAN_StartRxMessageFifoData.part.0 (instance_2(D), data_4(D));
  # DEBUG eResult => eResult_11
  # DEBUG BEGIN_STMT
  _14 = eResult_11;
  # DEBUG instance => NULL
  # DEBUG data => NULL
  # DEBUG x => NULL
  # DEBUG eResult => NULL
  result_6 = _14;
  # DEBUG result => result_6
  # DEBUG BEGIN_STMT
  return result_6;

}



;; Function FlexCAN_Ip_RxFifoBlocking (FlexCAN_Ip_RxFifoBlocking, funcdef_no=56, decl_uid=6461, cgraph_uid=57, symbol_order=58)


Symbols to be put in SSA form
{ D.8232 D.8661 D.8671 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 33
Number of blocks to update: 32 ( 97%)


Merging blocks 3 and 8
Removing basic block 4
Removing basic block 5
Removing basic block 7
Removing basic block 11
Merging blocks 12 and 13
Merging blocks 14 and 9
Removing basic block 24
Merging blocks 32 and 15
;; 5 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
;;
;; Loop 3
;;  header 15, latch 14
;;  depth 1, outer 0
;;  nodes: 15 14 8 13 9 12 10 11
;;
;; Loop 4
;;  header 13, latch 12
;;  depth 2, outer 3
;;  nodes: 13 12 10 11
;;
;; Loop 2
;;  header 5, latch 5
;;  depth 1, outer 0
;;  nodes: 5
;;
;; Loop 1
;;  header 3, latch 3
;;  depth 1, outer 0
;;  nodes: 3
;; 2 succs { 4 3 }
;; 3 succs { 3 }
;; 4 succs { 6 5 }
;; 5 succs { 5 }
;; 6 succs { 7 23 }
;; 7 succs { 15 }
;; 8 succs { 9 14 }
;; 9 succs { 13 }
;; 10 succs { 11 12 }
;; 11 succs { 12 }
;; 12 succs { 13 }
;; 13 succs { 10 14 }
;; 14 succs { 16 15 }
;; 15 succs { 8 16 }
;; 16 succs { 17 19 }
;; 17 succs { 18 19 }
;; 18 succs { 19 }
;; 19 succs { 21 22 20 }
;; 20 succs { 22 }
;; 21 succs { 22 }
;; 22 succs { 23 }
;; 23 succs { 1 }
FlexCAN_Ip_RxFifoBlocking (uint8 instance, struct Flexcan_Ip_MsgBuffType * data, uint32 timeout)
{
  Flexcan_Ip_StatusType eResult;
  struct Flexcan_Ip_StateType * pState;
  struct FLEXCAN_Type * pBase;
  uint32 timeStart;
  uint32 timeElapsed;
  uint32 mS2Ticks;
  uint32 u32intType;
  Flexcan_Ip_StatusType D.8671;
  Flexcan_Ip_StatusType eResult;
  volatile boolean x;
  Flexcan_Ip_StatusType D.8661;
  volatile boolean x;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  _Bool x.0_12;
  _Bool _14;
  _Bool x.0_15;
  int _17;
  long unsigned int _20;
  long unsigned int _22;
  <unnamed type> _23;
  unsigned char _25;
  long unsigned int _27;
  <unnamed type> _30;
  <unnamed type> _32;
  _Bool _33;
  _Bool _34;
  _Bool _35;
  <unnamed type> _36;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  # DEBUG result => 0
  # DEBUG BEGIN_STMT
  _1 = instance_4(D) <= 2;
  x ={v} _1;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_12 ={v} x;
  if (x.0_12 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  # DEBUG instance => instance_4(D)
  # DEBUG data => data_6(D)
  # DEBUG INLINE_ENTRY FlexCAN_StartRxMessageFifoData
  # DEBUG BEGIN_STMT
  # DEBUG base => 0B
  # DEBUG BEGIN_STMT
  # DEBUG state => 0B
  # DEBUG BEGIN_STMT
  # DEBUG eResult => 0
  # DEBUG BEGIN_STMT
  _14 = instance_4(D) <= 2;
  x ={v} _14;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_15 ={v} x;
  if (x.0_15 != 0)
    goto <bb 6>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 5> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 5>; [100.00%]

  <bb 6> [local count: 53687]:
  eResult_16 = FlexCAN_StartRxMessageFifoData.part.0 (instance_4(D), data_6(D));
  # DEBUG eResult => eResult_16
  # DEBUG BEGIN_STMT
  _47 = eResult_16;
  # DEBUG instance => NULL
  # DEBUG data => NULL
  # DEBUG x => NULL
  # DEBUG eResult => NULL
  result_8 = _47;
  # DEBUG result => result_8
  # DEBUG BEGIN_STMT
  if (result_8 == 0)
    goto <bb 7>; [33.00%]
  else
    goto <bb 23>; [67.00%]

  <bb 7> [local count: 17717]:
  # DEBUG BEGIN_STMT
  # DEBUG u8Instance => instance_4(D)
  # DEBUG u32TimeoutMs => timeout_9(D)
  # DEBUG INLINE_ENTRY FlexCAN_ProccessLegacyRxFIFO
  # DEBUG BEGIN_STMT
  # DEBUG eResult => 0
  # DEBUG BEGIN_STMT
  _17 = (int) instance_4(D);
  pState_18 = Flexcan_Ip_apxState[_17];
  # DEBUG pState => pState_18
  # DEBUG BEGIN_STMT
  pBase_19 = Flexcan_Ip_apxBase[_17];
  # DEBUG pBase => pBase_19
  # DEBUG BEGIN_STMT
  timeStart = 0;
  # DEBUG BEGIN_STMT
  # DEBUG timeElapsed => 0
  # DEBUG BEGIN_STMT
  _20 = timeout_9(D) * 1000;
  mS2Ticks_21 = OsIf_MicrosToTicks (_20, 0);
  # DEBUG mS2Ticks => mS2Ticks_21
  # DEBUG BEGIN_STMT
  # DEBUG u32intType => 0
  # DEBUG BEGIN_STMT
  _22 = OsIf_GetCounter (0);
  timeStart = _22;
  # DEBUG BEGIN_STMT
  goto <bb 15>; [100.00%]

  <bb 8> [local count: 156507]:
  # DEBUG BEGIN_STMT
  _23 = pState_18->transferType;
  if (_23 == 1)
    goto <bb 9>; [16.00%]
  else
    goto <bb 14>; [84.00%]

  <bb 9> [local count: 25041]:
  goto <bb 13>; [100.00%]

  <bb 10> [local count: 75123]:
  # DEBUG BEGIN_STMT
  _25 = FlexCAN_GetBuffStatusFlag (pBase_19, u32intType_24);
  if (_25 != 0)
    goto <bb 11>; [33.00%]
  else
    goto <bb 12>; [67.00%]

  <bb 11> [local count: 24791]:
  # DEBUG BEGIN_STMT
  FlexCAN_IRQHandlerRxFIFO (instance_4(D), u32intType_24);

  <bb 12> [local count: 75123]:
  # DEBUG BEGIN_STMT
  u32intType_26 = u32intType_24 + 4294967295;
  # DEBUG u32intType => u32intType_26

  <bb 13> [local count: 100164]:
  # u32intType_24 = PHI <7(9), u32intType_26(12)>
  # DEBUG u32intType => u32intType_24
  # DEBUG BEGIN_STMT
  if (u32intType_24 > 4)
    goto <bb 10>; [75.00%]
  else
    goto <bb 14>; [25.00%]

  <bb 14> [local count: 156507]:
  # DEBUG BEGIN_STMT
  _27 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_29 = _27 + timeElapsed_28;
  # DEBUG timeElapsed => timeElapsed_29
  # DEBUG BEGIN_STMT
  if (mS2Ticks_21 <= timeElapsed_29)
    goto <bb 16>; [5.50%]
  else
    goto <bb 15>; [94.50%]

  <bb 15> [local count: 165615]:
  # timeElapsed_28 = PHI <0(7), timeElapsed_29(14)>
  # DEBUG timeElapsed => timeElapsed_28
  # DEBUG BEGIN_STMT
  _30 ={v} pState_18->mbs[0].state;
  if (_30 == 1)
    goto <bb 8>; [94.50%]
  else
    goto <bb 16>; [5.50%]

  <bb 16> [local count: 17717]:
  # eResult_31 = PHI <3(14), 0(15)>
  # DEBUG eResult => eResult_31
  # DEBUG BEGIN_STMT
  if (eResult_31 == 3)
    goto <bb 17>; [34.00%]
  else
    goto <bb 19>; [66.00%]

  <bb 17> [local count: 6024]:
  _32 = pState_18->transferType;
  if (_32 != 1)
    goto <bb 18>; [48.88%]
  else
    goto <bb 19>; [51.12%]

  <bb 18> [local count: 2944]:
  # DEBUG BEGIN_STMT
  _33 = pState_18->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (pBase_19, instance_4(D), 5, 0, _33);
  # DEBUG BEGIN_STMT
  _34 = pState_18->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (pBase_19, instance_4(D), 6, 0, _34);
  # DEBUG BEGIN_STMT
  _35 = pState_18->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (pBase_19, instance_4(D), 7, 0, _35);

  <bb 19> [local count: 17717]:
  # DEBUG BEGIN_STMT
  _36 ={v} pState_18->mbs[0].state;
  switch (_36) <default: <L4> [33.33%], case 0: <L5> [33.33%], case 1: <L3> [33.33%]>

  <bb 20> [local count: 5905]:
<L3>:
  # DEBUG BEGIN_STMT
  pState_18->mbs[0].state ={v} 0;
  # DEBUG BEGIN_STMT
  goto <bb 22>; [100.00%]

  <bb 21> [local count: 5905]:
<L4>:
  # DEBUG BEGIN_STMT
  # DEBUG eResult => 1
  # DEBUG BEGIN_STMT

  <bb 22> [local count: 17715]:
  # eResult_37 = PHI <0(19), eResult_31(20), 1(21)>
<L5>:
  # DEBUG eResult => eResult_37
  # DEBUG BEGIN_STMT
  timeStart ={v} {CLOBBER};
  _60 = eResult_37;
  # DEBUG u8Instance => NULL
  # DEBUG u32TimeoutMs => NULL
  # DEBUG u32intType => NULL
  # DEBUG mS2Ticks => NULL
  # DEBUG timeElapsed => NULL
  # DEBUG timeStart => NULL
  # DEBUG pBase => NULL
  # DEBUG pState => NULL
  # DEBUG eResult => NULL
  result_11 = _60;
  # DEBUG result => result_11

  <bb 23> [local count: 53685]:
  # result_2 = PHI <result_8(6), result_11(22)>
  # DEBUG result => result_2
  # DEBUG BEGIN_STMT
  return result_2;

}



;; Function FlexCAN_Ip_ConfigRxFifo_Privileged (FlexCAN_Ip_ConfigRxFifo_Privileged, funcdef_no=57, decl_uid=6373, cgraph_uid=58, symbol_order=59)

FlexCAN_Ip_ConfigRxFifo_Privileged (uint8 instance, Flexcan_Ip_RxFifoIdElementFormatType id_format, const struct Flexcan_Ip_IdTableType * id_filter_table)
{
  volatile boolean x;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  int _2;
  long unsigned int _19;
  signed int _20;
  _Bool x.0_21;
  long unsigned int _22;
  long unsigned int _23;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  _1 = instance_8(D) <= 2;
  x ={v} _1;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_21 ={v} x;
  if (x.0_21 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 14>; [50.00%]

  <bb 14> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 15> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  # DEBUG result => 0
  # DEBUG BEGIN_STMT
  # DEBUG status => 0
  # DEBUG BEGIN_STMT
  _2 = (int) instance_8(D);
  pBase_11 = Flexcan_Ip_apxBase[_2];
  # DEBUG pBase => pBase_11
  # DEBUG BEGIN_STMT
  # DEBUG pBase => pBase_11
  # DEBUG INLINE_ENTRY FlexCAN_IsEnabled
  # DEBUG BEGIN_STMT
  _19 ={v} MEM[(const struct FLEXCAN_Type *)pBase_11].MCR;
  _20 = (signed int) _19;
  # DEBUG pBase => NULL
  # DEBUG disabled => _20 < 0
  # DEBUG BEGIN_STMT
  if (_20 < 0)
    goto <bb 5>; [25.50%]
  else
    goto <bb 6>; [74.50%]

  <bb 5> [local count: 27380]:
  # DEBUG BEGIN_STMT
  result_13 = FlexCAN_Enable (pBase_11);
  # DEBUG result => result_13

  <bb 6> [local count: 107374]:
  # result_3 = PHI <0(4), result_13(5)>
  # DEBUG result => result_3
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_11
  # DEBUG INLINE_ENTRY FlexCAN_IsFreezeMode
  # DEBUG BEGIN_STMT
  _22 ={v} MEM[(const struct FLEXCAN_Type *)pBase_11].MCR;
  _23 = _22 & 16777216;
  # DEBUG base => NULL
  # DEBUG freeze => _23 != 0
  # DEBUG BEGIN_STMT
  if (_23 == 0)
    goto <bb 7>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 7> [local count: 53687]:
  if (result_3 == 0)
    goto <bb 10>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 8> [local count: 80531]:
  # DEBUG result => result_3
  # DEBUG BEGIN_STMT
  if (result_3 == 0)
    goto <bb 9>; [33.00%]
  else
    goto <bb 10>; [67.00%]

  <bb 9> [local count: 26575]:
  # DEBUG BEGIN_STMT
  FlexCAN_SetRxFifoFilter (pBase_11, id_format_14(D), id_filter_table_15(D));

  <bb 10> [local count: 107374]:
  # result_10 = PHI <result_3(8), 0(9), 1(7)>
  # DEBUG result => NULL
  # DEBUG BEGIN_STMT
  if (_20 < 0)
    goto <bb 11>; [25.50%]
  else
    goto <bb 13>; [74.50%]

  <bb 11> [local count: 27380]:
  # DEBUG BEGIN_STMT
  status_18 = FlexCAN_Disable (pBase_11);
  # DEBUG status => status_18
  # DEBUG BEGIN_STMT
  if (status_18 != 0)
    goto <bb 12>; [50.00%]
  else
    goto <bb 13>; [50.00%]

  <bb 12> [local count: 13690]:
  # DEBUG BEGIN_STMT
  # DEBUG result => status_18

  <bb 13> [local count: 107374]:
  # result_4 = PHI <result_10(10), result_10(11), status_18(12)>
  # DEBUG result => result_4
  # DEBUG BEGIN_STMT
  return result_4;

}



;; Function FlexCAN_Ip_ConfigRemoteResponseMb (FlexCAN_Ip_ConfigRemoteResponseMb, funcdef_no=58, decl_uid=6519, cgraph_uid=59, symbol_order=60)

FlexCAN_Ip_ConfigRemoteResponseMb (uint8 instance, uint8 mb_idx, const struct Flexcan_Ip_DataInfoType * tx_info, uint32 msg_id, const uint8 * mb_data)
{
  volatile boolean x;
  volatile boolean x;
  volatile boolean x;
  volatile boolean x;
  volatile uint32 * pMbAddr;
  const struct Flexcan_Ip_StateType * const state;
  struct FLEXCAN_Type * pBase;
  struct Flexcan_Ip_MsbuffCodeStatusType cs;
  Flexcan_Ip_StatusType result;
  int _1;
  _Bool _2;
  _Bool _3;
  long unsigned int _4;
  long unsigned int _5;
  _Bool _6;
  long unsigned int _7;
  unsigned char _8;
  long unsigned int _9;
  unsigned char _10;
  _Bool _11;
  _Bool _12;
  long unsigned int _13;
  _Bool _14;
  long unsigned int _15;
  <unnamed type> _16;
  _Bool _17;
  _Bool _18;
  _Bool _19;
  _Bool x.0_45;
  _Bool x.0_46;
  _Bool x.0_47;
  _Bool x.0_48;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  # DEBUG result => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) instance_22(D);
  pBase_24 = Flexcan_Ip_apxBase[_1];
  # DEBUG pBase => pBase_24
  # DEBUG BEGIN_STMT
  state_25 = Flexcan_Ip_apxState[_1];
  # DEBUG state => state_25
  # DEBUG BEGIN_STMT
  # DEBUG pMbAddr => 0B
  # DEBUG BEGIN_STMT
  _2 = instance_22(D) <= 2;
  x ={v} _2;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_48 ={v} x;
  if (x.0_48 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 17>; [50.00%]

  <bb 17> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 21> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _3 = tx_info_26(D) != 0B;
  x ={v} _3;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_47 ={v} x;
  if (x.0_47 != 0)
    goto <bb 6>; [50.00%]
  else
    goto <bb 16>; [50.00%]

  <bb 16> [local count: 53687]:

  <bb 5> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 20> [local count: 536870913]:
  goto <bb 5>; [100.00%]

  <bb 6> [local count: 53687]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _4 ={v} pBase_24->CTRL2;
  _5 = _4 & 131072;
  _6 = _5 == 0;
  x ={v} _6;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_46 ={v} x;
  if (x.0_46 != 0)
    goto <bb 8>; [50.00%]
  else
    goto <bb 15>; [50.00%]

  <bb 15> [local count: 26844]:

  <bb 7> [local count: 268435456]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 19> [local count: 268435456]:
  goto <bb 7>; [100.00%]

  <bb 8> [local count: 26844]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _7 = tx_info_26(D)->data_length;
  _8 = (unsigned char) _7;
  _9 = (long unsigned int) mb_idx_27(D);
  _10 = FlexCAN_GetMbPayloadSize (pBase_24, _9);
  _11 = _8 <= _10;
  x ={v} _11;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_45 ={v} x;
  if (x.0_45 != 0)
    goto <bb 10>; [50.00%]
  else
    goto <bb 14>; [50.00%]

  <bb 14> [local count: 13422]:

  <bb 9> [local count: 134217728]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 18> [local count: 134217728]:
  goto <bb 9>; [100.00%]

  <bb 10> [local count: 13422]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _12 = state_25->bIsLegacyFifoEn;
  _13 = state_25->u32MaxMbNum;
  _14 = FlexCAN_IsMbOutOfRange (pBase_24, mb_idx_27(D), _12, _13);
  if (_14 != 0)
    goto <bb 13>; [52.23%]
  else
    goto <bb 11>; [47.77%]

  <bb 11> [local count: 6412]:
  # DEBUG result => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _15 = tx_info_26(D)->data_length;
  cs.dataLen = _15;
  # DEBUG BEGIN_STMT
  _16 = tx_info_26(D)->msg_id_type;
  cs.msgIdType = _16;
  # DEBUG BEGIN_STMT
  cs.code = 10;
  # DEBUG BEGIN_STMT
  cs.fd_enable = 0;
  # DEBUG BEGIN_STMT
  cs.enable_brs = 0;
  # DEBUG BEGIN_STMT
  cs.fd_padding = 0;
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase_24, _9);
  # DEBUG BEGIN_STMT
  pMbAddr_38 = FlexCAN_GetMsgBuffRegion (pBase_24, _9);
  # DEBUG pMbAddr => pMbAddr_38
  # DEBUG BEGIN_STMT
  _17 = tx_info_26(D)->is_remote;
  FlexCAN_SetTxMsgBuff (pMbAddr_38, &cs, msg_id_39(D), mb_data_40(D), _17);
  # DEBUG BEGIN_STMT
  _18 = tx_info_26(D)->is_polling;
  if (_18 != 0)
    goto <bb 13>; [67.00%]
  else
    goto <bb 12>; [33.00%]

  <bb 12> [local count: 2116]:
  # DEBUG BEGIN_STMT
  _19 = state_25->isIntActive;
  result_43 = FlexCAN_SetMsgBuffIntCmd (pBase_24, instance_22(D), _9, 1, _19);
  # DEBUG result => result_43

  <bb 13> [local count: 13422]:
  # result_20 = PHI <4(10), 0(11), result_43(12)>
  # DEBUG result => result_20
  # DEBUG BEGIN_STMT
  cs ={v} {CLOBBER};
  return result_20;

}



;; Function FlexCAN_Ip_GetTransferStatus (FlexCAN_Ip_GetTransferStatus, funcdef_no=59, decl_uid=6475, cgraph_uid=60, symbol_order=61)

FlexCAN_Ip_GetTransferStatus (uint8 instance, uint8 mb_idx)
{
  volatile boolean x;
  volatile boolean x;
  Flexcan_Ip_StatusType status;
  const struct Flexcan_Ip_StateType * state;
  int _1;
  _Bool _2;
  unsigned char _3;
  _Bool _4;
  int _5;
  <unnamed type> _6;
  _Bool x.0_12;
  _Bool x.0_13;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  _1 = (int) instance_8(D);
  state_10 = Flexcan_Ip_apxState[_1];
  # DEBUG state => state_10
  # DEBUG BEGIN_STMT
  # DEBUG status => 1
  # DEBUG BEGIN_STMT
  _2 = instance_8(D) <= 2;
  x ={v} _2;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_13 ={v} x;
  if (x.0_13 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 11>; [50.00%]

  <bb 11> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 13> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _3 = mb_idx_11(D) + 224;
  _4 = _3 > 222;
  x ={v} _4;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_12 ={v} x;
  if (x.0_12 != 0)
    goto <bb 6>; [50.00%]
  else
    goto <bb 10>; [50.00%]

  <bb 10> [local count: 53687]:

  <bb 5> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 12> [local count: 536870913]:
  goto <bb 5>; [100.00%]

  <bb 6> [local count: 53687]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  if (mb_idx_11(D) <= 31)
    goto <bb 7>; [50.00%]
  else
    goto <bb 9>; [50.00%]

  <bb 7> [local count: 26844]:
  # DEBUG BEGIN_STMT
  _5 = (int) mb_idx_11(D);
  _6 ={v} state_10->mbs[_5].state;
  if (_6 == 0)
    goto <bb 9>; [65.00%]
  else
    goto <bb 8>; [35.00%]

  <bb 8> [local count: 9395]:
  # DEBUG BEGIN_STMT
  # DEBUG status => 2

  <bb 9> [local count: 53687]:
  # status_7 = PHI <1(6), 0(7), 2(8)>
  # DEBUG status => status_7
  # DEBUG BEGIN_STMT
  return status_7;

}



;; Function FlexCAN_IRQHandler (FlexCAN_IRQHandler, funcdef_no=61, decl_uid=6525, cgraph_uid=62, symbol_order=63)


Symbols to be put in SSA form
{ D.8236 D.8694 D.8699 D.8704 D.8709 D.8720 D.8733 D.8738 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 86
Number of blocks to update: 85 ( 99%)


Merging blocks 3 and 30
Merging blocks 5 and 29
Removing basic block 7
Merging blocks 8 and 40
Removing basic block 12
Removing basic block 19
Merging blocks 20 and 79
Removing basic block 26
Removing basic block 27
Removing basic block 28
Removing basic block 33
Merging blocks 34 and 31
Removing basic block 36
Merging blocks 37 and 38
Removing basic block 41
Merging blocks 42 and 39
Removing basic block 44
Merging blocks 45 and 46
Removing basic block 47
Removing basic block 50
Removing basic block 59
Merging blocks 63 and 60
Removing basic block 64
Removing basic block 80
Merging blocks 81 and 78
Removing basic block 83
Merging blocks 84 and 85
Merging blocks 37 and 35
Merging blocks 45 and 43
Merging blocks 84 and 82
;; 6 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55
;;
;; Loop 5
;;  header 28, latch 27
;;  depth 1, outer 0
;;  nodes: 28 27 17 20 24 25 26 21 22 23 18 19
;;
;; Loop 2
;;  header 13, latch 12
;;  depth 1, outer 0
;;  nodes: 13 12 10 11 14
;;
;; Loop 1
;;  header 54, latch 53
;;  depth 1, outer 0
;;  nodes: 54 53
;;
;; Loop 3
;;  header 5, latch 5
;;  depth 1, outer 0
;;  nodes: 5
;;
;; Loop 4
;;  header 3, latch 3
;;  depth 1, outer 0
;;  nodes: 3
;; 2 succs { 4 3 }
;; 3 succs { 3 }
;; 4 succs { 6 5 }
;; 5 succs { 5 }
;; 6 succs { 7 54 }
;; 7 succs { 8 9 }
;; 8 succs { 9 }
;; 9 succs { 13 }
;; 10 succs { 11 12 }
;; 11 succs { 12 }
;; 12 succs { 13 }
;; 13 succs { 14 15 }
;; 14 succs { 10 15 }
;; 15 succs { 29 16 }
;; 16 succs { 28 }
;; 17 succs { 18 27 }
;; 18 succs { 19 20 }
;; 19 succs { 20 }
;; 20 succs { 21 27 }
;; 21 succs { 22 24 }
;; 22 succs { 23 24 }
;; 23 succs { 24 }
;; 24 succs { 25 27 }
;; 25 succs { 26 27 }
;; 26 succs { 27 }
;; 27 succs { 28 }
;; 28 succs { 17 55 }
;; 29 succs { 30 32 }
;; 30 succs { 31 32 }
;; 31 succs { 34 }
;; 32 succs { 33 34 }
;; 33 succs { 34 }
;; 34 succs { 35 48 }
;; 35 succs { 36 38 }
;; 36 succs { 37 39 }
;; 37 succs { 39 }
;; 38 succs { 39 }
;; 39 succs { 40 41 }
;; 40 succs { 41 }
;; 41 succs { 42 44 }
;; 42 succs { 43 44 }
;; 43 succs { 47 }
;; 44 succs { 45 47 }
;; 45 succs { 46 47 }
;; 46 succs { 47 }
;; 47 succs { 48 }
;; 48 succs { 49 50 }
;; 49 succs { 50 }
;; 50 succs { 51 55 }
;; 51 succs { 52 55 }
;; 52 succs { 55 }
;; 53 succs { 54 }
;; 54 succs { 53 55 }
;; 55 succs { 1 }
FlexCAN_IRQHandler (uint8 instance, uint32 startMbIdx, uint32 endMbIdx)
{
  uint32 mask;
  uint8 flag;
  uint8 D.8738;
  uint8 flag;
  uint8 D.8733;
  struct FLEXCAN_Type * pBase;
  struct Flexcan_Ip_StateType * pState;
  struct Flexcan_Ip_MsgBuffType mb;
  boolean bCurrentIntStat;
  uint32 u32Imask;
  uint8 D.8720;
  struct FLEXCAN_Type * base;
  struct Flexcan_Ip_StateType * state;
  uint32 mb_idx;
  uint32 u32MbHandle;
  uint32 mask;
  uint8 flag;
  uint8 D.8709;
  uint8 flag;
  uint8 D.8704;
  uint32 mask;
  uint8 flag;
  uint8 D.8699;
  uint8 flag;
  uint8 D.8694;
  volatile boolean x;
  volatile boolean x;
  uint32 mb_idx;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  uint32 flag_reg;
  uint32 u32MbHandle;
  int _1;
  _Bool _3;
  _Bool _4;
  unsigned char _5;
  unsigned char _6;
  _Bool _7;
  <unnamed type> _8;
  <unnamed type> _9;
  unsigned char _10;
  <unnamed type> _11;
  _Bool x.0_41;
  _Bool x.0_42;
  long unsigned int _48;
  long unsigned int _49;
  long unsigned int _50;
  long unsigned int _51;
  unsigned char _52;
  long unsigned int _58;
  long unsigned int _59;
  long unsigned int _60;
  long unsigned int _61;
  unsigned char _62;
  int _65;
  unsigned char _69;
  unsigned char _70;
  _Bool _71;
  _Bool _73;
  <unnamed type> _74;
  long unsigned int _76;
  long unsigned int _77;
  long unsigned int _78;
  long unsigned int _79;
  unsigned char _82;
  int _83;
  _Bool _86;
  long unsigned int vol.6_87;
  long unsigned int _88;
  long unsigned int _89;
  long unsigned int _90;
  long unsigned int _91;
  long unsigned int _92;
  long unsigned int vol.6_93;
  void (*<T620>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _95;
  <unnamed type> _96;
  _Bool _97;
  _Bool _98;
  _Bool _99;
  _Bool _100;
  long unsigned int _104;
  long unsigned int _105;
  long unsigned int _106;
  long unsigned int _107;
  unsigned char _108;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  # DEBUG u32MbHandle => 0
  # DEBUG BEGIN_STMT
  # DEBUG flag_reg => 0
  # DEBUG BEGIN_STMT
  _1 = (int) instance_22(D);
  base_24 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_24
  # DEBUG BEGIN_STMT
  state_25 = Flexcan_Ip_apxState[_1];
  # DEBUG state => state_25
  # DEBUG BEGIN_STMT
  # DEBUG bIsSpuriousInt => 1
  # DEBUG BEGIN_STMT
  # DEBUG mb_idx => endMbIdx_26(D)
  # DEBUG BEGIN_STMT
  _3 = instance_22(D) <= 2;
  x ={v} _3;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_42 ={v} x;
  if (x.0_42 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _4 = endMbIdx_26(D) <= 31;
  x ={v} _4;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_41 ={v} x;
  if (x.0_41 != 0)
    goto <bb 6>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 5> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 5>; [100.00%]

  <bb 6> [local count: 53687]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  if (state_25 != 0B)
    goto <bb 7>; [53.47%]
  else
    goto <bb 54>; [46.53%]

  <bb 7> [local count: 28706]:
  # DEBUG BEGIN_STMT
  # DEBUG base => base_24
  # DEBUG msgBuffIdx => endMbIdx_26(D)
  # DEBUG INLINE_ENTRY FlexCAN_GetMsgBuffIntStatusFlag
  # DEBUG BEGIN_STMT
  # DEBUG flag => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (endMbIdx_26(D) <= 31)
    goto <bb 8>; [50.00%]
  else
    goto <bb 9>; [50.00%]

  <bb 8> [local count: 14353]:
  # DEBUG base => base_24
  # DEBUG msgBuffIdx => endMbIdx_26(D)
  # DEBUG INLINE_ENTRY FlexCAN_GetMsgBuffIntStatusFlag
  # DEBUG BEGIN_STMT
  mask_47 ={v} MEM[(const struct FLEXCAN_Type *)base_24].IMASK1;
  # DEBUG mask => mask_47
  # DEBUG BEGIN_STMT
  _48 ={v} MEM[(const struct FLEXCAN_Type *)base_24].IFLAG1;
  _49 = mask_47 & _48;
  _50 = endMbIdx_26(D);
  _51 = _49 >> _50;
  _52 = (unsigned char) _51;
  flag_53 = _52 & 1;
  # DEBUG flag => flag_53
  # DEBUG flag => flag_53
  # DEBUG BEGIN_STMT
  _116 = flag_53;
  # DEBUG base => NULL
  # DEBUG msgBuffIdx => NULL
  # DEBUG flag => NULL
  # DEBUG mask => NULL
  flag_45 = _116;

  <bb 9> [local count: 28706]:
  # flag_46 = PHI <0(7), flag_45(8)>
  # DEBUG flag => flag_46
  # DEBUG BEGIN_STMT
  _117 = flag_46;
  # DEBUG base => NULL
  # DEBUG msgBuffIdx => NULL
  # DEBUG flag => NULL
  _5 = _117;
  flag_reg_31 = (uint32) _5;
  # DEBUG flag_reg => flag_reg_31
  # DEBUG BEGIN_STMT
  goto <bb 13>; [100.00%]

  <bb 10> [local count: 239641]:
  # DEBUG BEGIN_STMT
  mb_idx_32 = mb_idx_14 + 4294967295;
  # DEBUG mb_idx => mb_idx_32
  # DEBUG BEGIN_STMT
  # DEBUG base => base_24
  # DEBUG msgBuffIdx => mb_idx_32
  # DEBUG INLINE_ENTRY FlexCAN_GetMsgBuffIntStatusFlag
  # DEBUG BEGIN_STMT
  # DEBUG flag => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (mb_idx_32 <= 31)
    goto <bb 11>; [50.00%]
  else
    goto <bb 12>; [50.00%]

  <bb 11> [local count: 119820]:
  # DEBUG base => base_24
  # DEBUG msgBuffIdx => mb_idx_32
  # DEBUG INLINE_ENTRY FlexCAN_GetMsgBuffIntStatusFlag
  # DEBUG BEGIN_STMT
  mask_57 ={v} MEM[(const struct FLEXCAN_Type *)base_24].IMASK1;
  # DEBUG mask => mask_57
  # DEBUG BEGIN_STMT
  _58 ={v} MEM[(const struct FLEXCAN_Type *)base_24].IFLAG1;
  _59 = mask_57 & _58;
  _60 = mb_idx_32;
  _61 = _59 >> _60;
  _62 = (unsigned char) _61;
  flag_63 = _62 & 1;
  # DEBUG flag => flag_63
  # DEBUG flag => flag_63
  # DEBUG BEGIN_STMT
  _118 = flag_63;
  # DEBUG base => NULL
  # DEBUG msgBuffIdx => NULL
  # DEBUG flag => NULL
  # DEBUG mask => NULL
  flag_55 = _118;

  <bb 12> [local count: 239641]:
  # flag_56 = PHI <0(10), flag_55(11)>
  # DEBUG flag => flag_56
  # DEBUG BEGIN_STMT
  _119 = flag_56;
  # DEBUG base => NULL
  # DEBUG msgBuffIdx => NULL
  # DEBUG flag => NULL
  _6 = _119;
  flag_reg_34 = (uint32) _6;
  # DEBUG flag_reg => flag_reg_34

  <bb 13> [local count: 268347]:
  # flag_reg_13 = PHI <flag_reg_31(9), flag_reg_34(12)>
  # mb_idx_14 = PHI <endMbIdx_26(D)(9), mb_idx_32(12)>
  # DEBUG mb_idx => mb_idx_14
  # DEBUG flag_reg => flag_reg_13
  # DEBUG BEGIN_STMT
  if (flag_reg_13 == 0)
    goto <bb 14>; [94.50%]
  else
    goto <bb 15>; [5.50%]

  <bb 14> [local count: 253588]:
  if (mb_idx_14 > startMbIdx_27(D))
    goto <bb 10>; [94.50%]
  else
    goto <bb 15>; [5.50%]

  <bb 15> [local count: 28706]:
  # flag_reg_2 = PHI <flag_reg_13(13), 0(14)>
  # mb_idx_21 = PHI <mb_idx_14(13), mb_idx_14(14)>
  # DEBUG BEGIN_STMT
  if (flag_reg_2 != 0)
    goto <bb 29>; [67.00%]
  else
    goto <bb 16>; [33.00%]

  <bb 16> [local count: 9473]:
  # DEBUG bIsSpuriousInt => 1
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG instance => instance_22(D)
  # DEBUG startMbIdx => startMbIdx_27(D)
  # DEBUG endMbIdx => endMbIdx_26(D)
  # DEBUG INLINE_ENTRY FlexCAN_ProcessSpuriousInterruptMB
  # DEBUG BEGIN_STMT
  _65 = (int) instance_22(D);
  base_66 = Flexcan_Ip_apxBase[_65];
  # DEBUG base => base_66
  # DEBUG BEGIN_STMT
  state_67 = Flexcan_Ip_apxState[_65];
  # DEBUG state => state_67
  # DEBUG BEGIN_STMT
  # DEBUG mb_idx => 0
  # DEBUG BEGIN_STMT
  # DEBUG u32MbHandle => 0
  # DEBUG BEGIN_STMT
  # DEBUG mb_idx => startMbIdx_27(D)
  goto <bb 28>; [100.00%]

  <bb 17> [local count: 76646]:
  # DEBUG BEGIN_STMT
  _69 = FlexCAN_GetBuffStatusFlag (base_66, mb_idx_68);
  if (_69 != 0)
    goto <bb 18>; [33.00%]
  else
    goto <bb 27>; [67.00%]

  <bb 18> [local count: 25293]:
  # DEBUG base => base_66
  # DEBUG msgBuffIdx => mb_idx_68
  # DEBUG INLINE_ENTRY FlexCAN_GetBuffStatusImask
  # DEBUG BEGIN_STMT
  # DEBUG u32Imask => 0
  # DEBUG BEGIN_STMT
  if (mb_idx_68 <= 31)
    goto <bb 19>; [50.00%]
  else
    goto <bb 20>; [50.00%]

  <bb 19> [local count: 12647]:
  # DEBUG BEGIN_STMT
  _76 ={v} MEM[(const struct FLEXCAN_Type *)base_66].IMASK1;
  _77 = mb_idx_68;
  _78 = 1 << _77;
  _79 = _76 & _78;
  u32Imask_80 = _79 >> _77;
  # DEBUG u32Imask => u32Imask_80

  <bb 20> [local count: 25293]:
  # u32Imask_81 = PHI <0(18), u32Imask_80(19)>
  # DEBUG u32Imask => u32Imask_81
  # DEBUG BEGIN_STMT
  _82 = (unsigned char) u32Imask_81;
  _121 = _82;
  # DEBUG base => NULL
  # DEBUG msgBuffIdx => NULL
  # DEBUG u32Imask => NULL
  _70 = _121;
  if (_70 == 0)
    goto <bb 21>; [50.00%]
  else
    goto <bb 27>; [50.00%]

  <bb 21> [local count: 12647]:
  # DEBUG BEGIN_STMT
  # DEBUG u32MbHandle => mb_idx_68
  # DEBUG BEGIN_STMT
  _71 = state_67->bIsLegacyFifoEn;
  if (_71 != 0)
    goto <bb 22>; [50.00%]
  else
    goto <bb 24>; [50.00%]

  <bb 22> [local count: 6323]:
  if (mb_idx_68 <= 7)
    goto <bb 23>; [50.00%]
  else
    goto <bb 24>; [50.00%]

  <bb 23> [local count: 3162]:
  # DEBUG BEGIN_STMT
  # DEBUG u32MbHandle => 0

  <bb 24> [local count: 12647]:
  # u32MbHandle_72 = PHI <mb_idx_68(21), mb_idx_68(22), 0(23)>
  # DEBUG u32MbHandle => u32MbHandle_72
  # DEBUG BEGIN_STMT
  _73 = state_67->mbs[u32MbHandle_72].isPolling;
  if (_73 != 0)
    goto <bb 27>; [67.00%]
  else
    goto <bb 25>; [33.00%]

  <bb 25> [local count: 4173]:
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (base_66, mb_idx_68);
  # DEBUG BEGIN_STMT
  _74 ={v} state_67->mbs[u32MbHandle_72].state;
  if (_74 == 2)
    goto <bb 26>; [34.00%]
  else
    goto <bb 27>; [66.00%]

  <bb 26> [local count: 1419]:
  # DEBUG BEGIN_STMT
  state_67->mbs[u32MbHandle_72].state ={v} 0;
  # DEBUG BEGIN_STMT
  state_67->mbs[u32MbHandle_72].isPolling = 1;

  <bb 27> [local count: 76646]:
  # DEBUG BEGIN_STMT
  mb_idx_75 = mb_idx_68 + 1;
  # DEBUG mb_idx => mb_idx_75

  <bb 28> [local count: 86119]:
  # mb_idx_68 = PHI <startMbIdx_27(D)(16), mb_idx_75(27)>
  # DEBUG mb_idx => mb_idx_68
  # DEBUG BEGIN_STMT
  if (endMbIdx_26(D) >= mb_idx_68)
    goto <bb 17>; [89.00%]
  else
    goto <bb 55>; [11.00%]

  <bb 29> [local count: 19233]:
  # DEBUG BEGIN_STMT
  # DEBUG bIsSpuriousInt => 0
  # DEBUG BEGIN_STMT
  # DEBUG u32MbHandle => mb_idx_21
  # DEBUG BEGIN_STMT
  _7 = state_25->bIsLegacyFifoEn;
  if (_7 != 0)
    goto <bb 30>; [50.00%]
  else
    goto <bb 32>; [50.00%]

  <bb 30> [local count: 9617]:
  if (mb_idx_21 <= 7)
    goto <bb 31>; [33.00%]
  else
    goto <bb 32>; [67.00%]

  <bb 31> [local count: 3173]:
  # DEBUG BEGIN_STMT
  FlexCAN_IRQHandlerRxFIFO (instance_22(D), mb_idx_21);
  # DEBUG BEGIN_STMT
  # DEBUG u32MbHandle => 0
  goto <bb 34>; [100.00%]

  <bb 32> [local count: 16060]:
  # DEBUG BEGIN_STMT
  _8 ={v} state_25->mbs[mb_idx_21].state;
  if (_8 == 1)
    goto <bb 33>; [20.24%]
  else
    goto <bb 34>; [79.76%]

  <bb 33> [local count: 3251]:
  # DEBUG BEGIN_STMT
  FlexCAN_IRQHandlerRxMB (instance_22(D), mb_idx_21);

  <bb 34> [local count: 19233]:
  # u32MbHandle_12 = PHI <0(31), mb_idx_21(32), mb_idx_21(33)>
  # DEBUG u32MbHandle => u32MbHandle_12
  # DEBUG BEGIN_STMT
  _9 ={v} state_25->mbs[u32MbHandle_12].state;
  if (_9 == 2)
    goto <bb 35>; [20.24%]
  else
    goto <bb 48>; [79.76%]

  <bb 35> [local count: 3893]:
  # DEBUG BEGIN_STMT
  # DEBUG u8Instance => instance_22(D)
  # DEBUG u32MbIdx => mb_idx_21
  # DEBUG INLINE_ENTRY FlexCAN_IRQHandlerTxMB
  # DEBUG BEGIN_STMT
  _83 = (int) instance_22(D);
  pBase_84 = Flexcan_Ip_apxBase[_83];
  # DEBUG pBase => pBase_84
  # DEBUG BEGIN_STMT
  pState_85 = Flexcan_Ip_apxState[_83];
  # DEBUG pState => pState_85
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG bCurrentIntStat => 0
  # DEBUG BEGIN_STMT
  _86 = pState_85->mbs[mb_idx_21].isRemote;
  if (_86 != 0)
    goto <bb 36>; [50.00%]
  else
    goto <bb 38>; [50.00%]

  <bb 36> [local count: 1946]:
  # DEBUG BEGIN_STMT
  FlexCAN_LockRxMsgBuff (pBase_84, mb_idx_21);
  # DEBUG BEGIN_STMT
  FlexCAN_GetMsgBuff (pBase_84, mb_idx_21, &mb);
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_84
  # DEBUG INLINE_ENTRY FlexCAN_UnlockRxMsgBuff
  # DEBUG BEGIN_STMT
  vol.6_87 ={v} MEM[(const struct FLEXCAN_Type *)pBase_84].TIMER;
  # DEBUG base => NULL
  # DEBUG BEGIN_STMT
  _88 = mb.time_stamp;
  pState_85->mbs[mb_idx_21].time_stamp = _88;
  # DEBUG BEGIN_STMT
  _89 = mb.cs;
  _90 = _89 >> 24;
  _91 = _90 & 15;
  if (_91 == 4)
    goto <bb 37>; [20.24%]
  else
    goto <bb 39>; [79.76%]

  <bb 37> [local count: 394]:
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase_84, mb_idx_21);
  goto <bb 39>; [100.00%]

  <bb 38> [local count: 1946]:
  # DEBUG BEGIN_STMT
  _92 = FlexCAN_GetMsgBuffTimestamp (pBase_84, mb_idx_21);
  pState_85->mbs[mb_idx_21].time_stamp = _92;
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_84
  # DEBUG INLINE_ENTRY FlexCAN_UnlockRxMsgBuff
  # DEBUG BEGIN_STMT
  vol.6_93 ={v} MEM[(const struct FLEXCAN_Type *)pBase_84].TIMER;
  # DEBUG base => NULL
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase_84, mb_idx_21);

  <bb 39> [local count: 3893]:
  # DEBUG BEGIN_STMT
  pState_85->mbs[mb_idx_21].state ={v} 0;
  # DEBUG BEGIN_STMT
  bCurrentIntStat_94 = pState_85->mbs[mb_idx_21].isPolling;
  # DEBUG bCurrentIntStat => bCurrentIntStat_94
  # DEBUG BEGIN_STMT
  _95 = pState_85->callback;
  if (_95 != 0B)
    goto <bb 40>; [70.00%]
  else
    goto <bb 41>; [30.00%]

  <bb 40> [local count: 2725]:
  # DEBUG BEGIN_STMT
  _95 (instance_22(D), 4, mb_idx_21, pState_85);

  <bb 41> [local count: 3893]:
  # DEBUG BEGIN_STMT
  _96 ={v} pState_85->mbs[mb_idx_21].state;
  if (_96 == 0)
    goto <bb 42>; [50.00%]
  else
    goto <bb 44>; [50.00%]

  <bb 42> [local count: 1946]:
  _97 = pState_85->mbs[mb_idx_21].isPolling;
  if (_97 != 0)
    goto <bb 44>; [67.00%]
  else
    goto <bb 43>; [33.00%]

  <bb 43> [local count: 642]:
  # DEBUG BEGIN_STMT
  pState_85->mbs[mb_idx_21].isPolling = 1;
  # DEBUG BEGIN_STMT
  _98 = pState_85->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (pBase_84, instance_22(D), mb_idx_21, 0, _98);
  goto <bb 47>; [100.00%]

  <bb 44> [local count: 3251]:
  # DEBUG BEGIN_STMT
  if (bCurrentIntStat_94 != 0)
    goto <bb 47>; [50.00%]
  else
    goto <bb 45>; [50.00%]

  <bb 45> [local count: 1625]:
  _99 = pState_85->mbs[mb_idx_21].isPolling;
  if (_99 != 0)
    goto <bb 46>; [33.00%]
  else
    goto <bb 47>; [67.00%]

  <bb 46> [local count: 536]:
  # DEBUG BEGIN_STMT
  _100 = pState_85->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (pBase_84, instance_22(D), mb_idx_21, 0, _100);

  <bb 47> [local count: 3893]:
  # DEBUG BEGIN_STMT
  mb ={v} {CLOBBER};

  <bb 48> [local count: 19233]:
  # DEBUG u8Instance => NULL
  # DEBUG u32MbIdx => NULL
  # DEBUG bCurrentIntStat => NULL
  # DEBUG pState => NULL
  # DEBUG pBase => NULL
  # DEBUG BEGIN_STMT
  # DEBUG base => base_24
  # DEBUG msgBuffIdx => mb_idx_21
  # DEBUG INLINE_ENTRY FlexCAN_GetMsgBuffIntStatusFlag
  # DEBUG BEGIN_STMT
  # DEBUG flag => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (mb_idx_21 <= 31)
    goto <bb 49>; [50.00%]
  else
    goto <bb 50>; [50.00%]

  <bb 49> [local count: 9617]:
  # DEBUG base => base_24
  # DEBUG msgBuffIdx => mb_idx_21
  # DEBUG INLINE_ENTRY FlexCAN_GetMsgBuffIntStatusFlag
  # DEBUG BEGIN_STMT
  mask_103 ={v} MEM[(const struct FLEXCAN_Type *)base_24].IMASK1;
  # DEBUG mask => mask_103
  # DEBUG BEGIN_STMT
  _104 ={v} MEM[(const struct FLEXCAN_Type *)base_24].IFLAG1;
  _105 = mask_103 & _104;
  _106 = mb_idx_21;
  _107 = _105 >> _106;
  _108 = (unsigned char) _107;
  flag_109 = _108 & 1;
  # DEBUG flag => flag_109
  # DEBUG flag => flag_109
  # DEBUG BEGIN_STMT
  _138 = flag_109;
  # DEBUG base => NULL
  # DEBUG msgBuffIdx => NULL
  # DEBUG flag => NULL
  # DEBUG mask => NULL
  flag_101 = _138;

  <bb 50> [local count: 19233]:
  # flag_102 = PHI <0(48), flag_101(49)>
  # DEBUG flag => flag_102
  # DEBUG BEGIN_STMT
  _139 = flag_102;
  # DEBUG base => NULL
  # DEBUG msgBuffIdx => NULL
  # DEBUG flag => NULL
  _10 = _139;
  if (_10 != 0)
    goto <bb 51>; [50.00%]
  else
    goto <bb 55>; [50.00%]

  <bb 51> [local count: 9617]:
  # DEBUG BEGIN_STMT
  _11 ={v} state_25->mbs[u32MbHandle_12].state;
  if (_11 == 0)
    goto <bb 52>; [33.00%]
  else
    goto <bb 55>; [67.00%]

  <bb 52> [local count: 3173]:
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (base_24, mb_idx_21);
  # DEBUG bIsSpuriousInt => 0
  # DEBUG BEGIN_STMT
  goto <bb 55>; [100.00%]

  <bb 53> [local count: 202115]:
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (base_24, mb_idx_15);
  # DEBUG BEGIN_STMT
  mb_idx_29 = mb_idx_15 + 1;
  # DEBUG mb_idx => mb_idx_29

  <bb 54> [local count: 227096]:
  # mb_idx_15 = PHI <mb_idx_29(53), startMbIdx_27(D)(6)>
  # DEBUG mb_idx => mb_idx_15
  # DEBUG BEGIN_STMT
  if (mb_idx_15 <= endMbIdx_26(D))
    goto <bb 53>; [89.00%]
  else
    goto <bb 55>; [11.00%]

  <bb 55> [local count: 53687]:
  # DEBUG instance => NULL
  # DEBUG startMbIdx => NULL
  # DEBUG endMbIdx => NULL
  # DEBUG u32MbHandle => NULL
  # DEBUG mb_idx => NULL
  # DEBUG state => NULL
  # DEBUG base => NULL
  # DEBUG bIsSpuriousInt => NULL
  return;

}



;; Function FlexCAN_Ip_ClearErrorStatus (FlexCAN_Ip_ClearErrorStatus, funcdef_no=62, decl_uid=6484, cgraph_uid=63, symbol_order=64)

FlexCAN_Ip_ClearErrorStatus (uint8 instance, uint32 error)
{
  volatile boolean x;
  struct FLEXCAN_Type * base;
  int _1;
  _Bool _2;
  _Bool x.0_8;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  _1 = (int) instance_3(D);
  base_5 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_5
  # DEBUG BEGIN_STMT
  _2 = instance_3(D) <= 2;
  x ={v} _2;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_8 ={v} x;
  if (x.0_8 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 5> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 6> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  base_5->ESR1 ={v} error_6(D);
  return;

}



;; Function FlexCAN_Ip_GetErrorStatus (FlexCAN_Ip_GetErrorStatus, funcdef_no=63, decl_uid=6477, cgraph_uid=64, symbol_order=65)

FlexCAN_Ip_GetErrorStatus (uint8 instance)
{
  volatile boolean x;
  const struct FLEXCAN_Type * base;
  int _1;
  _Bool _2;
  uint32 _6;
  _Bool x.0_7;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  _1 = (int) instance_3(D);
  base_5 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_5
  # DEBUG BEGIN_STMT
  _2 = instance_3(D) <= 2;
  x ={v} _2;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_7 ={v} x;
  if (x.0_7 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 5> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 6> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _6 ={v} base_5->ESR1;
  return _6;

}



;; Function FlexCAN_Ip_GetControllerTxErrorCounter (FlexCAN_Ip_GetControllerTxErrorCounter, funcdef_no=64, decl_uid=6479, cgraph_uid=65, symbol_order=66)

FlexCAN_Ip_GetControllerTxErrorCounter (uint8 instance)
{
  volatile boolean x;
  const struct FLEXCAN_Type * base;
  int _1;
  _Bool _2;
  long unsigned int _3;
  uint8 _7;
  _Bool x.0_8;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  _1 = (int) instance_4(D);
  base_6 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_6
  # DEBUG BEGIN_STMT
  _2 = instance_4(D) <= 2;
  x ={v} _2;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_8 ={v} x;
  if (x.0_8 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 5> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 6> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _3 ={v} base_6->ECR;
  _7 = (uint8) _3;
  return _7;

}



;; Function FlexCAN_Ip_GetControllerRxErrorCounter (FlexCAN_Ip_GetControllerRxErrorCounter, funcdef_no=65, decl_uid=6481, cgraph_uid=66, symbol_order=67)

FlexCAN_Ip_GetControllerRxErrorCounter (uint8 instance)
{
  volatile boolean x;
  const struct FLEXCAN_Type * base;
  int _1;
  _Bool _2;
  long unsigned int _3;
  long unsigned int _4;
  uint8 _8;
  _Bool x.0_9;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  _1 = (int) instance_5(D);
  base_7 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_7
  # DEBUG BEGIN_STMT
  _2 = instance_5(D) <= 2;
  x ={v} _2;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_9 ={v} x;
  if (x.0_9 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 5> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 6> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _3 ={v} base_7->ECR;
  _4 = _3 >> 8;
  _8 = (uint8) _4;
  return _8;

}



;; Function FlexCAN_Error_IRQHandler (FlexCAN_Error_IRQHandler, funcdef_no=66, decl_uid=6529, cgraph_uid=67, symbol_order=68)

FlexCAN_Error_IRQHandler (uint8 instance)
{
  volatile boolean x;
  boolean isSpuriousInt;
  uint32 u32ErrStatus;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * pBase;
  int _1;
  _Bool _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  void (*<T620>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _6;
  long unsigned int _7;
  long unsigned int _8;
  signed int _9;
  void (*<T620>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _10;
  _Bool x.0_27;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  _1 = (int) instance_15(D);
  pBase_17 = Flexcan_Ip_apxBase[_1];
  # DEBUG pBase => pBase_17
  # DEBUG BEGIN_STMT
  state_18 = Flexcan_Ip_apxState[_1];
  # DEBUG state => state_18
  # DEBUG BEGIN_STMT
  # DEBUG u32ErrStatus => 0
  # DEBUG BEGIN_STMT
  # DEBUG isSpuriousInt => 1
  # DEBUG BEGIN_STMT
  _2 = instance_15(D) <= 2;
  x ={v} _2;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_27 ={v} x;
  if (x.0_27 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 16>; [50.00%]

  <bb 16> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 17> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  if (state_18 != 0B)
    goto <bb 5>; [70.00%]
  else
    goto <bb 14>; [30.00%]

  <bb 5> [local count: 75162]:
  # DEBUG BEGIN_STMT
  u32ErrStatus_20 ={v} pBase_17->ESR1;
  # DEBUG u32ErrStatus => u32ErrStatus_20
  # DEBUG BEGIN_STMT
  _3 = u32ErrStatus_20 & 2;
  if (_3 != 0)
    goto <bb 6>; [50.00%]
  else
    goto <bb 9>; [50.00%]

  <bb 6> [local count: 37581]:
  _4 ={v} pBase_17->CTRL1;
  _5 = _4 & 16384;
  if (_5 != 0)
    goto <bb 7>; [50.00%]
  else
    goto <bb 9>; [50.00%]

  <bb 7> [local count: 18790]:
  # DEBUG BEGIN_STMT
  pBase_17->ESR1 ={v} 2;
  # DEBUG BEGIN_STMT
  _6 = state_18->error_callback;
  if (_6 != 0B)
    goto <bb 8>; [70.00%]
  else
    goto <bb 9>; [30.00%]

  <bb 8> [local count: 13153]:
  # DEBUG BEGIN_STMT
  _6 (instance_15(D), 5, u32ErrStatus_20, state_18);
  # DEBUG BEGIN_STMT
  u32ErrStatus_23 ={v} pBase_17->ESR1;
  # DEBUG u32ErrStatus => u32ErrStatus_23

  <bb 9> [local count: 75162]:
  # u32ErrStatus_11 = PHI <u32ErrStatus_20(5), u32ErrStatus_20(6), u32ErrStatus_23(8), u32ErrStatus_20(7)>
  # isSpuriousInt_12 = PHI <1(5), 1(6), 0(8), 0(7)>
  # DEBUG isSpuriousInt => isSpuriousInt_12
  # DEBUG u32ErrStatus => u32ErrStatus_11
  # DEBUG BEGIN_STMT
  _7 = u32ErrStatus_11 & 1048576;
  if (_7 != 0)
    goto <bb 10>; [50.00%]
  else
    goto <bb 13>; [50.00%]

  <bb 10> [local count: 37581]:
  _8 ={v} pBase_17->CTRL2;
  _9 = (signed int) _8;
  if (_9 < 0)
    goto <bb 11>; [41.00%]
  else
    goto <bb 13>; [59.00%]

  <bb 11> [local count: 15408]:
  # DEBUG BEGIN_STMT
  pBase_17->ESR1 ={v} 1048576;
  # DEBUG BEGIN_STMT
  _10 = state_18->error_callback;
  if (_10 != 0B)
    goto <bb 12>; [70.00%]
  else
    goto <bb 15>; [30.00%]

  <bb 12> [local count: 10786]:
  # DEBUG BEGIN_STMT
  _10 (instance_15(D), 6, u32ErrStatus_11, state_18);
  goto <bb 15>; [100.00%]

  <bb 13> [local count: 59754]:
  # DEBUG isSpuriousInt => isSpuriousInt_12
  # DEBUG BEGIN_STMT
  if (isSpuriousInt_12 != 0)
    goto <bb 14>; [50.00%]
  else
    goto <bb 15>; [50.00%]

  <bb 14> [local count: 62089]:
  # DEBUG isSpuriousInt => NULL
  # DEBUG BEGIN_STMT
  pBase_17->ESR1 ={v} 3145730;

  <bb 15> [local count: 107374]:
  # DEBUG isSpuriousInt => NULL
  return;

}



;; Function FlexCAN_BusOff_IRQHandler (FlexCAN_BusOff_IRQHandler, funcdef_no=67, decl_uid=6527, cgraph_uid=68, symbol_order=69)

FlexCAN_BusOff_IRQHandler (uint8 instance)
{
  volatile boolean x;
  boolean isSpuriousInt;
  uint32 u32ErrStatus;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  int _1;
  _Bool _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  void (*<T620>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  void (*<T620>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  void (*<T620>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _14;
  _Bool x.0_37;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  _1 = (int) instance_22(D);
  base_24 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_24
  # DEBUG BEGIN_STMT
  state_25 = Flexcan_Ip_apxState[_1];
  # DEBUG state => state_25
  # DEBUG BEGIN_STMT
  # DEBUG u32ErrStatus => 0
  # DEBUG BEGIN_STMT
  # DEBUG isSpuriousInt => 1
  # DEBUG BEGIN_STMT
  _2 = instance_22(D) <= 2;
  x ={v} _2;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_37 ={v} x;
  if (x.0_37 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 20>; [50.00%]

  <bb 20> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 21> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  if (state_25 != 0B)
    goto <bb 5>; [70.00%]
  else
    goto <bb 18>; [30.00%]

  <bb 5> [local count: 75162]:
  # DEBUG BEGIN_STMT
  u32ErrStatus_26 ={v} base_24->ESR1;
  # DEBUG u32ErrStatus => u32ErrStatus_26
  # DEBUG BEGIN_STMT
  _3 = u32ErrStatus_26 & 131072;
  if (_3 != 0)
    goto <bb 6>; [50.00%]
  else
    goto <bb 9>; [50.00%]

  <bb 6> [local count: 37581]:
  _4 ={v} base_24->CTRL1;
  _5 = _4 & 2048;
  if (_5 != 0)
    goto <bb 7>; [50.00%]
  else
    goto <bb 9>; [50.00%]

  <bb 7> [local count: 18790]:
  # DEBUG BEGIN_STMT
  base_24->ESR1 ={v} 131072;
  # DEBUG BEGIN_STMT
  _6 = state_25->error_callback;
  if (_6 != 0B)
    goto <bb 8>; [70.00%]
  else
    goto <bb 9>; [30.00%]

  <bb 8> [local count: 13153]:
  # DEBUG BEGIN_STMT
  _6 (instance_22(D), 9, u32ErrStatus_26, state_25);
  # DEBUG BEGIN_STMT
  u32ErrStatus_29 ={v} base_24->ESR1;
  # DEBUG u32ErrStatus => u32ErrStatus_29

  <bb 9> [local count: 75162]:
  # u32ErrStatus_15 = PHI <u32ErrStatus_26(5), u32ErrStatus_26(6), u32ErrStatus_29(8), u32ErrStatus_26(7)>
  # isSpuriousInt_17 = PHI <1(5), 1(6), 0(8), 0(7)>
  # DEBUG isSpuriousInt => isSpuriousInt_17
  # DEBUG u32ErrStatus => u32ErrStatus_15
  # DEBUG BEGIN_STMT
  _7 = u32ErrStatus_15 & 65536;
  if (_7 != 0)
    goto <bb 10>; [50.00%]
  else
    goto <bb 13>; [50.00%]

  <bb 10> [local count: 37581]:
  _8 ={v} base_24->CTRL1;
  _9 = _8 & 1024;
  if (_9 != 0)
    goto <bb 11>; [50.00%]
  else
    goto <bb 13>; [50.00%]

  <bb 11> [local count: 18790]:
  # DEBUG BEGIN_STMT
  base_24->ESR1 ={v} 65536;
  # DEBUG BEGIN_STMT
  _10 = state_25->error_callback;
  if (_10 != 0B)
    goto <bb 12>; [70.00%]
  else
    goto <bb 13>; [30.00%]

  <bb 12> [local count: 13153]:
  # DEBUG BEGIN_STMT
  _10 (instance_22(D), 8, u32ErrStatus_15, state_25);
  # DEBUG BEGIN_STMT
  u32ErrStatus_32 ={v} base_24->ESR1;
  # DEBUG u32ErrStatus => u32ErrStatus_32

  <bb 13> [local count: 75162]:
  # u32ErrStatus_16 = PHI <u32ErrStatus_15(9), u32ErrStatus_15(10), u32ErrStatus_32(12), u32ErrStatus_15(11)>
  # isSpuriousInt_18 = PHI <isSpuriousInt_17(9), isSpuriousInt_17(10), 0(12), 0(11)>
  # DEBUG isSpuriousInt => isSpuriousInt_18
  # DEBUG u32ErrStatus => u32ErrStatus_16
  # DEBUG BEGIN_STMT
  _11 = u32ErrStatus_16 & 4;
  if (_11 != 0)
    goto <bb 14>; [50.00%]
  else
    goto <bb 17>; [50.00%]

  <bb 14> [local count: 37581]:
  _12 ={v} base_24->CTRL1;
  _13 = _12 & 32768;
  if (_13 != 0)
    goto <bb 15>; [50.00%]
  else
    goto <bb 17>; [50.00%]

  <bb 15> [local count: 18790]:
  # DEBUG BEGIN_STMT
  base_24->ESR1 ={v} 4;
  # DEBUG BEGIN_STMT
  _14 = state_25->error_callback;
  if (_14 != 0B)
    goto <bb 16>; [70.00%]
  else
    goto <bb 19>; [30.00%]

  <bb 16> [local count: 13153]:
  # DEBUG BEGIN_STMT
  _14 (instance_22(D), 7, u32ErrStatus_16, state_25);
  goto <bb 19>; [100.00%]

  <bb 17> [local count: 56371]:
  # DEBUG isSpuriousInt => isSpuriousInt_18
  # DEBUG BEGIN_STMT
  if (isSpuriousInt_18 != 0)
    goto <bb 18>; [50.00%]
  else
    goto <bb 19>; [50.00%]

  <bb 18> [local count: 60398]:
  # DEBUG isSpuriousInt => NULL
  # DEBUG BEGIN_STMT
  base_24->ESR1 ={v} 720900;

  <bb 19> [local count: 107374]:
  # DEBUG isSpuriousInt => NULL
  return;

}



;; Function FlexCAN_Ip_SendBlocking (FlexCAN_Ip_SendBlocking, funcdef_no=68, decl_uid=6449, cgraph_uid=69, symbol_order=70)

FlexCAN_Ip_SendBlocking (uint8 instance, uint8 mb_idx, const struct Flexcan_Ip_DataInfoType * tx_info, uint32 msg_id, const uint8 * mb_data, uint32 timeout_ms)
{
  volatile boolean x;
  volatile boolean x;
  volatile uint32 * flexcan_mb;
  uint32 flexcan_mb_config;
  uint32 uS2Ticks;
  uint32 mS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType result;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  _Bool _4;
  _Bool _5;
  long unsigned int _6;
  long unsigned int _7;
  unsigned char _8;
  int _9;
  <unnamed type> _10;
  long unsigned int _11;
  unsigned char _12;
  long unsigned int _13;
  long unsigned int _14;
  int _15;
  long unsigned int _46;
  long unsigned int _61;
  _Bool x.0_67;
  _Bool x.0_68;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) instance_28(D);
  base_30 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_30
  # DEBUG BEGIN_STMT
  state_31 = Flexcan_Ip_apxState[_1];
  # DEBUG state => state_31
  # DEBUG BEGIN_STMT
  timeStart = 0;
  # DEBUG BEGIN_STMT
  # DEBUG timeElapsed => 0
  # DEBUG BEGIN_STMT
  _3 = timeout_ms_33(D) * 1000;
  mS2Ticks_35 = OsIf_MicrosToTicks (_3, 0);
  # DEBUG mS2Ticks => mS2Ticks_35
  # DEBUG BEGIN_STMT
  # DEBUG uS2Ticks => 0
  # DEBUG BEGIN_STMT
  # DEBUG flexcan_mb_config => 0
  # DEBUG BEGIN_STMT
  # DEBUG flexcan_mb => 0B
  # DEBUG BEGIN_STMT
  _4 = instance_28(D) <= 2;
  x ={v} _4;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_68 ={v} x;
  if (x.0_68 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 22>; [50.00%]

  <bb 22> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 26> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _5 = tx_info_36(D) != 0B;
  x ={v} _5;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_67 ={v} x;
  if (x.0_67 != 0)
    goto <bb 6>; [50.00%]
  else
    goto <bb 21>; [50.00%]

  <bb 21> [local count: 53687]:

  <bb 5> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 25> [local count: 536870913]:
  goto <bb 5>; [100.00%]

  <bb 6> [local count: 53687]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  result_41 = FlexCAN_StartSendData (instance_28(D), mb_idx_37(D), tx_info_36(D), msg_id_38(D), mb_data_39(D));
  # DEBUG result => result_41
  # DEBUG BEGIN_STMT
  if (result_41 == 0)
    goto <bb 7>; [33.00%]
  else
    goto <bb 20>; [67.00%]

  <bb 7> [local count: 17717]:
  # DEBUG BEGIN_STMT
  _6 = OsIf_GetCounter (0);
  timeStart = _6;
  # DEBUG BEGIN_STMT
  goto <bb 9>; [100.00%]

  <bb 8> [local count: 156507]:
  # DEBUG BEGIN_STMT
  _46 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_47 = timeElapsed_20 + _46;
  # DEBUG timeElapsed => timeElapsed_47
  # DEBUG BEGIN_STMT
  if (mS2Ticks_35 <= timeElapsed_47)
    goto <bb 10>; [5.50%]
  else
    goto <bb 24>; [94.50%]

  <bb 24> [local count: 147899]:

  <bb 9> [local count: 165615]:
  # timeElapsed_20 = PHI <0(7), timeElapsed_47(24)>
  # DEBUG timeElapsed => timeElapsed_20
  # DEBUG BEGIN_STMT
  _7 = (long unsigned int) mb_idx_37(D);
  _8 = FlexCAN_GetBuffStatusFlag (base_30, _7);
  if (_8 != 1)
    goto <bb 8>; [94.50%]
  else
    goto <bb 10>; [5.50%]

  <bb 10> [local count: 17717]:
  # result_16 = PHI <3(8), 0(9)>
  # _2 = PHI <_7(8), _7(9)>
  # DEBUG result => result_16
  # DEBUG BEGIN_STMT
  if (result_16 == 3)
    goto <bb 11>; [34.00%]
  else
    goto <bb 19>; [66.00%]

  <bb 11> [local count: 6024]:
  _9 = (int) mb_idx_37(D);
  _10 ={v} state_31->mbs[_9].state;
  if (_10 != 0)
    goto <bb 12>; [33.00%]
  else
    goto <bb 19>; [67.00%]

  <bb 12> [local count: 1988]:
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (base_30, _2);
  # DEBUG BEGIN_STMT
  flexcan_mb_50 = FlexCAN_GetMsgBuffRegion (base_30, _2);
  # DEBUG flexcan_mb => flexcan_mb_50
  # DEBUG BEGIN_STMT
  flexcan_mb_config_51 ={v} *flexcan_mb_50;
  # DEBUG flexcan_mb_config => flexcan_mb_config_51
  # DEBUG BEGIN_STMT
  flexcan_mb_config_52 = flexcan_mb_config_51 & 4043309055;
  # DEBUG flexcan_mb_config => flexcan_mb_config_52
  # DEBUG BEGIN_STMT
  flexcan_mb_config_53 = flexcan_mb_config_52 | 150994944;
  # DEBUG flexcan_mb_config => flexcan_mb_config_53
  # DEBUG BEGIN_STMT
  *flexcan_mb_50 ={v} flexcan_mb_config_53;
  # DEBUG BEGIN_STMT
  uS2Ticks_56 = OsIf_MicrosToTicks (10000, 0);
  # DEBUG uS2Ticks => uS2Ticks_56
  # DEBUG BEGIN_STMT
  _11 = OsIf_GetCounter (0);
  timeStart = _11;
  # DEBUG BEGIN_STMT
  # DEBUG timeElapsed => 0
  # DEBUG BEGIN_STMT
  goto <bb 14>; [100.00%]

  <bb 13> [local count: 17560]:
  # DEBUG BEGIN_STMT
  _61 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_62 = timeElapsed_21 + _61;
  # DEBUG timeElapsed => timeElapsed_62
  # DEBUG BEGIN_STMT
  if (uS2Ticks_56 <= timeElapsed_62)
    goto <bb 15>; [5.50%]
  else
    goto <bb 23>; [94.50%]

  <bb 23> [local count: 16594]:

  <bb 14> [local count: 18582]:
  # timeElapsed_21 = PHI <0(12), timeElapsed_62(23)>
  # DEBUG timeElapsed => timeElapsed_21
  # DEBUG BEGIN_STMT
  _12 = FlexCAN_GetBuffStatusFlag (base_30, _2);
  if (_12 == 0)
    goto <bb 13>; [94.50%]
  else
    goto <bb 15>; [5.50%]

  <bb 15> [local count: 1988]:
  # DEBUG result => 3
  # DEBUG BEGIN_STMT
  flexcan_mb_config_63 ={v} *flexcan_mb_50;
  # DEBUG flexcan_mb_config => flexcan_mb_config_63
  # DEBUG BEGIN_STMT
  _13 = flexcan_mb_config_63 >> 24;
  _14 = _13 & 15;
  if (_14 == 8)
    goto <bb 16>; [34.00%]
  else
    goto <bb 17>; [66.00%]

  <bb 16> [local count: 676]:
  # DEBUG BEGIN_STMT
  # DEBUG result => 0

  <bb 17> [local count: 1988]:
  # result_17 = PHI <3(15), 0(16)>
  # DEBUG result => result_17
  # DEBUG BEGIN_STMT
  if (_14 == 9)
    goto <bb 18>; [34.00%]
  else
    goto <bb 19>; [66.00%]

  <bb 18> [local count: 676]:
  # DEBUG BEGIN_STMT
  # DEBUG result => 3

  <bb 19> [local count: 17717]:
  # result_18 = PHI <result_16(10), 3(11), result_17(17), 3(18)>
  # DEBUG result => result_18
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (base_30, _2);
  # DEBUG BEGIN_STMT
  _15 = (int) mb_idx_37(D);
  state_31->mbs[_15].state ={v} 0;

  <bb 20> [local count: 53687]:
  # result_19 = PHI <result_41(6), result_18(19)>
  # DEBUG result => result_19
  # DEBUG BEGIN_STMT
  timeStart ={v} {CLOBBER};
  return result_19;

}



;; Function FlexCAN_Ip_SetRxMbGlobalMask_Privileged (FlexCAN_Ip_SetRxMbGlobalMask_Privileged, funcdef_no=69, decl_uid=6408, cgraph_uid=70, symbol_order=71)

FlexCAN_Ip_SetRxMbGlobalMask_Privileged (uint8 instance, uint32 mask)
{
  volatile boolean x;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  int _1;
  _Bool _2;
  long unsigned int _17;
  signed int _18;
  _Bool x.0_19;
  long unsigned int _20;
  long unsigned int _21;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  # DEBUG result => 0
  # DEBUG BEGIN_STMT
  # DEBUG status => 0
  # DEBUG BEGIN_STMT
  _1 = (int) instance_9(D);
  pBase_11 = Flexcan_Ip_apxBase[_1];
  # DEBUG pBase => pBase_11
  # DEBUG BEGIN_STMT
  # DEBUG freeze => 0
  # DEBUG BEGIN_STMT
  _2 = instance_9(D) <= 2;
  x ={v} _2;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_19 ={v} x;
  if (x.0_19 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 14>; [50.00%]

  <bb 14> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 15> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  # DEBUG pBase => pBase_11
  # DEBUG INLINE_ENTRY FlexCAN_IsEnabled
  # DEBUG BEGIN_STMT
  _17 ={v} MEM[(const struct FLEXCAN_Type *)pBase_11].MCR;
  _18 = (signed int) _17;
  # DEBUG pBase => NULL
  # DEBUG disabled => _18 < 0
  # DEBUG BEGIN_STMT
  if (_18 < 0)
    goto <bb 5>; [25.50%]
  else
    goto <bb 6>; [74.50%]

  <bb 5> [local count: 27380]:
  # DEBUG BEGIN_STMT
  result_13 = FlexCAN_Enable (pBase_11);
  # DEBUG result => result_13

  <bb 6> [local count: 107374]:
  # result_3 = PHI <0(4), result_13(5)>
  # DEBUG result => result_3
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_11
  # DEBUG INLINE_ENTRY FlexCAN_IsFreezeMode
  # DEBUG BEGIN_STMT
  _20 ={v} MEM[(const struct FLEXCAN_Type *)pBase_11].MCR;
  _21 = _20 & 16777216;
  # DEBUG base => NULL
  # DEBUG freeze => _21 != 0
  # DEBUG BEGIN_STMT
  if (_21 == 0)
    goto <bb 7>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 7> [local count: 53687]:
  if (result_3 == 0)
    goto <bb 10>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 8> [local count: 80531]:
  # DEBUG result => result_3
  # DEBUG BEGIN_STMT
  if (result_3 == 0)
    goto <bb 9>; [50.00%]
  else
    goto <bb 10>; [50.00%]

  <bb 9> [local count: 40265]:
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_11
  # DEBUG Mask => mask_14(D)
  # DEBUG INLINE_ENTRY FlexCAN_SetRxMsgBuffGlobalMask
  # DEBUG BEGIN_STMT
  pBase_11->RXMGMASK ={v} mask_14(D);

  <bb 10> [local count: 107374]:
  # result_8 = PHI <result_3(8), 0(9), 1(7)>
  # DEBUG result => NULL
  # DEBUG base => NULL
  # DEBUG Mask => NULL
  # DEBUG BEGIN_STMT
  if (_18 < 0)
    goto <bb 11>; [25.50%]
  else
    goto <bb 13>; [74.50%]

  <bb 11> [local count: 27380]:
  # DEBUG BEGIN_STMT
  status_16 = FlexCAN_Disable (pBase_11);
  # DEBUG status => status_16
  # DEBUG BEGIN_STMT
  if (status_16 != 0)
    goto <bb 12>; [50.00%]
  else
    goto <bb 13>; [50.00%]

  <bb 12> [local count: 13690]:
  # DEBUG BEGIN_STMT
  # DEBUG result => status_16

  <bb 13> [local count: 107374]:
  # result_4 = PHI <result_8(10), result_8(11), status_16(12)>
  # DEBUG result => result_4
  # DEBUG BEGIN_STMT
  return result_4;

}



;; Function FlexCAN_Ip_EnterFreezeMode_Privileged (FlexCAN_Ip_EnterFreezeMode_Privileged, funcdef_no=70, decl_uid=6381, cgraph_uid=71, symbol_order=72)

FlexCAN_Ip_EnterFreezeMode_Privileged (uint8 instance)
{
  struct FLEXCAN_Type * base;
  int _1;
  Flexcan_Ip_StatusType _6;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _1 = (int) instance_2(D);
  base_4 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_4
  # DEBUG BEGIN_STMT
  _6 = FlexCAN_EnterFreezeMode (base_4);
  return _6;

}



;; Function FlexCAN_Ip_ExitFreezeMode_Privileged (FlexCAN_Ip_ExitFreezeMode_Privileged, funcdef_no=71, decl_uid=6383, cgraph_uid=72, symbol_order=73)

FlexCAN_Ip_ExitFreezeMode_Privileged (uint8 instance)
{
  struct FLEXCAN_Type * base;
  int _1;
  Flexcan_Ip_StatusType _6;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _1 = (int) instance_2(D);
  base_4 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_4
  # DEBUG BEGIN_STMT
  _6 = FlexCAN_ExitFreezeMode (base_4);
  return _6;

}



;; Function FlexCAN_Ip_SetRxIndividualMask_Privileged (FlexCAN_Ip_SetRxIndividualMask_Privileged, funcdef_no=72, decl_uid=6405, cgraph_uid=73, symbol_order=74)

FlexCAN_Ip_SetRxIndividualMask_Privileged (uint8 instance, uint8 mb_idx, uint32 mask)
{
  volatile boolean x;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  int _1;
  _Bool _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  _Bool x.0_21;
  long unsigned int _22;
  signed int _23;
  long unsigned int _24;
  long unsigned int _25;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  # DEBUG result => 0
  # DEBUG BEGIN_STMT
  # DEBUG status => 0
  # DEBUG BEGIN_STMT
  _1 = (int) instance_12(D);
  pBase_14 = Flexcan_Ip_apxBase[_1];
  # DEBUG pBase => pBase_14
  # DEBUG BEGIN_STMT
  # DEBUG freeze => 0
  # DEBUG BEGIN_STMT
  _2 = instance_12(D) <= 2;
  x ={v} _2;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_21 ={v} x;
  if (x.0_21 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 16>; [50.00%]

  <bb 16> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 17> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _3 = (long unsigned int) mb_idx_15(D);
  _4 ={v} pBase_14->MCR;
  _5 = _4 & 127;
  if (_3 > _5)
    goto <bb 15>; [35.00%]
  else
    goto <bb 5>; [65.00%]

  <bb 5> [local count: 69793]:
  if (mb_idx_15(D) > 31)
    goto <bb 15>; [35.00%]
  else
    goto <bb 6>; [65.00%]

  <bb 6> [local count: 45366]:
  # DEBUG BEGIN_STMT
  # DEBUG pBase => pBase_14
  # DEBUG INLINE_ENTRY FlexCAN_IsEnabled
  # DEBUG BEGIN_STMT
  _22 ={v} MEM[(const struct FLEXCAN_Type *)pBase_14].MCR;
  _23 = (signed int) _22;
  # DEBUG pBase => NULL
  # DEBUG disabled => _23 < 0
  # DEBUG BEGIN_STMT
  if (_23 < 0)
    goto <bb 7>; [25.50%]
  else
    goto <bb 8>; [74.50%]

  <bb 7> [local count: 11568]:
  # DEBUG BEGIN_STMT
  result_17 = FlexCAN_Enable (pBase_14);
  # DEBUG result => result_17

  <bb 8> [local count: 45366]:
  # result_6 = PHI <0(6), result_17(7)>
  # DEBUG result => result_6
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_14
  # DEBUG INLINE_ENTRY FlexCAN_IsFreezeMode
  # DEBUG BEGIN_STMT
  _24 ={v} MEM[(const struct FLEXCAN_Type *)pBase_14].MCR;
  _25 = _24 & 16777216;
  # DEBUG base => NULL
  # DEBUG freeze => _25 != 0
  # DEBUG BEGIN_STMT
  if (_25 == 0)
    goto <bb 9>; [50.00%]
  else
    goto <bb 10>; [50.00%]

  <bb 9> [local count: 22683]:
  if (result_6 == 0)
    goto <bb 12>; [50.00%]
  else
    goto <bb 10>; [50.00%]

  <bb 10> [local count: 34024]:
  # DEBUG result => result_6
  # DEBUG BEGIN_STMT
  if (result_6 == 0)
    goto <bb 11>; [50.00%]
  else
    goto <bb 12>; [50.00%]

  <bb 11> [local count: 17012]:
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_14
  # DEBUG msgBuffIdx => _3
  # DEBUG mask => mask_18(D)
  # DEBUG INLINE_ENTRY FlexCAN_SetRxIndividualMask
  # DEBUG BEGIN_STMT
  pBase_14->RXIMR[_3] ={v} mask_18(D);

  <bb 12> [local count: 45366]:
  # result_11 = PHI <result_6(10), 0(11), 1(9)>
  # DEBUG result => NULL
  # DEBUG base => NULL
  # DEBUG msgBuffIdx => NULL
  # DEBUG mask => NULL
  # DEBUG BEGIN_STMT
  if (_23 < 0)
    goto <bb 13>; [25.50%]
  else
    goto <bb 15>; [74.50%]

  <bb 13> [local count: 11568]:
  # DEBUG BEGIN_STMT
  status_20 = FlexCAN_Disable (pBase_14);
  # DEBUG status => status_20
  # DEBUG BEGIN_STMT
  if (status_20 != 0)
    goto <bb 14>; [50.00%]
  else
    goto <bb 15>; [50.00%]

  <bb 14> [local count: 5784]:
  # DEBUG BEGIN_STMT
  # DEBUG result => status_20

  <bb 15> [local count: 107374]:
  # result_7 = PHI <4(5), result_11(12), result_11(13), status_20(14), 4(4)>
  # DEBUG result => result_7
  # DEBUG BEGIN_STMT
  return result_7;

}



;; Function FlexCAN_Ip_SetRxFifoGlobalMask_Privileged (FlexCAN_Ip_SetRxFifoGlobalMask_Privileged, funcdef_no=73, decl_uid=6386, cgraph_uid=74, symbol_order=75)

FlexCAN_Ip_SetRxFifoGlobalMask_Privileged (uint8 instance, uint32 mask)
{
  volatile boolean x;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  int _2;
  long unsigned int _17;
  signed int _18;
  _Bool x.0_19;
  long unsigned int _20;
  long unsigned int _21;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  _1 = instance_8(D) <= 2;
  x ={v} _1;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_19 ={v} x;
  if (x.0_19 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 14>; [50.00%]

  <bb 14> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 15> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  # DEBUG result => 0
  # DEBUG BEGIN_STMT
  # DEBUG status => 0
  # DEBUG BEGIN_STMT
  _2 = (int) instance_8(D);
  pBase_11 = Flexcan_Ip_apxBase[_2];
  # DEBUG pBase => pBase_11
  # DEBUG BEGIN_STMT
  # DEBUG pBase => pBase_11
  # DEBUG INLINE_ENTRY FlexCAN_IsEnabled
  # DEBUG BEGIN_STMT
  _17 ={v} MEM[(const struct FLEXCAN_Type *)pBase_11].MCR;
  _18 = (signed int) _17;
  # DEBUG pBase => NULL
  # DEBUG disabled => _18 < 0
  # DEBUG BEGIN_STMT
  if (_18 < 0)
    goto <bb 5>; [25.50%]
  else
    goto <bb 6>; [74.50%]

  <bb 5> [local count: 27380]:
  # DEBUG BEGIN_STMT
  result_13 = FlexCAN_Enable (pBase_11);
  # DEBUG result => result_13

  <bb 6> [local count: 107374]:
  # result_3 = PHI <0(4), result_13(5)>
  # DEBUG result => result_3
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_11
  # DEBUG INLINE_ENTRY FlexCAN_IsFreezeMode
  # DEBUG BEGIN_STMT
  _20 ={v} MEM[(const struct FLEXCAN_Type *)pBase_11].MCR;
  _21 = _20 & 16777216;
  # DEBUG base => NULL
  # DEBUG freeze => _21 != 0
  # DEBUG BEGIN_STMT
  if (_21 == 0)
    goto <bb 7>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 7> [local count: 53687]:
  if (result_3 == 0)
    goto <bb 10>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 8> [local count: 80531]:
  # DEBUG result => result_3
  # DEBUG BEGIN_STMT
  if (result_3 == 0)
    goto <bb 9>; [50.00%]
  else
    goto <bb 10>; [50.00%]

  <bb 9> [local count: 40265]:
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_11
  # DEBUG Mask => mask_14(D)
  # DEBUG INLINE_ENTRY FlexCAN_SetRxFifoGlobalMask
  # DEBUG BEGIN_STMT
  pBase_11->RXFGMASK ={v} mask_14(D);

  <bb 10> [local count: 107374]:
  # result_10 = PHI <result_3(8), 0(9), 1(7)>
  # DEBUG result => NULL
  # DEBUG base => NULL
  # DEBUG Mask => NULL
  # DEBUG BEGIN_STMT
  if (_18 < 0)
    goto <bb 11>; [25.50%]
  else
    goto <bb 13>; [74.50%]

  <bb 11> [local count: 27380]:
  # DEBUG BEGIN_STMT
  status_16 = FlexCAN_Disable (pBase_11);
  # DEBUG status => status_16
  # DEBUG BEGIN_STMT
  if (status_16 != 0)
    goto <bb 12>; [50.00%]
  else
    goto <bb 13>; [50.00%]

  <bb 12> [local count: 13690]:
  # DEBUG BEGIN_STMT
  # DEBUG result => status_16

  <bb 13> [local count: 107374]:
  # result_4 = PHI <result_10(10), result_10(11), status_16(12)>
  # DEBUG result => result_4
  # DEBUG BEGIN_STMT
  return result_4;

}



;; Function FlexCAN_Ip_Deinit_Privileged (FlexCAN_Ip_Deinit_Privileged, funcdef_no=74, decl_uid=6388, cgraph_uid=75, symbol_order=76)


Symbols to be put in SSA form
{ D.8249 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 13
Number of blocks to update: 12 ( 92%)


Merging blocks 3 and 8
Removing basic block 5
Removing basic block 7
Merging blocks 12 and 9
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8
;;
;; Loop 1
;;  header 3, latch 3
;;  depth 1, outer 0
;;  nodes: 3
;; 2 succs { 4 3 }
;; 3 succs { 3 }
;; 4 succs { 5 8 }
;; 5 succs { 6 7 }
;; 6 succs { 7 }
;; 7 succs { 8 }
;; 8 succs { 1 }
FlexCAN_Ip_Deinit_Privileged (uint8 instance)
{
  volatile boolean x;
  Flexcan_Ip_StatusType result;
  struct FLEXCAN_Type * base;
  int _1;
  _Bool _2;
  _Bool x.0_12;
  _Bool _14;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  _1 = (int) instance_4(D);
  base_6 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_6
  # DEBUG BEGIN_STMT
  # DEBUG result => 1
  # DEBUG BEGIN_STMT
  _2 = instance_4(D) <= 2;
  x ={v} _2;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_12 ={v} x;
  if (x.0_12 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  result_8 = FlexCAN_EnterFreezeMode (base_6);
  # DEBUG result => result_8
  # DEBUG BEGIN_STMT
  if (result_8 == 0)
    goto <bb 5>; [33.00%]
  else
    goto <bb 8>; [67.00%]

  <bb 5> [local count: 35433]:
  # DEBUG BEGIN_STMT
  # DEBUG base => base_6
  # DEBUG INLINE_ENTRY FlexCAN_SetRegDefaultVal
  # DEBUG BEGIN_STMT
  _14 = FlexCAN_IsFDAvailable (base_6);
  if (_14 != 0)
    goto <bb 6>; [50.00%]
  else
    goto <bb 7>; [50.00%]

  <bb 6> [local count: 17717]:
  # DEBUG BEGIN_STMT
  base_6->FDCBT ={v} 0;
  # DEBUG BEGIN_STMT
  base_6->FDCTRL ={v} 2147500288;

  <bb 7> [local count: 35433]:
  # DEBUG BEGIN_STMT
  base_6->IFLAG1 ={v} 4294967295;
  # DEBUG BEGIN_STMT
  base_6->IMASK1 ={v} 0;
  # DEBUG BEGIN_STMT
  base_6->CBT ={v} 0;
  # DEBUG BEGIN_STMT
  base_6->CTRL2 ={v} 1048576;
  # DEBUG BEGIN_STMT
  base_6->ESR1 ={v} 241670;
  # DEBUG BEGIN_STMT
  base_6->ECR ={v} 0;
  # DEBUG BEGIN_STMT
  base_6->TIMER ={v} 0;
  # DEBUG BEGIN_STMT
  base_6->CTRL1 ={v} 0;
  # DEBUG BEGIN_STMT
  base_6->MCR ={v} 3633315855;
  # DEBUG base => NULL
  # DEBUG BEGIN_STMT
  FlexCAN_Disable (base_6);
  # DEBUG BEGIN_STMT
  Flexcan_Ip_apxState[_1] = 0B;

  <bb 8> [local count: 107374]:
  # DEBUG BEGIN_STMT
  return result_8;

}



;; Function FlexCAN_Ip_MainFunctionRead (FlexCAN_Ip_MainFunctionRead, funcdef_no=75, decl_uid=6469, cgraph_uid=76, symbol_order=77)

FlexCAN_Ip_MainFunctionRead (uint8 instance, uint8 mb_idx)
{
  uint32 flag;
  volatile boolean x;
  volatile boolean x;
  const struct Flexcan_Ip_StateType * state;
  const struct FLEXCAN_Type * base;
  int _1;
  _Bool _2;
  _Bool _3;
  _Bool _4;
  long unsigned int _5;
  unsigned char _6;
  int _7;
  <unnamed type> _8;
  _Bool x.0_18;
  _Bool x.0_19;
  long unsigned int _20;
  long unsigned int _22;
  unsigned char _23;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  _1 = (int) instance_10(D);
  base_12 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_12
  # DEBUG BEGIN_STMT
  state_13 = Flexcan_Ip_apxState[_1];
  # DEBUG state => state_13
  # DEBUG BEGIN_STMT
  _2 = instance_10(D) <= 2;
  x ={v} _2;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_19 ={v} x;
  if (x.0_19 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 16>; [50.00%]

  <bb 16> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 18> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _3 = mb_idx_14(D) <= 31;
  x ={v} _3;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_18 ={v} x;
  if (x.0_18 != 0)
    goto <bb 6>; [50.00%]
  else
    goto <bb 15>; [50.00%]

  <bb 15> [local count: 53687]:

  <bb 5> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 17> [local count: 536870913]:
  goto <bb 5>; [100.00%]

  <bb 6> [local count: 53687]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _4 = state_13->bIsLegacyFifoEn;
  if (_4 != 0)
    goto <bb 7>; [67.00%]
  else
    goto <bb 11>; [33.00%]

  <bb 7> [local count: 35970]:
  if (mb_idx_14(D) <= 7)
    goto <bb 8>; [50.00%]
  else
    goto <bb 11>; [50.00%]

  <bb 8> [local count: 17985]:
  # DEBUG BEGIN_STMT
  if (mb_idx_14(D) == 0)
    goto <bb 9>; [50.00%]
  else
    goto <bb 14>; [50.00%]

  <bb 9> [local count: 8993]:
  # DEBUG BEGIN_STMT
  # DEBUG base => base_12
  # DEBUG msgBuffIdx => 5
  # DEBUG INLINE_ENTRY FlexCAN_GetBuffStatusFlag
  # DEBUG BEGIN_STMT
  # DEBUG flag => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _20 ={v} base_12->IFLAG1;
  _22 = _20 >> 5;
  flag_21 = _22 & 1;
  # DEBUG flag => flag_21
  # DEBUG BEGIN_STMT
  _23 = (unsigned char) flag_21;
  # DEBUG base => NULL
  # DEBUG msgBuffIdx => NULL
  # DEBUG flag => NULL
  if (_23 != 0)
    goto <bb 10>; [33.00%]
  else
    goto <bb 14>; [67.00%]

  <bb 10> [local count: 2968]:
  # DEBUG BEGIN_STMT
  FlexCAN_IRQHandlerRxFIFO (instance_10(D), 5);
  goto <bb 14>; [100.00%]

  <bb 11> [local count: 35702]:
  # DEBUG BEGIN_STMT
  _5 = (long unsigned int) mb_idx_14(D);
  _6 = FlexCAN_GetBuffStatusFlag (base_12, _5);
  if (_6 != 0)
    goto <bb 12>; [50.00%]
  else
    goto <bb 14>; [50.00%]

  <bb 12> [local count: 17851]:
  # DEBUG BEGIN_STMT
  _7 = (int) mb_idx_14(D);
  _8 ={v} state_13->mbs[_7].state;
  if (_8 == 1)
    goto <bb 13>; [20.24%]
  else
    goto <bb 14>; [79.76%]

  <bb 13> [local count: 3613]:
  # DEBUG BEGIN_STMT
  FlexCAN_IRQHandlerRxMB (instance_10(D), _5);

  <bb 14> [local count: 53687]:
  return;

}



;; Function FlexCAN_Ip_MainFunctionBusOff_Privileged (FlexCAN_Ip_MainFunctionBusOff_Privileged, funcdef_no=76, decl_uid=6375, cgraph_uid=77, symbol_order=78)

FlexCAN_Ip_MainFunctionBusOff_Privileged (uint8 instance)
{
  volatile boolean x;
  uint32 u32ErrStatus;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType eRetVal;
  int _1;
  _Bool _2;
  long unsigned int _3;
  void (*<T620>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _4;
  _Bool x.0_15;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  # DEBUG eRetVal => 1
  # DEBUG BEGIN_STMT
  _1 = (int) instance_8(D);
  base_10 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_10
  # DEBUG BEGIN_STMT
  state_11 = Flexcan_Ip_apxState[_1];
  # DEBUG state => state_11
  # DEBUG BEGIN_STMT
  # DEBUG u32ErrStatus => 0
  # DEBUG BEGIN_STMT
  _2 = instance_8(D) <= 2;
  x ={v} _2;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_15 ={v} x;
  if (x.0_15 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 9>; [50.00%]

  <bb 9> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 10> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  u32ErrStatus_12 ={v} base_10->ESR1;
  # DEBUG u32ErrStatus => u32ErrStatus_12
  # DEBUG BEGIN_STMT
  _3 = u32ErrStatus_12 & 4;
  if (_3 != 0)
    goto <bb 5>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 5> [local count: 53687]:
  # DEBUG BEGIN_STMT
  _4 = state_11->error_callback;
  if (_4 != 0B)
    goto <bb 6>; [70.00%]
  else
    goto <bb 7>; [30.00%]

  <bb 6> [local count: 37581]:
  # DEBUG BEGIN_STMT
  _4 (instance_8(D), 7, u32ErrStatus_12, state_11);

  <bb 7> [local count: 53687]:
  # DEBUG BEGIN_STMT
  base_10->ESR1 ={v} 4;
  # DEBUG BEGIN_STMT
  # DEBUG eRetVal => 0

  <bb 8> [local count: 107374]:
  # eRetVal_5 = PHI <1(4), 0(7)>
  # DEBUG eRetVal => eRetVal_5
  # DEBUG BEGIN_STMT
  return eRetVal_5;

}



;; Function FlexCAN_Ip_MainFunctionWrite (FlexCAN_Ip_MainFunctionWrite, funcdef_no=77, decl_uid=6472, cgraph_uid=78, symbol_order=79)

FlexCAN_Ip_MainFunctionWrite (uint8 instance, uint8 mb_idx)
{
  volatile boolean x;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  int _1;
  _Bool _2;
  long unsigned int _3;
  unsigned char _4;
  int _5;
  long unsigned int _6;
  _Bool x.0_18;
  long unsigned int vol.6_19;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  _1 = (int) instance_8(D);
  base_10 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_10
  # DEBUG BEGIN_STMT
  state_11 = Flexcan_Ip_apxState[_1];
  # DEBUG state => state_11
  # DEBUG BEGIN_STMT
  _2 = instance_8(D) <= 2;
  x ={v} _2;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_18 ={v} x;
  if (x.0_18 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 7>; [50.00%]

  <bb 7> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 8> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _3 = (long unsigned int) mb_idx_12(D);
  _4 = FlexCAN_GetBuffStatusFlag (base_10, _3);
  if (_4 != 0)
    goto <bb 5>; [33.00%]
  else
    goto <bb 6>; [67.00%]

  <bb 5> [local count: 35433]:
  # DEBUG BEGIN_STMT
  _5 = (int) mb_idx_12(D);
  _6 = FlexCAN_GetMsgBuffTimestamp (base_10, _3);
  state_11->mbs[_5].time_stamp = _6;
  # DEBUG BEGIN_STMT
  # DEBUG base => base_10
  # DEBUG INLINE_ENTRY FlexCAN_UnlockRxMsgBuff
  # DEBUG BEGIN_STMT
  vol.6_19 ={v} MEM[(const struct FLEXCAN_Type *)base_10].TIMER;
  # DEBUG base => NULL
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (base_10, _3);
  # DEBUG BEGIN_STMT
  state_11->mbs[_5].state ={v} 0;

  <bb 6> [local count: 107374]:
  return;

}



;; Function FlexCAN_Ip_GetStopMode_Privileged (FlexCAN_Ip_GetStopMode_Privileged, funcdef_no=78, decl_uid=6377, cgraph_uid=79, symbol_order=80)

FlexCAN_Ip_GetStopMode_Privileged (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  boolean _7;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _1 = (int) instance_4(D);
  base_6 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_6
  # DEBUG BEGIN_STMT
  _2 ={v} base_6->MCR;
  _3 = _2 & 1048576;
  _7 = _3 != 0;
  return _7;

}



;; Function FlexCAN_Ip_GetStartMode_Privileged (FlexCAN_Ip_GetStartMode_Privileged, funcdef_no=79, decl_uid=6379, cgraph_uid=80, symbol_order=81)

FlexCAN_Ip_GetStartMode_Privileged (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  boolean _7;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _1 = (int) instance_4(D);
  base_6 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_6
  # DEBUG BEGIN_STMT
  _2 ={v} base_6->MCR;
  _3 = _2 & 17825792;
  _7 = _3 == 0;
  return _7;

}



;; Function FlexCAN_Ip_SetStartMode_Privileged (FlexCAN_Ip_SetStartMode_Privileged, funcdef_no=80, decl_uid=6390, cgraph_uid=81, symbol_order=82)

FlexCAN_Ip_SetStartMode_Privileged (uint8 instance)
{
  volatile boolean x;
  struct FLEXCAN_Type * pBase;
  _Bool _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  Flexcan_Ip_StatusType _12;
  _Bool x.0_13;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  _1 = instance_5(D) <= 2;
  x ={v} _1;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_13 ={v} x;
  if (x.0_13 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 5> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 6> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _2 = (int) instance_5(D);
  pBase_7 = Flexcan_Ip_apxBase[_2];
  # DEBUG pBase => pBase_7
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_07 ();
  # DEBUG BEGIN_STMT
  _3 ={v} pBase_7->MCR;
  _4 = _3 & 2147483647;
  pBase_7->MCR ={v} _4;
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_07 ();
  # DEBUG BEGIN_STMT
  _12 = FlexCAN_ExitFreezeMode (pBase_7);
  return _12;

}



;; Function FlexCAN_Ip_SetStopMode_Privileged (FlexCAN_Ip_SetStopMode_Privileged, funcdef_no=81, decl_uid=6392, cgraph_uid=82, symbol_order=83)

FlexCAN_Ip_SetStopMode_Privileged (uint8 instance)
{
  volatile boolean x;
  Flexcan_Ip_StatusType status;
  struct FLEXCAN_Type * pBase;
  _Bool _1;
  int _2;
  _Bool x.0_12;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  _1 = instance_5(D) <= 2;
  x ={v} _1;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_12 ={v} x;
  if (x.0_12 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 7>; [50.00%]

  <bb 7> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 8> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _2 = (int) instance_5(D);
  pBase_7 = Flexcan_Ip_apxBase[_2];
  # DEBUG pBase => pBase_7
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  status_9 = FlexCAN_EnterFreezeMode (pBase_7);
  # DEBUG status => status_9
  # DEBUG BEGIN_STMT
  if (status_9 == 0)
    goto <bb 5>; [33.00%]
  else
    goto <bb 6>; [67.00%]

  <bb 5> [local count: 35433]:
  # DEBUG BEGIN_STMT
  status_11 = FlexCAN_Disable (pBase_7);
  # DEBUG status => status_11

  <bb 6> [local count: 107374]:
  # status_3 = PHI <status_9(4), status_11(5)>
  # DEBUG status => status_3
  # DEBUG BEGIN_STMT
  return status_3;

}



;; Function FlexCAN_Ip_SetRxMaskType_Privileged (FlexCAN_Ip_SetRxMaskType_Privileged, funcdef_no=82, decl_uid=6395, cgraph_uid=83, symbol_order=84)


Symbols to be put in SSA form
{ D.8257 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 21
Number of blocks to update: 20 ( 95%)


Merging blocks 3 and 15
Merging blocks 9 and 17
Removing basic block 14
Merging blocks 20 and 16
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
;;
;; Loop 1
;;  header 3, latch 3
;;  depth 1, outer 0
;;  nodes: 3
;; 2 succs { 4 3 }
;; 3 succs { 3 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 7 8 }
;; 7 succs { 13 8 }
;; 8 succs { 9 13 }
;; 9 succs { 10 11 }
;; 10 succs { 12 }
;; 11 succs { 12 }
;; 12 succs { 13 }
;; 13 succs { 14 16 }
;; 14 succs { 15 16 }
;; 15 succs { 16 }
;; 16 succs { 1 }
FlexCAN_Ip_SetRxMaskType_Privileged (uint8 instance, Flexcan_Ip_RxMaskType type)
{
  volatile boolean x;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  int _2;
  long unsigned int _20;
  signed int _21;
  _Bool x.0_22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _26;
  long unsigned int _27;
  long unsigned int _28;
  long unsigned int _29;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  _1 = instance_8(D) <= 2;
  x ={v} _1;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_22 ={v} x;
  if (x.0_22 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  # DEBUG result => 0
  # DEBUG BEGIN_STMT
  # DEBUG status => 0
  # DEBUG BEGIN_STMT
  _2 = (int) instance_8(D);
  pBase_11 = Flexcan_Ip_apxBase[_2];
  # DEBUG pBase => pBase_11
  # DEBUG BEGIN_STMT
  # DEBUG pBase => pBase_11
  # DEBUG INLINE_ENTRY FlexCAN_IsEnabled
  # DEBUG BEGIN_STMT
  _20 ={v} MEM[(const struct FLEXCAN_Type *)pBase_11].MCR;
  _21 = (signed int) _20;
  # DEBUG pBase => NULL
  # DEBUG disabled => _21 < 0
  # DEBUG BEGIN_STMT
  if (_21 < 0)
    goto <bb 5>; [25.50%]
  else
    goto <bb 6>; [74.50%]

  <bb 5> [local count: 27380]:
  # DEBUG BEGIN_STMT
  result_13 = FlexCAN_Enable (pBase_11);
  # DEBUG result => result_13

  <bb 6> [local count: 107374]:
  # result_3 = PHI <0(4), result_13(5)>
  # DEBUG result => result_3
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_11
  # DEBUG INLINE_ENTRY FlexCAN_IsFreezeMode
  # DEBUG BEGIN_STMT
  _23 ={v} MEM[(const struct FLEXCAN_Type *)pBase_11].MCR;
  _24 = _23 & 16777216;
  # DEBUG base => NULL
  # DEBUG freeze => _24 != 0
  # DEBUG BEGIN_STMT
  if (_24 == 0)
    goto <bb 7>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 7> [local count: 53687]:
  if (result_3 == 0)
    goto <bb 13>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 8> [local count: 80531]:
  # DEBUG result => result_3
  # DEBUG BEGIN_STMT
  if (result_3 == 0)
    goto <bb 9>; [33.00%]
  else
    goto <bb 13>; [67.00%]

  <bb 9> [local count: 26575]:
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_08 ();
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_11
  # DEBUG type => type_15(D)
  # DEBUG INLINE_ENTRY FlexCAN_SetRxMaskType
  # DEBUG BEGIN_STMT
  if (type_15(D) == 0)
    goto <bb 10>; [50.00%]
  else
    goto <bb 11>; [50.00%]

  <bb 10> [local count: 13288]:
  # DEBUG BEGIN_STMT
  _26 ={v} pBase_11->MCR;
  _27 = _26 & 4294901759;
  pBase_11->MCR ={v} _27;
  goto <bb 12>; [100.00%]

  <bb 11> [local count: 13288]:
  # DEBUG BEGIN_STMT
  _28 ={v} pBase_11->MCR;
  _29 = _28 | 65536;
  pBase_11->MCR ={v} _29;

  <bb 12> [local count: 26575]:
  # DEBUG base => NULL
  # DEBUG type => NULL
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_08 ();

  <bb 13> [local count: 107374]:
  # result_10 = PHI <result_3(8), 0(12), 1(7)>
  # DEBUG result => NULL
  # DEBUG BEGIN_STMT
  if (_21 < 0)
    goto <bb 14>; [25.50%]
  else
    goto <bb 16>; [74.50%]

  <bb 14> [local count: 27380]:
  # DEBUG BEGIN_STMT
  status_19 = FlexCAN_Disable (pBase_11);
  # DEBUG status => status_19
  # DEBUG BEGIN_STMT
  if (status_19 != 0)
    goto <bb 15>; [50.00%]
  else
    goto <bb 16>; [50.00%]

  <bb 15> [local count: 13690]:
  # DEBUG BEGIN_STMT
  # DEBUG result => status_19

  <bb 16> [local count: 107374]:
  # result_4 = PHI <result_10(13), result_10(14), status_19(15)>
  # DEBUG result => result_4
  # DEBUG BEGIN_STMT
  return result_4;

}



;; Function FlexCAN_Ip_SetBitrate_Privileged (FlexCAN_Ip_SetBitrate_Privileged, funcdef_no=83, decl_uid=6412, cgraph_uid=84, symbol_order=85)

FlexCAN_Ip_SetBitrate_Privileged (uint8 instance, const struct Flexcan_Ip_TimeSegmentType * bitrate, boolean enhExt)
{
  volatile boolean x;
  volatile boolean x;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  _Bool _2;
  int _3;
  long unsigned int _23;
  signed int _24;
  _Bool x.0_25;
  _Bool x.0_26;
  long unsigned int _27;
  long unsigned int _28;
  long unsigned int _29;
  signed int _30;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  _1 = instance_11(D) <= 2;
  x ={v} _1;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_26 ={v} x;
  if (x.0_26 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 20>; [50.00%]

  <bb 20> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 22> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _2 = bitrate_13(D) != 0B;
  x ={v} _2;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_25 ={v} x;
  if (x.0_25 != 0)
    goto <bb 6>; [50.00%]
  else
    goto <bb 19>; [50.00%]

  <bb 19> [local count: 53687]:

  <bb 5> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 21> [local count: 536870913]:
  goto <bb 5>; [100.00%]

  <bb 6> [local count: 53687]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  # DEBUG result => 0
  # DEBUG BEGIN_STMT
  # DEBUG status => 0
  # DEBUG BEGIN_STMT
  _3 = (int) instance_11(D);
  pBase_14 = Flexcan_Ip_apxBase[_3];
  # DEBUG pBase => pBase_14
  # DEBUG BEGIN_STMT
  # DEBUG pBase => pBase_14
  # DEBUG INLINE_ENTRY FlexCAN_IsEnabled
  # DEBUG BEGIN_STMT
  _23 ={v} MEM[(const struct FLEXCAN_Type *)pBase_14].MCR;
  _24 = (signed int) _23;
  # DEBUG pBase => NULL
  # DEBUG disabled => _24 < 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  if (_24 < 0)
    goto <bb 7>; [25.50%]
  else
    goto <bb 8>; [74.50%]

  <bb 7> [local count: 13690]:
  # DEBUG BEGIN_STMT
  result_16 = FlexCAN_Enable (pBase_14);
  # DEBUG result => result_16

  <bb 8> [local count: 53687]:
  # result_5 = PHI <0(6), result_16(7)>
  # DEBUG result => result_5
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_14
  # DEBUG INLINE_ENTRY FlexCAN_IsFreezeMode
  # DEBUG BEGIN_STMT
  _27 ={v} MEM[(const struct FLEXCAN_Type *)pBase_14].MCR;
  _28 = _27 & 16777216;
  # DEBUG base => NULL
  # DEBUG freeze => _28 != 0
  # DEBUG BEGIN_STMT
  if (_28 == 0)
    goto <bb 9>; [50.00%]
  else
    goto <bb 10>; [50.00%]

  <bb 9> [local count: 26844]:
  if (result_5 == 0)
    goto <bb 15>; [50.00%]
  else
    goto <bb 10>; [50.00%]

  <bb 10> [local count: 40265]:
  # DEBUG result => result_5
  # DEBUG BEGIN_STMT
  if (result_5 == 0)
    goto <bb 11>; [33.00%]
  else
    goto <bb 15>; [67.00%]

  <bb 11> [local count: 13288]:
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_14 ();
  # DEBUG BEGIN_STMT
  # DEBUG pBase => pBase_14
  # DEBUG INLINE_ENTRY FlexCAN_IsExCbtEnabled
  # DEBUG BEGIN_STMT
  _29 ={v} MEM[(const struct FLEXCAN_Type *)pBase_14].CBT;
  _30 = (signed int) _29;
  # DEBUG pBase => NULL
  if (_30 < 0)
    goto <bb 12>; [41.00%]
  else
    goto <bb 13>; [59.00%]

  <bb 12> [local count: 5448]:
  # DEBUG BEGIN_STMT
  FlexCAN_SetExtendedTimeSegments (pBase_14, bitrate_13(D));
  goto <bb 14>; [100.00%]

  <bb 13> [local count: 7840]:
  # DEBUG BEGIN_STMT
  FlexCAN_SetTimeSegments (pBase_14, bitrate_13(D));

  <bb 14> [local count: 13288]:
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_14 ();

  <bb 15> [local count: 53687]:
  # result_4 = PHI <result_5(10), 0(14), 1(9)>
  # DEBUG result => NULL
  # DEBUG BEGIN_STMT
  if (_24 < 0)
    goto <bb 16>; [25.50%]
  else
    goto <bb 18>; [74.50%]

  <bb 16> [local count: 13690]:
  # DEBUG BEGIN_STMT
  status_22 = FlexCAN_Disable (pBase_14);
  # DEBUG status => status_22
  # DEBUG BEGIN_STMT
  if (status_22 != 0)
    goto <bb 17>; [50.00%]
  else
    goto <bb 18>; [50.00%]

  <bb 17> [local count: 6845]:
  # DEBUG BEGIN_STMT
  # DEBUG result => status_22

  <bb 18> [local count: 53687]:
  # result_6 = PHI <result_4(15), result_4(16), status_22(17)>
  # DEBUG result => result_6
  # DEBUG BEGIN_STMT
  return result_6;

}



;; Function FlexCAN_Ip_GetBitrate (FlexCAN_Ip_GetBitrate, funcdef_no=84, decl_uid=6487, cgraph_uid=85, symbol_order=86)


Symbols to be put in SSA form
{ D.8259 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 18
Number of blocks to update: 17 ( 94%)


Merging blocks 3 and 13
Merging blocks 5 and 12
Removing basic block 7
Removing basic block 8
Removing basic block 10
Removing basic block 11
Removing basic block 14
Removing basic block 16
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9
;;
;; Loop 1
;;  header 5, latch 5
;;  depth 1, outer 0
;;  nodes: 5
;;
;; Loop 2
;;  header 3, latch 3
;;  depth 1, outer 0
;;  nodes: 3
;; 2 succs { 4 3 }
;; 3 succs { 3 }
;; 4 succs { 6 5 }
;; 5 succs { 5 }
;; 6 succs { 7 8 }
;; 7 succs { 9 }
;; 8 succs { 9 }
;; 9 succs { 1 }
FlexCAN_Ip_GetBitrate (uint8 instance, struct Flexcan_Ip_TimeSegmentType * bitrate)
{
  volatile boolean x;
  volatile boolean x;
  const struct FLEXCAN_Type * pBase;
  _Bool _1;
  _Bool _2;
  int _3;
  long unsigned int _11;
  signed int _12;
  _Bool x.0_13;
  _Bool x.0_14;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _25;
  long unsigned int _26;
  long unsigned int _27;
  long unsigned int _28;
  long unsigned int _29;
  long unsigned int _30;
  long unsigned int _31;
  long unsigned int _32;
  long unsigned int _33;
  long unsigned int _34;
  long unsigned int _35;
  long unsigned int _36;
  long unsigned int _37;
  long unsigned int _38;
  long unsigned int _39;
  long unsigned int _40;
  long unsigned int _41;
  long unsigned int _42;
  long unsigned int _43;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  _1 = instance_5(D) <= 2;
  x ={v} _1;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_14 ={v} x;
  if (x.0_14 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _2 = bitrate_7(D) != 0B;
  x ={v} _2;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_13 ={v} x;
  if (x.0_13 != 0)
    goto <bb 6>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 5> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 5>; [100.00%]

  <bb 6> [local count: 53687]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _3 = (int) instance_5(D);
  pBase_8 = Flexcan_Ip_apxBase[_3];
  # DEBUG pBase => pBase_8
  # DEBUG BEGIN_STMT
  # DEBUG enhCbt => 0
  # DEBUG BEGIN_STMT
  # DEBUG pBase => pBase_8
  # DEBUG INLINE_ENTRY FlexCAN_IsExCbtEnabled
  # DEBUG BEGIN_STMT
  _11 ={v} pBase_8->CBT;
  _12 = (signed int) _11;
  # DEBUG pBase => NULL
  if (_12 < 0)
    goto <bb 7>; [41.00%]
  else
    goto <bb 8>; [59.00%]

  <bb 7> [local count: 22012]:
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_8
  # DEBUG timeSeg => bitrate_7(D)
  # DEBUG INLINE_ENTRY FlexCAN_GetExtendedTimeSegments
  # DEBUG BEGIN_STMT
  _17 ={v} pBase_8->CBT;
  _18 = _17 >> 21;
  _19 = _18 & 1023;
  bitrate_7(D)->preDivider = _19;
  # DEBUG BEGIN_STMT
  _20 ={v} pBase_8->CBT;
  _21 = _20 >> 10;
  _22 = _21 & 63;
  bitrate_7(D)->propSeg = _22;
  # DEBUG BEGIN_STMT
  _23 ={v} pBase_8->CBT;
  _24 = _23 >> 5;
  _25 = _24 & 31;
  bitrate_7(D)->phaseSeg1 = _25;
  # DEBUG BEGIN_STMT
  _26 ={v} pBase_8->CBT;
  _27 = _26 & 31;
  bitrate_7(D)->phaseSeg2 = _27;
  # DEBUG BEGIN_STMT
  _28 ={v} pBase_8->CBT;
  _29 = _28 >> 16;
  _30 = _29 & 31;
  bitrate_7(D)->rJumpwidth = _30;
  goto <bb 9>; [100.00%]

  <bb 8> [local count: 31675]:
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_8
  # DEBUG timeSeg => bitrate_7(D)
  # DEBUG INLINE_ENTRY FlexCAN_GetTimeSegments
  # DEBUG BEGIN_STMT
  _31 ={v} pBase_8->CTRL1;
  _32 = _31 >> 24;
  bitrate_7(D)->preDivider = _32;
  # DEBUG BEGIN_STMT
  _33 ={v} pBase_8->CTRL1;
  _34 = _33 & 7;
  bitrate_7(D)->propSeg = _34;
  # DEBUG BEGIN_STMT
  _35 ={v} pBase_8->CTRL1;
  _36 = _35 >> 19;
  _37 = _36 & 7;
  bitrate_7(D)->phaseSeg1 = _37;
  # DEBUG BEGIN_STMT
  _38 ={v} pBase_8->CTRL1;
  _39 = _38 >> 16;
  _40 = _39 & 7;
  bitrate_7(D)->phaseSeg2 = _40;
  # DEBUG BEGIN_STMT
  _41 ={v} pBase_8->CTRL1;
  _42 = _41 >> 22;
  _43 = _42 & 3;
  bitrate_7(D)->rJumpwidth = _43;

  <bb 9> [local count: 53687]:
  # DEBUG base => NULL
  # DEBUG timeSeg => NULL
  # DEBUG base => NULL
  # DEBUG timeSeg => NULL
  # DEBUG BEGIN_STMT
  return 0;

}



;; Function FlexCAN_Ip_ClearTDCFail (FlexCAN_Ip_ClearTDCFail, funcdef_no=85, decl_uid=6489, cgraph_uid=86, symbol_order=87)

FlexCAN_Ip_ClearTDCFail (uint8 u8Instance)
{
  volatile boolean x;
  struct FLEXCAN_Type * pBase;
  _Bool _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  _Bool x.0_11;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  _1 = u8Instance_5(D) <= 2;
  x ={v} _1;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_11 ={v} x;
  if (x.0_11 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 5> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 6> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _2 = (int) u8Instance_5(D);
  pBase_7 = Flexcan_Ip_apxBase[_2];
  # DEBUG pBase => pBase_7
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_09 ();
  # DEBUG BEGIN_STMT
  _3 ={v} pBase_7->FDCTRL;
  _4 = _3 | 16384;
  pBase_7->FDCTRL ={v} _4;
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_09 ();
  return;

}



;; Function FlexCAN_Ip_GetTDCFail (FlexCAN_Ip_GetTDCFail, funcdef_no=86, decl_uid=6491, cgraph_uid=87, symbol_order=88)

FlexCAN_Ip_GetTDCFail (uint8 u8Instance)
{
  volatile boolean x;
  const struct FLEXCAN_Type * pBase;
  boolean value;
  _Bool _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  _Bool x.0_9;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  # DEBUG value => 0
  # DEBUG BEGIN_STMT
  _1 = u8Instance_5(D) <= 2;
  x ={v} _1;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_9 ={v} x;
  if (x.0_9 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 5> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 6> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _2 = (int) u8Instance_5(D);
  pBase_7 = Flexcan_Ip_apxBase[_2];
  # DEBUG pBase => pBase_7
  # DEBUG BEGIN_STMT
  _3 ={v} pBase_7->FDCTRL;
  _4 = _3 & 16384;
  value_8 = _4 != 0;
  # DEBUG value => value_8
  # DEBUG BEGIN_STMT
  return value_8;

}



;; Function FlexCAN_Ip_GetTDCValue (FlexCAN_Ip_GetTDCValue, funcdef_no=87, decl_uid=6493, cgraph_uid=88, symbol_order=89)

FlexCAN_Ip_GetTDCValue (uint8 u8Instance)
{
  volatile boolean x;
  const struct FLEXCAN_Type * pBase;
  uint8 value;
  _Bool _1;
  int _2;
  long unsigned int _3;
  unsigned char _4;
  _Bool x.0_9;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  # DEBUG value => 0
  # DEBUG BEGIN_STMT
  _1 = u8Instance_5(D) <= 2;
  x ={v} _1;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_9 ={v} x;
  if (x.0_9 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 5> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 6> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _2 = (int) u8Instance_5(D);
  pBase_7 = Flexcan_Ip_apxBase[_2];
  # DEBUG pBase => pBase_7
  # DEBUG BEGIN_STMT
  _3 ={v} pBase_7->FDCTRL;
  _4 = (unsigned char) _3;
  value_8 = _4 & 63;
  # DEBUG value => value_8
  # DEBUG BEGIN_STMT
  return value_8;

}



;; Function FlexCAN_Ip_SetBitrateCbt_Privileged (FlexCAN_Ip_SetBitrateCbt_Privileged, funcdef_no=88, decl_uid=6416, cgraph_uid=89, symbol_order=90)


Symbols to be put in SSA form
{ D.8263 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 27
Number of blocks to update: 26 ( 96%)


Merging blocks 3 and 20
Merging blocks 5 and 19
Merging blocks 12 and 22
Removing basic block 17
Removing basic block 18
Merging blocks 26 and 21
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
;;
;; Loop 1
;;  header 5, latch 5
;;  depth 1, outer 0
;;  nodes: 5
;;
;; Loop 2
;;  header 3, latch 3
;;  depth 1, outer 0
;;  nodes: 3
;; 2 succs { 4 3 }
;; 3 succs { 3 }
;; 4 succs { 6 5 }
;; 5 succs { 5 }
;; 6 succs { 7 8 }
;; 7 succs { 8 }
;; 8 succs { 17 9 }
;; 9 succs { 10 11 }
;; 10 succs { 17 11 }
;; 11 succs { 12 17 }
;; 12 succs { 14 13 }
;; 13 succs { 14 }
;; 14 succs { 16 15 }
;; 15 succs { 16 }
;; 16 succs { 17 }
;; 17 succs { 18 20 }
;; 18 succs { 19 20 }
;; 19 succs { 20 }
;; 20 succs { 1 }
FlexCAN_Ip_SetBitrateCbt_Privileged (uint8 instance, const struct Flexcan_Ip_TimeSegmentType * bitrate, boolean bitRateSwitch)
{
  volatile boolean x;
  volatile boolean x;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  _Bool _2;
  int _3;
  long unsigned int _23;
  long unsigned int _24;
  _Bool _25;
  long unsigned int _26;
  signed int _27;
  _Bool x.0_28;
  _Bool x.0_29;
  long unsigned int _30;
  long unsigned int _31;
  long unsigned int _34;
  long unsigned int _35;
  long unsigned int iftmp.2_36;
  long unsigned int _37;
  long unsigned int _38;
  long unsigned int _39;
  long unsigned int iftmp.3_40;
  long unsigned int _41;
  long unsigned int _42;
  long unsigned int _43;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  _1 = instance_10(D) <= 2;
  x ={v} _1;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_29 ={v} x;
  if (x.0_29 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _2 = bitrate_12(D) != 0B;
  x ={v} _2;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_28 ={v} x;
  if (x.0_28 != 0)
    goto <bb 6>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 5> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 5>; [100.00%]

  <bb 6> [local count: 53687]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  # DEBUG result => 0
  # DEBUG BEGIN_STMT
  # DEBUG status => 0
  # DEBUG BEGIN_STMT
  _3 = (int) instance_10(D);
  pBase_13 = Flexcan_Ip_apxBase[_3];
  # DEBUG pBase => pBase_13
  # DEBUG BEGIN_STMT
  # DEBUG pBase => pBase_13
  # DEBUG INLINE_ENTRY FlexCAN_IsEnabled
  # DEBUG BEGIN_STMT
  _26 ={v} MEM[(const struct FLEXCAN_Type *)pBase_13].MCR;
  _27 = (signed int) _26;
  # DEBUG pBase => NULL
  # DEBUG disabled => _27 < 0
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_13
  # DEBUG INLINE_ENTRY FlexCAN_IsFDEnabled
  # DEBUG BEGIN_STMT
  _23 ={v} MEM[(const struct FLEXCAN_Type *)pBase_13].MCR;
  _24 = _23 & 2048;
  _25 = _24 != 0;
  # DEBUG base => NULL
  # DEBUG fd_enable => _25
  # DEBUG BEGIN_STMT
  if (_27 < 0)
    goto <bb 7>; [25.50%]
  else
    goto <bb 8>; [74.50%]

  <bb 7> [local count: 13690]:
  # DEBUG BEGIN_STMT
  result_15 = FlexCAN_Enable (pBase_13);
  # DEBUG result => result_15

  <bb 8> [local count: 53687]:
  # result_5 = PHI <0(6), result_15(7)>
  # DEBUG result => result_5
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_13
  # DEBUG INLINE_ENTRY FlexCAN_IsFreezeMode
  # DEBUG BEGIN_STMT
  _30 ={v} MEM[(const struct FLEXCAN_Type *)pBase_13].MCR;
  _31 = _30 & 16777216;
  # DEBUG base => NULL
  # DEBUG freeze => _31 != 0
  # DEBUG BEGIN_STMT
  if (_24 == 0)
    goto <bb 17>; [50.00%]
  else
    goto <bb 9>; [50.00%]

  <bb 9> [local count: 26844]:
  if (_31 == 0)
    goto <bb 10>; [50.00%]
  else
    goto <bb 11>; [50.00%]

  <bb 10> [local count: 13422]:
  if (result_5 == 0)
    goto <bb 17>; [50.00%]
  else
    goto <bb 11>; [50.00%]

  <bb 11> [local count: 20133]:
  # DEBUG result => result_5
  # DEBUG BEGIN_STMT
  if (result_5 == 0)
    goto <bb 12>; [33.00%]
  else
    goto <bb 17>; [67.00%]

  <bb 12> [local count: 6644]:
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_15 ();
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_13
  # DEBUG enableFD => _25
  # DEBUG enableBRS => bitRateSwitch_17(D)
  # DEBUG INLINE_ENTRY FlexCAN_SetFDEnabled
  # DEBUG BEGIN_STMT
  _34 ={v} pBase_13->MCR;
  _35 = _34 & 4294965247;
  if (_25 != 0)
    goto <bb 14>; [50.00%]
  else
    goto <bb 13>; [50.00%]

  <bb 13> [local count: 3322]:

  <bb 14> [local count: 6644]:
  # iftmp.2_36 = PHI <2048(12), 0(13)>
  _37 = _35 | iftmp.2_36;
  pBase_13->MCR ={v} _37;
  # DEBUG BEGIN_STMT
  _38 ={v} pBase_13->FDCTRL;
  _39 = _38 & 2147483647;
  if (bitRateSwitch_17(D) != 0)
    goto <bb 16>; [50.00%]
  else
    goto <bb 15>; [50.00%]

  <bb 15> [local count: 3322]:

  <bb 16> [local count: 6644]:
  # iftmp.3_40 = PHI <2147483648(14), 0(15)>
  _41 = _39 | iftmp.3_40;
  pBase_13->FDCTRL ={v} _41;
  # DEBUG BEGIN_STMT
  _42 ={v} pBase_13->FDCTRL;
  _43 = _42 & 4294926591;
  pBase_13->FDCTRL ={v} _43;
  # DEBUG base => NULL
  # DEBUG enableFD => NULL
  # DEBUG enableBRS => NULL
  # DEBUG BEGIN_STMT
  FlexCAN_SetFDTimeSegments (pBase_13, bitrate_12(D));
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_15 ();

  <bb 17> [local count: 53687]:
  # result_4 = PHI <result_5(11), 0(16), 1(8), 1(10)>
  # DEBUG result => NULL
  # DEBUG BEGIN_STMT
  if (_27 < 0)
    goto <bb 18>; [25.50%]
  else
    goto <bb 20>; [74.50%]

  <bb 18> [local count: 13690]:
  # DEBUG BEGIN_STMT
  status_22 = FlexCAN_Disable (pBase_13);
  # DEBUG status => status_22
  # DEBUG BEGIN_STMT
  if (status_22 != 0)
    goto <bb 19>; [50.00%]
  else
    goto <bb 20>; [50.00%]

  <bb 19> [local count: 6845]:
  # DEBUG BEGIN_STMT
  # DEBUG result => status_22

  <bb 20> [local count: 53687]:
  # result_6 = PHI <result_4(17), result_4(18), status_22(19)>
  # DEBUG result => result_6
  # DEBUG BEGIN_STMT
  return result_6;

}



;; Function FlexCAN_Ip_GetBitrateFD (FlexCAN_Ip_GetBitrateFD, funcdef_no=89, decl_uid=6496, cgraph_uid=90, symbol_order=91)


Symbols to be put in SSA form
{ D.8264 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 13
Number of blocks to update: 12 ( 92%)


Merging blocks 3 and 10
Merging blocks 5 and 9
Merging blocks 6 and 12
Removing basic block 7
Removing basic block 8
Merging blocks 6 and 11
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;;
;; Loop 1
;;  header 5, latch 5
;;  depth 1, outer 0
;;  nodes: 5
;;
;; Loop 2
;;  header 3, latch 3
;;  depth 1, outer 0
;;  nodes: 3
;; 2 succs { 4 3 }
;; 3 succs { 3 }
;; 4 succs { 6 5 }
;; 5 succs { 5 }
;; 6 succs { 1 }
FlexCAN_Ip_GetBitrateFD (uint8 instance, struct Flexcan_Ip_TimeSegmentType * bitrate)
{
  volatile boolean x;
  volatile boolean x;
  const struct FLEXCAN_Type * pBase;
  _Bool _1;
  _Bool _2;
  int _3;
  _Bool x.0_9;
  _Bool x.0_10;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _25;
  long unsigned int _26;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  _1 = instance_4(D) <= 2;
  x ={v} _1;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_10 ={v} x;
  if (x.0_10 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _2 = bitrate_6(D) != 0B;
  x ={v} _2;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_9 ={v} x;
  if (x.0_9 != 0)
    goto <bb 6>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 5> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 5>; [100.00%]

  <bb 6> [local count: 53687]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _3 = (int) instance_4(D);
  pBase_7 = Flexcan_Ip_apxBase[_3];
  # DEBUG pBase => pBase_7
  # DEBUG BEGIN_STMT
  # DEBUG enhCbt => 0
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_7
  # DEBUG timeSeg => bitrate_6(D)
  # DEBUG INLINE_ENTRY FlexCAN_GetFDTimeSegments
  # DEBUG BEGIN_STMT
  _13 ={v} pBase_7->FDCBT;
  _14 = _13 >> 20;
  _15 = _14 & 1023;
  bitrate_6(D)->preDivider = _15;
  # DEBUG BEGIN_STMT
  _16 ={v} pBase_7->FDCBT;
  _17 = _16 >> 10;
  _18 = _17 & 31;
  bitrate_6(D)->propSeg = _18;
  # DEBUG BEGIN_STMT
  _19 ={v} pBase_7->FDCBT;
  _20 = _19 >> 5;
  _21 = _20 & 7;
  bitrate_6(D)->phaseSeg1 = _21;
  # DEBUG BEGIN_STMT
  _22 ={v} pBase_7->FDCBT;
  _23 = _22 & 7;
  bitrate_6(D)->phaseSeg2 = _23;
  # DEBUG BEGIN_STMT
  _24 ={v} pBase_7->FDCBT;
  _25 = _24 >> 16;
  _26 = _25 & 7;
  bitrate_6(D)->rJumpwidth = _26;
  # DEBUG base => NULL
  # DEBUG timeSeg => NULL
  # DEBUG BEGIN_STMT
  return 0;

}



;; Function FlexCAN_Ip_SetTDCOffset_Privileged (FlexCAN_Ip_SetTDCOffset_Privileged, funcdef_no=90, decl_uid=6423, cgraph_uid=91, symbol_order=92)


Symbols to be put in SSA form
{ D.8265 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 24
Number of blocks to update: 23 ( 96%)


Merging blocks 3 and 19
Merging blocks 7 and 18
Merging blocks 11 and 21
Removing basic block 16
Removing basic block 17
Merging blocks 23 and 20
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17
;;
;; Loop 2
;;  header 7, latch 7
;;  depth 1, outer 0
;;  nodes: 7
;;
;; Loop 1
;;  header 3, latch 3
;;  depth 1, outer 0
;;  nodes: 3
;; 2 succs { 4 3 }
;; 3 succs { 3 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 8 7 }
;; 7 succs { 7 }
;; 8 succs { 9 10 }
;; 9 succs { 14 10 }
;; 10 succs { 11 14 }
;; 11 succs { 12 13 }
;; 12 succs { 13 }
;; 13 succs { 14 }
;; 14 succs { 15 17 }
;; 15 succs { 16 17 }
;; 16 succs { 17 }
;; 17 succs { 1 }
FlexCAN_Ip_SetTDCOffset_Privileged (uint8 instance, boolean enable, uint8 offset)
{
  uint32 tmp;
  volatile boolean x;
  volatile boolean x;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  int _2;
  _Bool _3;
  long unsigned int _23;
  signed int _24;
  _Bool x.0_25;
  long unsigned int _26;
  long unsigned int _27;
  _Bool x.0_28;
  long unsigned int _34;
  long unsigned int _35;
  long unsigned int _36;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  _1 = instance_9(D) <= 2;
  x ={v} _1;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_25 ={v} x;
  if (x.0_25 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  # DEBUG result => 0
  # DEBUG BEGIN_STMT
  # DEBUG status => 0
  # DEBUG BEGIN_STMT
  _2 = (int) instance_9(D);
  pBase_12 = Flexcan_Ip_apxBase[_2];
  # DEBUG pBase => pBase_12
  # DEBUG BEGIN_STMT
  # DEBUG pBase => pBase_12
  # DEBUG INLINE_ENTRY FlexCAN_IsEnabled
  # DEBUG BEGIN_STMT
  _23 ={v} MEM[(const struct FLEXCAN_Type *)pBase_12].MCR;
  _24 = (signed int) _23;
  # DEBUG pBase => NULL
  # DEBUG disabled => _24 < 0
  # DEBUG BEGIN_STMT
  if (_24 < 0)
    goto <bb 5>; [25.50%]
  else
    goto <bb 6>; [74.50%]

  <bb 5> [local count: 27380]:
  # DEBUG BEGIN_STMT
  result_14 = FlexCAN_Enable (pBase_12);
  # DEBUG result => result_14

  <bb 6> [local count: 107374]:
  # result_4 = PHI <0(4), result_14(5)>
  # DEBUG result => result_4
  # DEBUG BEGIN_STMT
  _3 = FlexCAN_IsFDAvailable (pBase_12);
  x ={v} _3;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_28 ={v} x;
  if (x.0_28 != 0)
    goto <bb 8>; [50.00%]
  else
    goto <bb 7>; [50.00%]

  <bb 7> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 7>; [100.00%]

  <bb 8> [local count: 53687]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_12
  # DEBUG INLINE_ENTRY FlexCAN_IsFreezeMode
  # DEBUG BEGIN_STMT
  _26 ={v} MEM[(const struct FLEXCAN_Type *)pBase_12].MCR;
  _27 = _26 & 16777216;
  # DEBUG base => NULL
  # DEBUG freeze => _27 != 0
  # DEBUG BEGIN_STMT
  if (_27 == 0)
    goto <bb 9>; [50.00%]
  else
    goto <bb 10>; [50.00%]

  <bb 9> [local count: 26844]:
  if (result_4 == 0)
    goto <bb 14>; [50.00%]
  else
    goto <bb 10>; [50.00%]

  <bb 10> [local count: 40265]:
  # DEBUG result => result_4
  # DEBUG BEGIN_STMT
  if (result_4 == 0)
    goto <bb 11>; [33.00%]
  else
    goto <bb 14>; [67.00%]

  <bb 11> [local count: 13288]:
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_16 ();
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_12
  # DEBUG enable => enable_17(D)
  # DEBUG offset => offset_18(D)
  # DEBUG INLINE_ENTRY FlexCAN_SetTDCOffset
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  tmp_31 ={v} pBase_12->FDCTRL;
  # DEBUG tmp => tmp_31
  # DEBUG BEGIN_STMT
  tmp_32 = tmp_31 & 4294926591;
  # DEBUG tmp => tmp_32
  # DEBUG BEGIN_STMT
  if (enable_17(D) != 0)
    goto <bb 12>; [50.00%]
  else
    goto <bb 13>; [50.00%]

  <bb 12> [local count: 6644]:
  # DEBUG BEGIN_STMT
  tmp_33 = tmp_32 | 32768;
  # DEBUG tmp => tmp_33
  # DEBUG BEGIN_STMT
  _34 = (long unsigned int) offset_18(D);
  _35 = _34 << 8;
  _36 = _35 & 7936;
  tmp_37 = tmp_33 | _36;
  # DEBUG tmp => tmp_37

  <bb 13> [local count: 13288]:
  # tmp_38 = PHI <tmp_32(11), tmp_37(12)>
  # DEBUG tmp => tmp_38
  # DEBUG BEGIN_STMT
  pBase_12->FDCTRL ={v} tmp_38;
  # DEBUG base => NULL
  # DEBUG enable => NULL
  # DEBUG offset => NULL
  # DEBUG tmp => NULL
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_16 ();

  <bb 14> [local count: 53687]:
  # result_11 = PHI <result_4(10), 0(13), 1(9)>
  # DEBUG result => NULL
  # DEBUG BEGIN_STMT
  if (_24 < 0)
    goto <bb 15>; [25.50%]
  else
    goto <bb 17>; [74.50%]

  <bb 15> [local count: 13690]:
  # DEBUG BEGIN_STMT
  status_22 = FlexCAN_Disable (pBase_12);
  # DEBUG status => status_22
  # DEBUG BEGIN_STMT
  if (status_22 != 0)
    goto <bb 16>; [50.00%]
  else
    goto <bb 17>; [50.00%]

  <bb 16> [local count: 6845]:
  # DEBUG BEGIN_STMT
  # DEBUG result => status_22

  <bb 17> [local count: 53687]:
  # result_5 = PHI <result_11(14), result_11(15), status_22(16)>
  # DEBUG result => result_5
  # DEBUG BEGIN_STMT
  return result_5;

}



;; Function FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged (FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged, funcdef_no=91, decl_uid=6419, cgraph_uid=92, symbol_order=93)


Symbols to be put in SSA form
{ D.8266 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 18
Number of blocks to update: 17 ( 94%)


Merging blocks 3 and 15
Merging blocks 9 and 17
Removing basic block 14
Merging blocks 9 and 16
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13
;;
;; Loop 1
;;  header 3, latch 3
;;  depth 1, outer 0
;;  nodes: 3
;; 2 succs { 4 3 }
;; 3 succs { 3 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 7 8 }
;; 7 succs { 10 8 }
;; 8 succs { 9 10 }
;; 9 succs { 10 }
;; 10 succs { 11 13 }
;; 11 succs { 12 13 }
;; 12 succs { 13 }
;; 13 succs { 1 }
FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged (uint8 instance, uint8 value)
{
  volatile boolean x;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  int _2;
  long unsigned int _20;
  signed int _21;
  _Bool x.0_22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _26;
  long unsigned int _27;
  long unsigned int _28;
  long unsigned int _29;
  long unsigned int _30;
  long unsigned int _31;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  _1 = instance_8(D) <= 2;
  x ={v} _1;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_22 ={v} x;
  if (x.0_22 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  # DEBUG result => 0
  # DEBUG BEGIN_STMT
  # DEBUG status => 0
  # DEBUG BEGIN_STMT
  _2 = (int) instance_8(D);
  pBase_11 = Flexcan_Ip_apxBase[_2];
  # DEBUG pBase => pBase_11
  # DEBUG BEGIN_STMT
  # DEBUG pBase => pBase_11
  # DEBUG INLINE_ENTRY FlexCAN_IsEnabled
  # DEBUG BEGIN_STMT
  _20 ={v} MEM[(const struct FLEXCAN_Type *)pBase_11].MCR;
  _21 = (signed int) _20;
  # DEBUG pBase => NULL
  # DEBUG disabled => _21 < 0
  # DEBUG BEGIN_STMT
  if (_21 < 0)
    goto <bb 5>; [25.50%]
  else
    goto <bb 6>; [74.50%]

  <bb 5> [local count: 27380]:
  # DEBUG BEGIN_STMT
  result_13 = FlexCAN_Enable (pBase_11);
  # DEBUG result => result_13

  <bb 6> [local count: 107374]:
  # result_3 = PHI <0(4), result_13(5)>
  # DEBUG result => result_3
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_11
  # DEBUG INLINE_ENTRY FlexCAN_IsFreezeMode
  # DEBUG BEGIN_STMT
  _23 ={v} MEM[(const struct FLEXCAN_Type *)pBase_11].MCR;
  _24 = _23 & 16777216;
  # DEBUG base => NULL
  # DEBUG freeze => _24 != 0
  # DEBUG BEGIN_STMT
  if (_24 == 0)
    goto <bb 7>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 7> [local count: 53687]:
  if (result_3 == 0)
    goto <bb 10>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 8> [local count: 80531]:
  # DEBUG result => result_3
  # DEBUG BEGIN_STMT
  if (result_3 == 0)
    goto <bb 9>; [33.00%]
  else
    goto <bb 10>; [67.00%]

  <bb 9> [local count: 26575]:
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_17 ();
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_11
  # DEBUG tasd => value_15(D)
  # DEBUG INLINE_ENTRY FlexCAN_SetTxArbitrationStartDelay
  # DEBUG BEGIN_STMT
  _26 ={v} pBase_11->CTRL2;
  _27 = _26 & 4278714367;
  _28 = (long unsigned int) value_15(D);
  _29 = _28 << 19;
  _30 = _29 & 16252928;
  _31 = _27 | _30;
  pBase_11->CTRL2 ={v} _31;
  # DEBUG base => NULL
  # DEBUG tasd => NULL
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_17 ();

  <bb 10> [local count: 107374]:
  # result_10 = PHI <result_3(8), 0(9), 1(7)>
  # DEBUG result => NULL
  # DEBUG BEGIN_STMT
  if (_21 < 0)
    goto <bb 11>; [25.50%]
  else
    goto <bb 13>; [74.50%]

  <bb 11> [local count: 27380]:
  # DEBUG BEGIN_STMT
  status_19 = FlexCAN_Disable (pBase_11);
  # DEBUG status => status_19
  # DEBUG BEGIN_STMT
  if (status_19 != 0)
    goto <bb 12>; [50.00%]
  else
    goto <bb 13>; [50.00%]

  <bb 12> [local count: 13690]:
  # DEBUG BEGIN_STMT
  # DEBUG result => status_19

  <bb 13> [local count: 107374]:
  # result_4 = PHI <result_10(10), result_10(11), status_19(12)>
  # DEBUG result => result_4
  # DEBUG BEGIN_STMT
  return result_4;

}



;; Function FlexCAN_Ip_GetBuffStatusFlag (FlexCAN_Ip_GetBuffStatusFlag, funcdef_no=92, decl_uid=6499, cgraph_uid=93, symbol_order=94)

FlexCAN_Ip_GetBuffStatusFlag (uint8 instance, uint8 msgBuffIdx)
{
  volatile boolean x;
  const struct FLEXCAN_Type * pBase;
  boolean returnResult;
  _Bool _1;
  int _2;
  long unsigned int _3;
  unsigned char _4;
  _Bool x.0_11;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  # DEBUG returnResult => 1
  # DEBUG BEGIN_STMT
  _1 = instance_5(D) <= 2;
  x ={v} _1;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_11 ={v} x;
  if (x.0_11 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 5> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 6> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _2 = (int) instance_5(D);
  pBase_7 = Flexcan_Ip_apxBase[_2];
  # DEBUG pBase => pBase_7
  # DEBUG BEGIN_STMT
  _3 = (long unsigned int) msgBuffIdx_8(D);
  _4 = FlexCAN_GetBuffStatusFlag (pBase_7, _3);
  returnResult_10 = _4 == 1;
  # DEBUG returnResult => returnResult_10
  # DEBUG BEGIN_STMT
  return returnResult_10;

}



;; Function FlexCAN_Ip_ClearBuffStatusFlag (FlexCAN_Ip_ClearBuffStatusFlag, funcdef_no=93, decl_uid=6502, cgraph_uid=94, symbol_order=95)

FlexCAN_Ip_ClearBuffStatusFlag (uint8 instance, uint8 msgBuffIdx)
{
  volatile boolean x;
  struct FLEXCAN_Type * pBase;
  _Bool _1;
  int _2;
  long unsigned int _3;
  _Bool x.0_9;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  _1 = instance_4(D) <= 2;
  x ={v} _1;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_9 ={v} x;
  if (x.0_9 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 5> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 6> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _2 = (int) instance_4(D);
  pBase_6 = Flexcan_Ip_apxBase[_2];
  # DEBUG pBase => pBase_6
  # DEBUG BEGIN_STMT
  _3 = (long unsigned int) msgBuffIdx_7(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase_6, _3);
  return;

}



;; Function FlexCAN_Ip_EnableInterrupts_Privileged (FlexCAN_Ip_EnableInterrupts_Privileged, funcdef_no=94, decl_uid=6425, cgraph_uid=95, symbol_order=96)

FlexCAN_Ip_EnableInterrupts_Privileged (uint8 u8Instance)
{
  volatile boolean x;
  struct Flexcan_Ip_StateType * state;
  Flexcan_Ip_StatusType result;
  struct FLEXCAN_Type * pBase;
  int _1;
  _Bool _2;
  long unsigned int _11;
  signed int _12;
  _Bool x.0_13;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  _1 = (int) u8Instance_5(D);
  pBase_7 = Flexcan_Ip_apxBase[_1];
  # DEBUG pBase => pBase_7
  # DEBUG BEGIN_STMT
  # DEBUG result => 1
  # DEBUG BEGIN_STMT
  state_8 = Flexcan_Ip_apxState[_1];
  # DEBUG state => state_8
  # DEBUG BEGIN_STMT
  _2 = u8Instance_5(D) <= 2;
  x ={v} _2;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_13 ={v} x;
  if (x.0_13 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 7>; [50.00%]

  <bb 7> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 8> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  # DEBUG pBase => pBase_7
  # DEBUG INLINE_ENTRY FlexCAN_IsEnabled
  # DEBUG BEGIN_STMT
  _11 ={v} MEM[(const struct FLEXCAN_Type *)pBase_7].MCR;
  _12 = (signed int) _11;
  # DEBUG pBase => NULL
  if (_12 >= 0)
    goto <bb 5>; [41.48%]
  else
    goto <bb 6>; [58.52%]

  <bb 5> [local count: 44539]:
  # DEBUG BEGIN_STMT
  FlexCAN_EnableInterrupts (pBase_7, u8Instance_5(D));
  # DEBUG BEGIN_STMT
  state_8->isIntActive = 1;
  # DEBUG BEGIN_STMT
  # DEBUG result => 0

  <bb 6> [local count: 107374]:
  # result_3 = PHI <1(4), 0(5)>
  # DEBUG result => result_3
  # DEBUG BEGIN_STMT
  return result_3;

}



;; Function FlexCAN_Ip_DisableInterrupts_Privileged (FlexCAN_Ip_DisableInterrupts_Privileged, funcdef_no=95, decl_uid=6427, cgraph_uid=96, symbol_order=97)

FlexCAN_Ip_DisableInterrupts_Privileged (uint8 u8Instance)
{
  volatile boolean x;
  struct Flexcan_Ip_StateType * state;
  Flexcan_Ip_StatusType result;
  struct FLEXCAN_Type * pBase;
  int _1;
  _Bool _2;
  long unsigned int _11;
  signed int _12;
  _Bool x.0_13;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  _1 = (int) u8Instance_5(D);
  pBase_7 = Flexcan_Ip_apxBase[_1];
  # DEBUG pBase => pBase_7
  # DEBUG BEGIN_STMT
  # DEBUG result => 1
  # DEBUG BEGIN_STMT
  state_8 = Flexcan_Ip_apxState[_1];
  # DEBUG state => state_8
  # DEBUG BEGIN_STMT
  _2 = u8Instance_5(D) <= 2;
  x ={v} _2;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_13 ={v} x;
  if (x.0_13 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 7>; [50.00%]

  <bb 7> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 8> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  # DEBUG pBase => pBase_7
  # DEBUG INLINE_ENTRY FlexCAN_IsEnabled
  # DEBUG BEGIN_STMT
  _11 ={v} MEM[(const struct FLEXCAN_Type *)pBase_7].MCR;
  _12 = (signed int) _11;
  # DEBUG pBase => NULL
  if (_12 >= 0)
    goto <bb 5>; [41.48%]
  else
    goto <bb 6>; [58.52%]

  <bb 5> [local count: 44539]:
  # DEBUG BEGIN_STMT
  FlexCAN_DisableInterrupts (pBase_7);
  # DEBUG BEGIN_STMT
  state_8->isIntActive = 0;
  # DEBUG BEGIN_STMT
  # DEBUG result => 0

  <bb 6> [local count: 107374]:
  # result_3 = PHI <1(4), 0(5)>
  # DEBUG result => result_3
  # DEBUG BEGIN_STMT
  return result_3;

}



;; Function FlexCAN_Ip_SetErrorInt_Privileged (FlexCAN_Ip_SetErrorInt_Privileged, funcdef_no=96, decl_uid=6431, cgraph_uid=97, symbol_order=98)

FlexCAN_Ip_SetErrorInt_Privileged (uint8 u8Instance, Flexcan_Ip_ErrorIntType type, boolean enable)
{
  volatile boolean x;
  volatile boolean x;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  int _2;
  long unsigned int _23;
  signed int _24;
  _Bool x.0_25;
  long unsigned int _26;
  long unsigned int _27;
  long unsigned int _28;
  long unsigned int _29;
  _Bool x.0_30;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  _1 = u8Instance_7(D) <= 2;
  x ={v} _1;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_25 ={v} x;
  if (x.0_25 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 21>; [50.00%]

  <bb 21> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 23> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  # DEBUG result => 0
  # DEBUG BEGIN_STMT
  # DEBUG status => 0
  # DEBUG BEGIN_STMT
  _2 = (int) u8Instance_7(D);
  pBase_11 = Flexcan_Ip_apxBase[_2];
  # DEBUG pBase => pBase_11
  # DEBUG BEGIN_STMT
  # DEBUG pBase => pBase_11
  # DEBUG INLINE_ENTRY FlexCAN_IsEnabled
  # DEBUG BEGIN_STMT
  _23 ={v} MEM[(const struct FLEXCAN_Type *)pBase_11].MCR;
  _24 = (signed int) _23;
  # DEBUG pBase => NULL
  # DEBUG disabled => _24 < 0
  # DEBUG BEGIN_STMT
  if (_24 < 0)
    goto <bb 5>; [25.50%]
  else
    goto <bb 6>; [74.50%]

  <bb 5> [local count: 27380]:
  # DEBUG BEGIN_STMT
  result_13 = FlexCAN_Enable (pBase_11);
  # DEBUG result => result_13
  # DEBUG BEGIN_STMT
  if (result_13 == 0)
    goto <bb 6>; [50.00%]
  else
    goto <bb 16>; [50.00%]

  <bb 6> [local count: 93684]:
  # result_9 = PHI <result_13(5), 0(4)>
  # DEBUG result => NULL
  # DEBUG BEGIN_STMT
  switch (type_14(D)) <default: <L14> [16.67%], case 0: <L22> [16.67%], case 1: <L23> [16.67%], case 2: <L4> [16.67%], case 3: <L5> [16.67%], case 4: <L3> [16.67%]>

  <bb 7> [local count: 15617]:
<L3>:
  # DEBUG BEGIN_STMT
  FlexCAN_SetErrIntCmd (pBase_11, 32768, enable_15(D));
  # DEBUG BEGIN_STMT
  goto <bb 16>; [100.00%]

  <bb 8> [local count: 15617]:
<L4>:
  # DEBUG BEGIN_STMT
  FlexCAN_SetErrIntCmd (pBase_11, 16384, enable_15(D));
  # DEBUG BEGIN_STMT
  goto <bb 16>; [100.00%]

  <bb 9> [local count: 15617]:
<L5>:
  # DEBUG BEGIN_STMT
  FlexCAN_SetErrIntCmd (pBase_11, 16385, enable_15(D));
  # DEBUG BEGIN_STMT
  goto <bb 16>; [100.00%]

  <bb 10> [local count: 15617]:
<L22>:
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_11
  # DEBUG INLINE_ENTRY FlexCAN_IsFreezeMode
  # DEBUG BEGIN_STMT
  _26 ={v} MEM[(const struct FLEXCAN_Type *)pBase_11].MCR;
  _27 = _26 & 16777216;
  # DEBUG base => NULL
  if (_27 == 0)
    goto <bb 16>; [67.00%]
  else
    goto <bb 11>; [33.00%]

  <bb 11> [local count: 5154]:
  # DEBUG BEGIN_STMT
  FlexCAN_SetErrIntCmd (pBase_11, 1024, enable_15(D));
  goto <bb 16>; [100.00%]

  <bb 12> [local count: 15617]:
<L23>:
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_11
  # DEBUG INLINE_ENTRY FlexCAN_IsFreezeMode
  # DEBUG BEGIN_STMT
  _28 ={v} MEM[(const struct FLEXCAN_Type *)pBase_11].MCR;
  _29 = _28 & 16777216;
  # DEBUG base => NULL
  if (_29 == 0)
    goto <bb 16>; [67.00%]
  else
    goto <bb 13>; [33.00%]

  <bb 13> [local count: 5154]:
  # DEBUG BEGIN_STMT
  FlexCAN_SetErrIntCmd (pBase_11, 2048, enable_15(D));
  goto <bb 16>; [100.00%]

  <bb 14> [local count: 15617]:
<L14>:
  # DEBUG BEGIN_STMT
  x ={v} 0;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_30 ={v} x;
  if (x.0_30 != 0)
    goto <bb 16>; [50.00%]
  else
    goto <bb 20>; [50.00%]

  <bb 20> [local count: 7809]:

  <bb 15> [local count: 78085593]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 22> [local count: 78085593]:
  goto <bb 15>; [100.00%]

  <bb 16> [local count: 99584]:
  # result_3 = PHI <result_13(5), result_9(7), result_9(8), result_9(9), result_9(11), result_9(13), result_9(14), 1(10), 1(12)>
  # DEBUG x => NULL
  # DEBUG result => result_3
  # DEBUG BEGIN_STMT
  if (_24 < 0)
    goto <bb 17>; [25.50%]
  else
    goto <bb 19>; [74.50%]

  <bb 17> [local count: 25394]:
  # DEBUG BEGIN_STMT
  status_22 = FlexCAN_Disable (pBase_11);
  # DEBUG status => status_22
  # DEBUG BEGIN_STMT
  if (status_22 != 0)
    goto <bb 18>; [50.00%]
  else
    goto <bb 19>; [50.00%]

  <bb 18> [local count: 12697]:
  # DEBUG BEGIN_STMT
  # DEBUG result => status_22

  <bb 19> [local count: 99584]:
  # result_4 = PHI <result_3(16), result_3(17), status_22(18)>
  # DEBUG result => result_4
  # DEBUG BEGIN_STMT
  return result_4;

}



;; Function FlexCAN_Ip_AbortTransfer (FlexCAN_Ip_AbortTransfer, funcdef_no=97, decl_uid=6505, cgraph_uid=98, symbol_order=99)


Symbols to be put in SSA form
{ D.8272 D.8852 D.8862 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 38
Number of blocks to update: 37 ( 97%)


Merging blocks 3 and 16
Merging blocks 5 and 15
Removing basic block 9
Removing basic block 11
Removing basic block 13
Removing basic block 14
Removing basic block 20
Merging blocks 27 and 17
Removing basic block 28
Merging blocks 30 and 37
Merging blocks 30 and 36
;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
;;
;; Loop 3
;;  header 11, latch 10
;;  depth 1, outer 0
;;  nodes: 11 10
;;
;; Loop 1
;;  header 5, latch 5
;;  depth 1, outer 0
;;  nodes: 5
;;
;; Loop 2
;;  header 3, latch 3
;;  depth 1, outer 0
;;  nodes: 3
;; 2 succs { 4 3 }
;; 3 succs { 3 }
;; 4 succs { 6 5 }
;; 5 succs { 5 }
;; 6 succs { 7 26 }
;; 7 succs { 26 8 }
;; 8 succs { 9 18 }
;; 9 succs { 11 }
;; 10 succs { 12 11 }
;; 11 succs { 10 12 }
;; 12 succs { 13 17 }
;; 13 succs { 14 15 }
;; 14 succs { 15 }
;; 15 succs { 16 17 }
;; 16 succs { 17 }
;; 17 succs { 18 }
;; 18 succs { 19 26 }
;; 19 succs { 20 24 }
;; 20 succs { 21 22 }
;; 21 succs { 22 }
;; 22 succs { 23 25 }
;; 23 succs { 25 }
;; 24 succs { 25 }
;; 25 succs { 26 }
;; 26 succs { 1 }
FlexCAN_Ip_AbortTransfer (uint8 u8Instance, uint8 mb_idx)
{
  uint32 D.8862;
  struct FLEXCAN_Type * pBase;
  struct Flexcan_Ip_StateType * state;
  uint32 val1;
  uint32 val2;
  uint32 flexcan_mb_config;
  volatile uint32 * flexcan_mb;
  struct FLEXCAN_Type * pBase;
  struct Flexcan_Ip_StateType * state;
  Flexcan_Ip_StatusType result;
  uint32 timeStart;
  uint32 timeElapsed;
  uint32 flexcan_mb_config;
  uint32 uS2Ticks;
  volatile uint32 * flexcan_mb;
  Flexcan_Ip_StatusType D.8852;
  volatile boolean x;
  volatile boolean x;
  Flexcan_Ip_StatusType result;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * pBase;
  _Bool _1;
  unsigned char _2;
  _Bool _3;
  int _4;
  int _5;
  <unnamed type> _6;
  long unsigned int _7;
  _Bool _8;
  <unnamed type> _9;
  <unnamed type> _10;
  _Bool x.0_24;
  _Bool x.0_25;
  int _28;
  long unsigned int _31;
  long unsigned int _37;
  long unsigned int _38;
  unsigned char _41;
  long unsigned int _44;
  long unsigned int _45;
  int _46;
  int _49;
  int _52;
  _Bool _53;
  long unsigned int _54;
  long unsigned int _55;
  long unsigned int _58;
  _Bool _63;
  long unsigned int _64;
  long unsigned int _69;
  long unsigned int _70;
  long unsigned int _71;
  long unsigned int _72;
  long unsigned int _73;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  _1 = u8Instance_15(D) <= 2;
  x ={v} _1;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_25 ={v} x;
  if (x.0_25 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _2 = mb_idx_17(D) + 224;
  _3 = _2 > 222;
  x ={v} _3;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_24 ={v} x;
  if (x.0_24 != 0)
    goto <bb 6>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 5> [local count: 536870913]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 5>; [100.00%]

  <bb 6> [local count: 53687]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _4 = (int) u8Instance_15(D);
  pBase_18 = Flexcan_Ip_apxBase[_4];
  # DEBUG pBase => pBase_18
  # DEBUG BEGIN_STMT
  state_19 = Flexcan_Ip_apxState[_4];
  # DEBUG state => state_19
  # DEBUG BEGIN_STMT
  # DEBUG result => 0
  # DEBUG BEGIN_STMT
  if (mb_idx_17(D) <= 31)
    goto <bb 7>; [50.00%]
  else
    goto <bb 26>; [50.00%]

  <bb 7> [local count: 26844]:
  # DEBUG BEGIN_STMT
  _5 = (int) mb_idx_17(D);
  _6 ={v} state_19->mbs[_5].state;
  if (_6 == 0)
    goto <bb 26>; [52.23%]
  else
    goto <bb 8>; [47.77%]

  <bb 8> [local count: 12823]:
  # DEBUG BEGIN_STMT
  _7 = (long unsigned int) mb_idx_17(D);
  _8 = state_19->isIntActive;
  FLEXCAN_ClearMsgBuffIntCmd (pBase_18, u8Instance_15(D), _7, _8);
  # DEBUG BEGIN_STMT
  _9 ={v} state_19->mbs[_5].state;
  if (_9 == 2)
    goto <bb 9>; [20.24%]
  else
    goto <bb 18>; [79.76%]

  <bb 9> [local count: 2595]:
  # DEBUG BEGIN_STMT
  # DEBUG u8Instance => u8Instance_15(D)
  # DEBUG mb_idx => mb_idx_17(D)
  # DEBUG INLINE_ENTRY FlexCAN_AbortTxTransfer
  # DEBUG BEGIN_STMT
  _28 = (int) u8Instance_15(D);
  pBase_29 = Flexcan_Ip_apxBase[_28];
  # DEBUG pBase => pBase_29
  # DEBUG BEGIN_STMT
  state_30 = Flexcan_Ip_apxState[_28];
  # DEBUG state => state_30
  # DEBUG BEGIN_STMT
  # DEBUG result => 0
  # DEBUG BEGIN_STMT
  timeStart = 0;
  # DEBUG BEGIN_STMT
  # DEBUG timeElapsed => 0
  # DEBUG BEGIN_STMT
  # DEBUG flexcan_mb_config => 0
  # DEBUG BEGIN_STMT
  # DEBUG uS2Ticks => 0
  # DEBUG BEGIN_STMT
  # DEBUG flexcan_mb => 0B
  # DEBUG BEGIN_STMT
  _31 = (long unsigned int) mb_idx_17(D);
  flexcan_mb_32 = FlexCAN_GetMsgBuffRegion (pBase_29, _31);
  # DEBUG flexcan_mb => flexcan_mb_32
  # DEBUG BEGIN_STMT
  flexcan_mb_config_33 ={v} *flexcan_mb_32;
  # DEBUG flexcan_mb_config => flexcan_mb_config_33
  # DEBUG BEGIN_STMT
  flexcan_mb_config_34 = flexcan_mb_config_33 & 4043309055;
  # DEBUG flexcan_mb_config => flexcan_mb_config_34
  # DEBUG BEGIN_STMT
  flexcan_mb_config_35 = flexcan_mb_config_34 | 150994944;
  # DEBUG flexcan_mb_config => flexcan_mb_config_35
  # DEBUG BEGIN_STMT
  *flexcan_mb_32 ={v} flexcan_mb_config_35;
  # DEBUG BEGIN_STMT
  uS2Ticks_36 = OsIf_MicrosToTicks (10000, 0);
  # DEBUG uS2Ticks => uS2Ticks_36
  # DEBUG BEGIN_STMT
  _37 = OsIf_GetCounter (0);
  timeStart = _37;
  # DEBUG BEGIN_STMT
  goto <bb 11>; [100.00%]

  <bb 10> [local count: 22927]:
  # DEBUG BEGIN_STMT
  _38 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_40 = _38 + timeElapsed_39;
  # DEBUG timeElapsed => timeElapsed_40
  # DEBUG BEGIN_STMT
  if (uS2Ticks_36 <= timeElapsed_40)
    goto <bb 12>; [5.50%]
  else
    goto <bb 11>; [94.50%]

  <bb 11> [local count: 24262]:
  # timeElapsed_39 = PHI <0(9), timeElapsed_40(10)>
  # DEBUG timeElapsed => timeElapsed_39
  # DEBUG BEGIN_STMT
  _41 = FlexCAN_GetBuffStatusFlag (pBase_29, _31);
  if (_41 == 0)
    goto <bb 10>; [94.50%]
  else
    goto <bb 12>; [5.50%]

  <bb 12> [local count: 2595]:
  # result_42 = PHI <3(10), 0(11)>
  # DEBUG result => result_42
  # DEBUG BEGIN_STMT
  if (result_42 != 3)
    goto <bb 13>; [66.00%]
  else
    goto <bb 17>; [34.00%]

  <bb 13> [local count: 1713]:
  # DEBUG BEGIN_STMT
  flexcan_mb_config_43 ={v} *flexcan_mb_32;
  # DEBUG flexcan_mb_config => flexcan_mb_config_43
  # DEBUG BEGIN_STMT
  _44 = flexcan_mb_config_43 >> 24;
  _45 = _44 & 15;
  if (_45 == 8)
    goto <bb 14>; [34.00%]
  else
    goto <bb 15>; [66.00%]

  <bb 14> [local count: 582]:
  # DEBUG BEGIN_STMT
  # DEBUG result => 5

  <bb 15> [local count: 1713]:
  # result_48 = PHI <result_42(13), 5(14)>
  # DEBUG result => result_48
  # DEBUG BEGIN_STMT
  if (_45 == 9)
    goto <bb 16>; [34.00%]
  else
    goto <bb 17>; [66.00%]

  <bb 16> [local count: 582]:
  # DEBUG BEGIN_STMT
  # DEBUG result => 0

  <bb 17> [local count: 2595]:
  # result_47 = PHI <result_42(12), result_48(15), 0(16)>
  # DEBUG result => result_47
  # DEBUG BEGIN_STMT
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase_29, _31);
  # DEBUG BEGIN_STMT
  _46 = (int) mb_idx_17(D);
  state_30->mbs[_46].state ={v} 0;
  # DEBUG BEGIN_STMT
  timeStart ={v} {CLOBBER};
  _89 = result_47;
  # DEBUG u8Instance => NULL
  # DEBUG mb_idx => NULL
  # DEBUG flexcan_mb => NULL
  # DEBUG uS2Ticks => NULL
  # DEBUG flexcan_mb_config => NULL
  # DEBUG timeElapsed => NULL
  # DEBUG timeStart => NULL
  # DEBUG result => NULL
  # DEBUG state => NULL
  # DEBUG pBase => NULL
  result_22 = _89;
  # DEBUG result => result_22

  <bb 18> [local count: 12823]:
  # result_11 = PHI <0(8), result_22(17)>
  # DEBUG result => result_11
  # DEBUG BEGIN_STMT
  _10 ={v} state_19->mbs[_5].state;
  if (_10 == 1)
    goto <bb 19>; [20.24%]
  else
    goto <bb 26>; [79.76%]

  <bb 19> [local count: 2595]:
  # DEBUG BEGIN_STMT
  # DEBUG u8Instance => u8Instance_15(D)
  # DEBUG mb_idx => mb_idx_17(D)
  # DEBUG INLINE_ENTRY FlexCAN_AbortRxTransfer
  # DEBUG BEGIN_STMT
  _49 = (int) u8Instance_15(D);
  pBase_50 = Flexcan_Ip_apxBase[_49];
  # DEBUG pBase => pBase_50
  # DEBUG BEGIN_STMT
  state_51 = Flexcan_Ip_apxState[_49];
  # DEBUG state => state_51
  # DEBUG BEGIN_STMT
  # DEBUG val1 => 0
  # DEBUG BEGIN_STMT
  # DEBUG val2 => 0
  # DEBUG BEGIN_STMT
  # DEBUG flexcan_mb_config => 0
  # DEBUG BEGIN_STMT
  # DEBUG flexcan_mb => 0B
  # DEBUG BEGIN_STMT
  _52 = (int) mb_idx_17(D);
  state_51->mbs[_52].state ={v} 0;
  # DEBUG BEGIN_STMT
  _53 = state_51->bIsLegacyFifoEn;
  if (_53 != 0)
    goto <bb 20>; [67.00%]
  else
    goto <bb 24>; [33.00%]

  <bb 20> [local count: 1739]:
  # DEBUG BEGIN_STMT
  _54 ={v} pBase_50->CTRL2;
  _55 = _54 >> 24;
  val1_56 = _55 & 15;
  # DEBUG val1 => val1_56
  # DEBUG BEGIN_STMT
  # DEBUG x => val1_56
  # DEBUG INLINE_ENTRY RxFifoOcuppiedLastMsgBuff
  # DEBUG BEGIN_STMT
  _70 = val1_56 + 1;
  _71 = _70 * 8;
  _72 = _71 >> 2;
  _73 = _72 + 5;
  _94 = _73;
  # DEBUG x => NULL
  val2_57 = _94;
  # DEBUG val2 => val2_57
  # DEBUG BEGIN_STMT
  _58 = (long unsigned int) mb_idx_17(D);
  if (val2_57 < _58)
    goto <bb 21>; [33.00%]
  else
    goto <bb 22>; [67.00%]

  <bb 21> [local count: 574]:
  # DEBUG BEGIN_STMT
  flexcan_mb_59 = FlexCAN_GetMsgBuffRegion (pBase_50, _58);
  # DEBUG flexcan_mb => flexcan_mb_59
  # DEBUG BEGIN_STMT
  flexcan_mb_config_60 ={v} *flexcan_mb_59;
  # DEBUG flexcan_mb_config => flexcan_mb_config_60
  # DEBUG BEGIN_STMT
  flexcan_mb_config_61 = flexcan_mb_config_60 & 4043309055;
  # DEBUG flexcan_mb_config => flexcan_mb_config_61
  # DEBUG BEGIN_STMT
  # DEBUG flexcan_mb_config => flexcan_mb_config_61
  # DEBUG BEGIN_STMT
  *flexcan_mb_59 ={v} flexcan_mb_config_61;
  # DEBUG BEGIN_STMT
  # DEBUG flexcan_mb_config => flexcan_mb_config_61
  # DEBUG BEGIN_STMT
  flexcan_mb_config_62 = flexcan_mb_config_61 | 67108864;
  # DEBUG flexcan_mb_config => flexcan_mb_config_62
  # DEBUG BEGIN_STMT
  *flexcan_mb_59 ={v} flexcan_mb_config_62;

  <bb 22> [local count: 1739]:
  # DEBUG BEGIN_STMT
  if (mb_idx_17(D) == 0)
    goto <bb 23>; [33.00%]
  else
    goto <bb 25>; [67.00%]

  <bb 23> [local count: 574]:
  # DEBUG BEGIN_STMT
  _63 = state_51->isIntActive;
  FLEXCAN_ClearMsgBuffIntCmd (pBase_50, u8Instance_15(D), 5, _63);
  goto <bb 25>; [100.00%]

  <bb 24> [local count: 856]:
  # DEBUG BEGIN_STMT
  _64 = (long unsigned int) mb_idx_17(D);
  flexcan_mb_65 = FlexCAN_GetMsgBuffRegion (pBase_50, _64);
  # DEBUG flexcan_mb => flexcan_mb_65
  # DEBUG BEGIN_STMT
  flexcan_mb_config_66 ={v} *flexcan_mb_65;
  # DEBUG flexcan_mb_config => flexcan_mb_config_66
  # DEBUG BEGIN_STMT
  flexcan_mb_config_67 = flexcan_mb_config_66 & 4043309055;
  # DEBUG flexcan_mb_config => flexcan_mb_config_67
  # DEBUG BEGIN_STMT
  # DEBUG flexcan_mb_config => flexcan_mb_config_67
  # DEBUG BEGIN_STMT
  *flexcan_mb_65 ={v} flexcan_mb_config_67;
  # DEBUG BEGIN_STMT
  # DEBUG flexcan_mb_config => flexcan_mb_config_67
  # DEBUG BEGIN_STMT
  flexcan_mb_config_68 = flexcan_mb_config_67 | 67108864;
  # DEBUG flexcan_mb_config => flexcan_mb_config_68
  # DEBUG BEGIN_STMT
  *flexcan_mb_65 ={v} flexcan_mb_config_68;

  <bb 25> [local count: 2595]:
  # DEBUG BEGIN_STMT
  _69 = (long unsigned int) mb_idx_17(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase_50, _69);

  <bb 26> [local count: 53687]:
  # result_12 = PHI <0(6), 5(7), result_11(18), result_11(25)>
  # DEBUG u8Instance => NULL
  # DEBUG mb_idx => NULL
  # DEBUG flexcan_mb => NULL
  # DEBUG flexcan_mb_config => NULL
  # DEBUG val2 => NULL
  # DEBUG val1 => NULL
  # DEBUG state => NULL
  # DEBUG pBase => NULL
  # DEBUG result => result_12
  # DEBUG BEGIN_STMT
  return result_12;

}



;; Function FlexCAN_Ip_SetRxMb14Mask_Privileged (FlexCAN_Ip_SetRxMb14Mask_Privileged, funcdef_no=98, decl_uid=6398, cgraph_uid=99, symbol_order=100)

FlexCAN_Ip_SetRxMb14Mask_Privileged (uint8 instance, uint32 mask)
{
  volatile boolean x;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  int _2;
  long unsigned int _18;
  signed int _19;
  _Bool x.0_20;
  long unsigned int _21;
  long unsigned int _22;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  _1 = instance_8(D) <= 2;
  x ={v} _1;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_20 ={v} x;
  if (x.0_20 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 14>; [50.00%]

  <bb 14> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 15> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  # DEBUG result => 0
  # DEBUG BEGIN_STMT
  # DEBUG status => 0
  # DEBUG BEGIN_STMT
  _2 = (int) instance_8(D);
  pBase_11 = Flexcan_Ip_apxBase[_2];
  # DEBUG pBase => pBase_11
  # DEBUG BEGIN_STMT
  # DEBUG freeze => 0
  # DEBUG BEGIN_STMT
  # DEBUG pBase => pBase_11
  # DEBUG INLINE_ENTRY FlexCAN_IsEnabled
  # DEBUG BEGIN_STMT
  _18 ={v} MEM[(const struct FLEXCAN_Type *)pBase_11].MCR;
  _19 = (signed int) _18;
  # DEBUG pBase => NULL
  # DEBUG disabled => _19 < 0
  # DEBUG BEGIN_STMT
  if (_19 < 0)
    goto <bb 5>; [25.50%]
  else
    goto <bb 6>; [74.50%]

  <bb 5> [local count: 27380]:
  # DEBUG BEGIN_STMT
  result_13 = FlexCAN_Enable (pBase_11);
  # DEBUG result => result_13

  <bb 6> [local count: 107374]:
  # result_3 = PHI <0(4), result_13(5)>
  # DEBUG result => result_3
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_11
  # DEBUG INLINE_ENTRY FlexCAN_IsFreezeMode
  # DEBUG BEGIN_STMT
  _21 ={v} MEM[(const struct FLEXCAN_Type *)pBase_11].MCR;
  _22 = _21 & 16777216;
  # DEBUG base => NULL
  # DEBUG freeze => _22 != 0
  # DEBUG BEGIN_STMT
  if (_22 == 0)
    goto <bb 7>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 7> [local count: 53687]:
  if (result_3 == 0)
    goto <bb 10>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 8> [local count: 80531]:
  # DEBUG result => result_3
  # DEBUG BEGIN_STMT
  if (result_3 == 0)
    goto <bb 9>; [50.00%]
  else
    goto <bb 10>; [50.00%]

  <bb 9> [local count: 40265]:
  # DEBUG BEGIN_STMT
  pBase_11->RX14MASK ={v} mask_14(D);

  <bb 10> [local count: 107374]:
  # result_10 = PHI <result_3(8), 0(9), 1(7)>
  # DEBUG result => NULL
  # DEBUG BEGIN_STMT
  if (_19 < 0)
    goto <bb 11>; [25.50%]
  else
    goto <bb 13>; [74.50%]

  <bb 11> [local count: 27380]:
  # DEBUG BEGIN_STMT
  status_17 = FlexCAN_Disable (pBase_11);
  # DEBUG status => status_17
  # DEBUG BEGIN_STMT
  if (status_17 != 0)
    goto <bb 12>; [50.00%]
  else
    goto <bb 13>; [50.00%]

  <bb 12> [local count: 13690]:
  # DEBUG BEGIN_STMT
  # DEBUG result => status_17

  <bb 13> [local count: 107374]:
  # result_4 = PHI <result_10(10), result_10(11), status_17(12)>
  # DEBUG result => result_4
  # DEBUG BEGIN_STMT
  return result_4;

}



;; Function FlexCAN_Ip_SetRxMb15Mask_Privileged (FlexCAN_Ip_SetRxMb15Mask_Privileged, funcdef_no=99, decl_uid=6401, cgraph_uid=100, symbol_order=101)

FlexCAN_Ip_SetRxMb15Mask_Privileged (uint8 instance, uint32 mask)
{
  volatile boolean x;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  int _2;
  long unsigned int _18;
  signed int _19;
  _Bool x.0_20;
  long unsigned int _21;
  long unsigned int _22;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  _1 = instance_8(D) <= 2;
  x ={v} _1;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_20 ={v} x;
  if (x.0_20 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 14>; [50.00%]

  <bb 14> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 15> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  # DEBUG result => 0
  # DEBUG BEGIN_STMT
  # DEBUG status => 0
  # DEBUG BEGIN_STMT
  _2 = (int) instance_8(D);
  pBase_11 = Flexcan_Ip_apxBase[_2];
  # DEBUG pBase => pBase_11
  # DEBUG BEGIN_STMT
  # DEBUG freeze => 0
  # DEBUG BEGIN_STMT
  # DEBUG pBase => pBase_11
  # DEBUG INLINE_ENTRY FlexCAN_IsEnabled
  # DEBUG BEGIN_STMT
  _18 ={v} MEM[(const struct FLEXCAN_Type *)pBase_11].MCR;
  _19 = (signed int) _18;
  # DEBUG pBase => NULL
  # DEBUG disabled => _19 < 0
  # DEBUG BEGIN_STMT
  if (_19 < 0)
    goto <bb 5>; [25.50%]
  else
    goto <bb 6>; [74.50%]

  <bb 5> [local count: 27380]:
  # DEBUG BEGIN_STMT
  result_13 = FlexCAN_Enable (pBase_11);
  # DEBUG result => result_13

  <bb 6> [local count: 107374]:
  # result_3 = PHI <0(4), result_13(5)>
  # DEBUG result => result_3
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_11
  # DEBUG INLINE_ENTRY FlexCAN_IsFreezeMode
  # DEBUG BEGIN_STMT
  _21 ={v} MEM[(const struct FLEXCAN_Type *)pBase_11].MCR;
  _22 = _21 & 16777216;
  # DEBUG base => NULL
  # DEBUG freeze => _22 != 0
  # DEBUG BEGIN_STMT
  if (_22 == 0)
    goto <bb 7>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 7> [local count: 53687]:
  if (result_3 == 0)
    goto <bb 10>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 8> [local count: 80531]:
  # DEBUG result => result_3
  # DEBUG BEGIN_STMT
  if (result_3 == 0)
    goto <bb 9>; [50.00%]
  else
    goto <bb 10>; [50.00%]

  <bb 9> [local count: 40265]:
  # DEBUG BEGIN_STMT
  pBase_11->RX15MASK ={v} mask_14(D);

  <bb 10> [local count: 107374]:
  # result_10 = PHI <result_3(8), 0(9), 1(7)>
  # DEBUG result => NULL
  # DEBUG BEGIN_STMT
  if (_19 < 0)
    goto <bb 11>; [25.50%]
  else
    goto <bb 13>; [74.50%]

  <bb 11> [local count: 27380]:
  # DEBUG BEGIN_STMT
  status_17 = FlexCAN_Disable (pBase_11);
  # DEBUG status => status_17
  # DEBUG BEGIN_STMT
  if (status_17 != 0)
    goto <bb 12>; [50.00%]
  else
    goto <bb 13>; [50.00%]

  <bb 12> [local count: 13690]:
  # DEBUG BEGIN_STMT
  # DEBUG result => status_17

  <bb 13> [local count: 107374]:
  # result_4 = PHI <result_10(10), result_10(11), status_17(12)>
  # DEBUG result => result_4
  # DEBUG BEGIN_STMT
  return result_4;

}



;; Function FlexCAN_Ip_SetListenOnlyMode_Privileged (FlexCAN_Ip_SetListenOnlyMode_Privileged, funcdef_no=100, decl_uid=6434, cgraph_uid=101, symbol_order=102)


Symbols to be put in SSA form
{ D.8275 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 20
Number of blocks to update: 19 ( 95%)


Merging blocks 3 and 15
Merging blocks 9 and 17
Removing basic block 14
Merging blocks 19 and 16
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
;;
;; Loop 1
;;  header 3, latch 3
;;  depth 1, outer 0
;;  nodes: 3
;; 2 succs { 4 3 }
;; 3 succs { 3 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 7 8 }
;; 7 succs { 12 8 }
;; 8 succs { 9 12 }
;; 9 succs { 11 10 }
;; 10 succs { 11 }
;; 11 succs { 12 }
;; 12 succs { 13 15 }
;; 13 succs { 14 15 }
;; 14 succs { 15 }
;; 15 succs { 1 }
FlexCAN_Ip_SetListenOnlyMode_Privileged (uint8 instance, const boolean enable)
{
  volatile boolean x;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  _Bool _1;
  int _2;
  long unsigned int _20;
  signed int _21;
  _Bool x.0_22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _26;
  long unsigned int _27;
  long unsigned int iftmp.7_28;
  long unsigned int _29;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  _1 = instance_8(D) <= 2;
  x ={v} _1;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_22 ={v} x;
  if (x.0_22 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  # DEBUG result => 0
  # DEBUG BEGIN_STMT
  # DEBUG status => 0
  # DEBUG BEGIN_STMT
  _2 = (int) instance_8(D);
  pBase_11 = Flexcan_Ip_apxBase[_2];
  # DEBUG pBase => pBase_11
  # DEBUG BEGIN_STMT
  # DEBUG pBase => pBase_11
  # DEBUG INLINE_ENTRY FlexCAN_IsEnabled
  # DEBUG BEGIN_STMT
  _20 ={v} MEM[(const struct FLEXCAN_Type *)pBase_11].MCR;
  _21 = (signed int) _20;
  # DEBUG pBase => NULL
  # DEBUG disabled => _21 < 0
  # DEBUG BEGIN_STMT
  if (_21 < 0)
    goto <bb 5>; [25.50%]
  else
    goto <bb 6>; [74.50%]

  <bb 5> [local count: 27380]:
  # DEBUG BEGIN_STMT
  result_13 = FlexCAN_Enable (pBase_11);
  # DEBUG result => result_13

  <bb 6> [local count: 107374]:
  # result_3 = PHI <0(4), result_13(5)>
  # DEBUG result => result_3
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_11
  # DEBUG INLINE_ENTRY FlexCAN_IsFreezeMode
  # DEBUG BEGIN_STMT
  _23 ={v} MEM[(const struct FLEXCAN_Type *)pBase_11].MCR;
  _24 = _23 & 16777216;
  # DEBUG base => NULL
  # DEBUG freeze => _24 != 0
  # DEBUG BEGIN_STMT
  if (_24 == 0)
    goto <bb 7>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 7> [local count: 53687]:
  if (result_3 == 0)
    goto <bb 12>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 8> [local count: 80531]:
  # DEBUG result => result_3
  # DEBUG BEGIN_STMT
  if (result_3 == 0)
    goto <bb 9>; [33.00%]
  else
    goto <bb 12>; [67.00%]

  <bb 9> [local count: 26575]:
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_10 ();
  # DEBUG BEGIN_STMT
  # DEBUG base => pBase_11
  # DEBUG enableListenOnly => enable_15(D)
  # DEBUG INLINE_ENTRY FlexCAN_SetListenOnlyMode
  # DEBUG BEGIN_STMT
  _26 ={v} pBase_11->CTRL1;
  _27 = _26 & 4294967287;
  if (enable_15(D) != 0)
    goto <bb 11>; [50.00%]
  else
    goto <bb 10>; [50.00%]

  <bb 10> [local count: 13288]:

  <bb 11> [local count: 26575]:
  # iftmp.7_28 = PHI <8(9), 0(10)>
  _29 = _27 | iftmp.7_28;
  pBase_11->CTRL1 ={v} _29;
  # DEBUG base => NULL
  # DEBUG enableListenOnly => NULL
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_10 ();

  <bb 12> [local count: 107374]:
  # result_10 = PHI <result_3(8), 0(11), 1(7)>
  # DEBUG result => NULL
  # DEBUG BEGIN_STMT
  if (_21 < 0)
    goto <bb 13>; [25.50%]
  else
    goto <bb 15>; [74.50%]

  <bb 13> [local count: 27380]:
  # DEBUG BEGIN_STMT
  status_19 = FlexCAN_Disable (pBase_11);
  # DEBUG status => status_19
  # DEBUG BEGIN_STMT
  if (status_19 != 0)
    goto <bb 14>; [50.00%]
  else
    goto <bb 15>; [50.00%]

  <bb 14> [local count: 13690]:
  # DEBUG BEGIN_STMT
  # DEBUG result => status_19

  <bb 15> [local count: 107374]:
  # result_4 = PHI <result_10(12), result_10(13), status_19(14)>
  # DEBUG result => result_4
  # DEBUG BEGIN_STMT
  return result_4;

}



;; Function FlexCAN_Ip_GetListenOnlyMode (FlexCAN_Ip_GetListenOnlyMode, funcdef_no=101, decl_uid=6507, cgraph_uid=102, symbol_order=103)

FlexCAN_Ip_GetListenOnlyMode (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  int _1;
  long unsigned int _5;
  long unsigned int _6;
  _Bool _7;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _1 = (int) instance_2(D);
  base_4 = Flexcan_Ip_apxBase[_1];
  # DEBUG base => base_4
  # DEBUG BEGIN_STMT
  # DEBUG base => base_4
  # DEBUG INLINE_ENTRY FlexCAN_IsListenOnlyModeEnabled
  # DEBUG BEGIN_STMT
  _5 ={v} base_4->CTRL1;
  _6 = _5 & 8;
  _7 = _6 != 0;
  # DEBUG base => NULL
  return _7;

}



;; Function FlexCAN_Ip_ManualBusOffRecovery (FlexCAN_Ip_ManualBusOffRecovery, funcdef_no=102, decl_uid=6521, cgraph_uid=103, symbol_order=104)

FlexCAN_Ip_ManualBusOffRecovery (uint8 Instance)
{
  volatile boolean x;
  Flexcan_Ip_StatusType RetVal;
  uint32 uS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  struct FLEXCAN_Type * Base;
  int _1;
  _Bool _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _31;
  _Bool x.0_34;

  <bb 2> [local count: 214748]:
  # DEBUG BEGIN_STMT
  _1 = (int) Instance_18(D);
  Base_20 = Flexcan_Ip_apxBase[_1];
  # DEBUG Base => Base_20
  # DEBUG BEGIN_STMT
  timeStart = 0;
  # DEBUG BEGIN_STMT
  # DEBUG timeElapsed => 0
  # DEBUG BEGIN_STMT
  uS2Ticks_23 = OsIf_MicrosToTicks (10000, 0);
  # DEBUG uS2Ticks => uS2Ticks_23
  # DEBUG BEGIN_STMT
  # DEBUG RetVal => 1
  # DEBUG BEGIN_STMT
  _2 = Instance_18(D) <= 2;
  x ={v} _2;
  # DEBUG x => x
  # DEBUG INLINE_ENTRY DevAssert
  # DEBUG BEGIN_STMT
  x.0_34 ={v} x;
  if (x.0_34 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 10>; [50.00%]

  <bb 10> [local count: 107374]:

  <bb 3> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT

  <bb 12> [local count: 1073741824]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 107374]:
  # DEBUG BEGIN_STMT
  # DEBUG x => NULL
  # DEBUG BEGIN_STMT
  _3 ={v} Base_20->CTRL1;
  _4 = _3 & 64;
  if (_4 != 0)
    goto <bb 5>; [50.00%]
  else
    goto <bb 9>; [50.00%]

  <bb 5> [local count: 53687]:
  # DEBUG BEGIN_STMT
  # DEBUG RetVal => 0
  # DEBUG BEGIN_STMT
  _5 ={v} Base_20->ESR1;
  _6 = _5 & 32;
  if (_6 != 0)
    goto <bb 6>; [33.00%]
  else
    goto <bb 9>; [67.00%]

  <bb 6> [local count: 17717]:
  # DEBUG BEGIN_STMT
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_20 ();
  # DEBUG BEGIN_STMT
  _7 ={v} Base_20->CTRL1;
  _8 = _7 & 4294967231;
  Base_20->CTRL1 ={v} _8;
  # DEBUG BEGIN_STMT
  _9 ={v} Base_20->CTRL1;
  _10 = _9 | 64;
  Base_20->CTRL1 ={v} _10;
  # DEBUG BEGIN_STMT
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_20 ();
  # DEBUG BEGIN_STMT
  _11 = OsIf_GetCounter (0);
  timeStart = _11;
  # DEBUG BEGIN_STMT
  goto <bb 8>; [100.00%]

  <bb 7> [local count: 156507]:
  # DEBUG BEGIN_STMT
  _31 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_32 = timeElapsed_14 + _31;
  # DEBUG timeElapsed => timeElapsed_32
  # DEBUG BEGIN_STMT
  if (uS2Ticks_23 <= timeElapsed_32)
    goto <bb 9>; [5.50%]
  else
    goto <bb 11>; [94.50%]

  <bb 11> [local count: 147899]:

  <bb 8> [local count: 165615]:
  # timeElapsed_14 = PHI <0(6), timeElapsed_32(11)>
  # DEBUG timeElapsed => timeElapsed_14
  # DEBUG BEGIN_STMT
  _12 ={v} Base_20->ESR1;
  _13 = _12 & 32;
  if (_13 != 0)
    goto <bb 7>; [94.50%]
  else
    goto <bb 9>; [5.50%]

  <bb 9> [local count: 107374]:
  # RetVal_15 = PHI <1(4), 0(5), 3(7), 0(8)>
  # DEBUG RetVal => RetVal_15
  # DEBUG BEGIN_STMT
  timeStart ={v} {CLOBBER};
  return RetVal_15;

}


